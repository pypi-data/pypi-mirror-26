# Default arguments for the Markov Chain Monte Carlo sampler

sampler:
  mcmc:
    # Number of discarded burn-in samples
    burn_in: 100
    # Error criterion: max attempts (= weight-1) before deciding the chain is stuck
    max_tries: 100
    # File name (including path) or numpy defininf a covariance matrix for the proposal
    # If numpy matrix, pass a list of the parameters in the matrix through covmat_params
    covmat: null
    covmat_params: null
    # Update output file(s) every X accepted samples
    output_every: 5
    # Overall scale of the proposal pdf (increase for longer steps)
    propose_scale: 2.4
    # Number of steps*dimension after which convergence is checked
    # and a proposal is learnt (if `learn_proposal: True`)
    check_every_dimension_times: 40
    # Proposal covariance matrix learning
    # -----------------------------------
    learn_proposal: False
    # Don't learn if convergence is worse than...
    learn_proposal_Rminus1_max: 2.
    # (even earlier if a param is not in the given covariance matrix)
    learn_proposal_Rminus1_max_early: 30.
    # ... or if it is better than... (no need to learn, already good!)
    learn_proposal_Rminus1_min: 0.
    # Convergence and stopping
    # ------------------------
    # Maximum number of posterior evaluations
    max_samples: inf
    # Gelman-Rubin R-1 on means (requires MPI!)
    Rminus1_stop: 0.05
    # Gelman-Rubin R-1 on std deviations (requires MPI!)
    Rminus1_cl_stop: 0.3
    Rminus1_cl_level: 0.95
    # Fast-slow hierarchy
    # -------------------
    # Method I: Dragging
    #    Maximum speed that is considered "slow"
    max_speed_slow: 1
    #    Number of interpolating steps,
    #    as a factor times the number of fast directions,
    #    or directly as the number of interpolating steps.
    #    Define just one of them, or none to turn off fast dragging
    drag_nfast_times: null
    drag_interp_steps: null
    # Method II: Oversampling
    #    If True, oversamples each likelihood proportionally to
    #    the ratio of its speed with respect to the slowest speed.
    oversample: False
    # NB.: Oversampled and fast-dragged samples do not count towards
    #      `max_samples` and checkpoints.
    # Callback function
    # -----------------
    callback_function: null
    callback_every: 1000
