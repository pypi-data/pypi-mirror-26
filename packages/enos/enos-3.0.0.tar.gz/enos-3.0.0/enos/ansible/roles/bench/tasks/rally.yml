---
# Install and launch a rally benchmark
- name: Install rally result directory
  file: path=/root/rally_home state=directory owner=65500

- name: Test whether the rally database has been initialized or not
  stat: path=/root/rally_home/.rally.sqlite
  register: sqlite

- name: Initialize database
  when: not sqlite.stat.exists
  docker_container:
    name: "{{ 'database' | to_uuid }}"
    image: rallyforge/rally
    state: started
    volumes:
    - /root/rally_home:/home/rally
    command: rally-manage db create

# NOTE(msimonin): without the pause
# the file seems not to be synced in the next task.
# Relaunching the play a second time is also a possible wokaround.
- name: Waiting a few seconds
  pause: seconds=5

- name: Test whether the rally deployment has been created or not
  command: docker run -v /root/rally_home:/home/rally rallyforge/rally rally deployment list
  register: deployment

- name: Deploy discovery context
  when: "'discovery' not in deployment.stdout"
  docker_container:
    name: "{{ 'deployment' | to_uuid }}"
    image: rallyforge/rally
    state: started
    volumes:
      - /root/rally_home:/home/rally
    env: "{{ os_env }}"
    command: rally deployment create --fromenv --name=discovery

- name: Copy rally scenarios
  copy: src={{ bench.scenario_location }} dest=/root/rally_home/ owner=655500

- name: Create plugin directory
  file:
    path: /root/rally_home/.rally/plugins
    state: directory
    mode: 0755
  when: bench.plugin_location is defined

- name: Copy rally plugins
  copy: src={{ bench.plugin_location }} dest=/root/rally_home/.rally/plugins owner=655500
  when: bench.plugin_location is defined

- name: create arg file
  copy:
    content: "{{ bench.args }}"
    dest: /root/rally_home/rally-args.json

- name: Run benchmark
  docker_container:
    name: "{{ bench.scenario_location | to_uuid }}"
    image: rallyforge/rally
    state: started
    volumes:
      - /root/rally_home:/home/rally
    command: rally task start {{ bench.scenario_location | basename }} --task-args-file /home/rally/rally-args.json
  register: docker_output

- name: Wait for the end of the test, this may take a while...
  command: "docker ps -q --filter id={{ docker_output.ansible_facts.docker_container.Id }}"
  register: finished
  until: finished.stdout == ""
  delay: 20
  retries: 10000

- name: Find the last available report
  shell: docker run -v /root/rally_home:/home/rally rallyforge/rally  rally task list --uuids-only | tail -n 1
  register: task_uuid

# Download rally results only if there are some reports to get back
- name: Generating rally reports (html)
  command: docker run -v /root/rally_home:/home/rally rallyforge/rally rally task report --uuid {{ task_uuid.stdout }} --out report-{{ bench.scenario_location | basename }}-{{ task_uuid.stdout }}.html
  when: task_uuid.stdout != ""

- name: Generating rally reports (json)
  shell: docker run -v /root/rally_home:/home/rally rallyforge/rally rally task results --uuid {{ task_uuid.stdout }} > /root/rally_home/report-{{ bench.scenario_location | basename }}-{{ task_uuid.stdout }}.json
  when: task_uuid.stdout != ""
