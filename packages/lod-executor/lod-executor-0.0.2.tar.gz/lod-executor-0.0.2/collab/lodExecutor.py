import argparse
import bottle
import json
import os
import sys

from collab import execEnv

###############################################################################################
# constants
###############################################################################################


_CONFIG_FILE = "/exec_env_root/config.txt"
_config = None
def _get_config():
    """
    load constants from a configuration file.
    Uses a cache.
    """
    global _config
    if _config is None:
        with open(_CONFIG_FILE, 'r') as f:
            _config = json.load(f)
    return _config


_truth = None
def _get_truth():
    """
    load constants from a file that is autogenerated from the outside when this module is compiled.
    This is a convenient way to share constants between different applications during development.
    Uses a cache.
    """
    global _truth
    if _truth is None:
        with open(_SOURCE_OF_TRUTH, 'r') as f:
            _truth = json.load(f)
    return _truth

def _get_server_url():
    """
    get a connection string that can be used to connect to the server
    """
    use_local_server = _get_config()['use_local_server']
    if use_local_server:
        url = _get_truth()['debug_server_url']
    else:
        url = _get_truth()['server_url']
    return url

def _get_json_encoding_of_server():
    """
    get the type of encoding that the server uses for encoding JSON strings
    """
    res = _get_truth()['json_encoding']
    return res

def _get_docker_registry_login_data():
    """
    get the registry, username and password for logging into the Docker registry
    """
    registry = _get_truth()['docker_registry']
    username = _get_truth()['docker_registry_username']
    password = _get_truth()['docker_registry_password']
    return registry, username, password


##############################################################################################################
# main - initialize
##############################################################################################################


parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers()


##############################################################################################################
# helper functions for authorization
##############################################################################################################


def require_collab_authentication(subparser):
    subparser.add_argument('-e', '--email', default=None,
        help="the password of your Collab account. This can be skipped if you have already used the 'configure' command.")
    subparser.add_argument('-p', '--password', default=None,
        help="the password of your Collab account. This can be skipped if you have already used the 'configure' command.")

def check_if_collab_credentials_are_configured(args):
    """
    if the arguments contain an email and password, return them.
    If not, check if there is a configuration file and use it.
    """
    if args.email is not None and args.password is not None:
        return
    l = [args.email, args.password]
    if not all(v is None for v in l) and not all(v is not None for v in l):
        raise ValueError("either both or neither of email and password must be specified.")
    if os.path.isfile(_CONFIG_FILE):
        with open(_CONFIG_FILE, 'r') as f:
            config = json.load(f)
            args.email = config['email']
            args.password = config['password']
    else:
        raise ValueError("email and password for Collab must be specified. Either use a configuration file for this or provide them as arguments. See --help for details.")

def require_docker_authentication(subparser):
    subparser.add_argument('-dr', '--docker-registry', default=None,
        help="the name of the registry of your Docker account. This can be skipped if you have already used the 'configure' command.")
    subparser.add_argument('-du', '--docker-user', default=None,
        help="the password of your Docker account. This can be skipped if you have already used the 'configure' command.")
    subparser.add_argument('-dp', '--docker-password', default=None,
        help="the password of your Docker account. This can be skipped if you have already used the 'configure' command.")

def check_if_docker_credentials_are_configured(args):
    """
    if the arguments contain an email and password, return them.
    If not, check if there is a configuration file and use it.
    """
    if args.docker_registry is not None and args.docker_user is not None and args.docker_password is not None:
        return
    l = [args.docker_registry, args.docker_user, args.docker_password]
    if not all(v is None for v in l) and not all(v is not None for v in l):
        raise ValueError("either all or none of docker's registry, username and password must be specified.")
    if os.path.isfile(_CONFIG_FILE):
        with open(_CONFIG_FILE, 'r') as f:
            config = json.load(f)
            args.docker_registry = config['docker_registry']
            args.docker_user = config['docker_user']
            args.docker_password = config['docker_password']
    else:
        raise ValueError("username and password for Docker must be specified. Either use a configuration file for this or provide them as arguments. See --help for details.")


##############################################################################################################
# main - functions
##############################################################################################################


def configure(args):
    with open(_CONFIG_FILE, 'w') as f:
        config = {
            'email' : args.email,
            'password' : args.password,
            'docker_registry' : args.docker_registry,
            'docker_user' : args.docker_user,
            'docker_password' : args.docker_password,
            'exec_env_root_folder' : args.exec_env_root_folder,
            'local_exec_env_port' : int(args.local_exec_env_port),
            'use_local_server' : args.use_local_server,
            'serverside_exec_env_recognition_key' : args.serverside_exec_env_recognition_key,
        }
        json.dump(config, f)
    print("successfully created configuration file.")

subparser = subparsers.add_parser('configure',
    help="""creates a configuration file to store your login credentials, so you don't have to specify them every time.
    Be aware that anyone who steals this configuration file will be able to log in with your credentials unless you delete the file again.""")
subparser.add_argument('-e', '--email', required=True,
    help="the email of your Collab account.")
subparser.add_argument('-p', '--password', required=True,
    help="the password of your Collab account.")
subparser.add_argument('-dr', '--docker-registry', required=True,
    help="the name of your Docker registry.")
subparser.add_argument('-du', '--docker-user', required=True,
    help="the username of your Docker registry.")
subparser.add_argument('-dp', '--docker-password', required=True,
    help="the password of your Docker registry.")
subparser.add_argument('-r', '--exec-env-root-folder', required=True,
    help="""the path to the root folder with which this Docker Container is being executed.
    This container needs to know this in addition to being mounted in that volume,
    because it gets access to Docker outside of its own container so that it can start other containers on this same volume.""")
subparser.add_argument('-port', '--local_exec_env_port', required=True,
    help="the port on which the ExecEnv will listen to incoming requests.")
subparser.add_argument('--use-local-server', action='store_true',
    help="A debugging option for developers. If you don't know what this does, ignore it")
subparser.add_argument('-key', '--serverside_exec_env_recognition_key', required=False,
    help="a masterkey used only on the server. If you don't know what this does, ignore it.")
subparser.set_defaults(func=configure)


def delete_configuration(args):
    if os.path.isfile(_CONFIG_FILE):
        os.remove(_CONFIG_FILE)
        return
    else:
        raise ValueError("no config file exists.")

subparser = subparsers.add_parser('delete-configuration',
    help="""deletes the configuration file that stores your login credentials.""")
subparser.set_defaults(func=delete_configuration)


def run_in_loop(args):
    check_if_collab_credentials_are_configured(args)
    check_if_docker_credentials_are_configured(args)
    # DEBUGGING
    if False:
        import docker
        client = docker.from_env()
        folder_mapping = {
            _get_config()['exec_env_root_folder'] : {
                'bind' : "/collab",
                'mode' : 'rw',
            },
        }
        image_name = "rec_test"
        from subprocess import call
        #cmd = ['docker', 'run', image_name]
        #call(cmd)
        client.containers.run(image=image_name, volumes=folder_mapping, detach=False)
        print(1)
    else:
        port_to_listen_to = _get_config()['local_exec_env_port']
        print("running on port %s..." % (port_to_listen_to,))
        bottle.run(host='localhost', port=port_to_listen_to, debug=True)
    # create the ExecEnvManager
    pass
    # notify the user that this program is running
    pass
    # keep responding for incoming commands
    pass

subparser = subparsers.add_parser('run', help="Starts running the ExecEnv so that the website can connect to it.")
require_collab_authentication(subparser)
require_docker_authentication(subparser)
subparser.set_defaults(func=run_in_loop)


##############################################################################################################
# code for the server that listens for requests
##############################################################################################################


@bottle.route('/hello')
def hello():
    return "Hello World!"

@bottle.route ('/test', method='POST')
def tagTweets():
     response.content_type = 'application/json'
     sender = request.json['sender']
     receiver = request.json['receiver']
     message = request.json['message']


##############################################################################################################
# main - finalize
##############################################################################################################


def main():
    if len(sys.argv)==1:
        # if the program is called without arguments, print the help menu and exit
        parser.print_help()
        sys.exit(1)
    else:
        args = parser.parse_args()
        args.func(args)

if __name__ == '__main__':
    main()






