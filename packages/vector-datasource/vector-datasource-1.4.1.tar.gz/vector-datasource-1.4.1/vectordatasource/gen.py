from vectordatasource.meta.function import mz_building_kind_detail

from vectordatasource.meta.function import mz_building_part_kind_detail

from vectordatasource import util

def landuse_props(shape,props,fid,meta):
    if meta.source == 'ne':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'urban_area', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('zoo') == 'enclosure':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'enclosure', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('zoo') == 'petting_zoo':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'petting_zoo', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('zoo') == 'aviary':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'aviary', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'animal':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'animal', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'water_slide':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'water_slide', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'roller_coaster':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'roller_coaster', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'summer_toboggan':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'summer_toboggan', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'carousel':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'carousel', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'amusement_ride':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'amusement_ride', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('historic') == 'fort':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'fort', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('park:type') == 'state_recreational_area' and (props.get('landuse') == 'park' or props.get('leisure') == 'park'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'national_park' and (props.get('protect_class') == '6' or props.get('designation') == 'area_of_outstanding_natural_beauty'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and (props.get('boundary:type') == 'protected_area' or props.get('boundary') == 'protected_area') and props.get('leisure') == 'nature_reserve' and props.get('protect_class') in ('4', '5'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'nature_reserve', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and props.get('boundary:type') == 'protected_area' and props.get('protect_class') == '5' and props.get('leisure') == 'common':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'common', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('historic') == 'battlefield':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':1, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'battlefield', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'national_park' and (props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service') or not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('protect_class') in ('2', '3', '5') or props.get('operator:en') == 'Parks Canada' or props.get('designation') == 'national_park' or props.get('protection_title') == 'National Park'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':1, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'national_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park' and props.get('protect_class') in ('2', '3', '5'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'national_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'national_park' or props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'nature_reserve':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'nature_reserve', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('boundary') == 'protected_area':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'protected_area', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'wood':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wood', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'wood':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wood', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('natural') == 'forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'natural_forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'forest':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'natural_forest', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('natural') == 'wood':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'natural_wood', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'wood':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'natural_wood', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'urban':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'urban', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'rural':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'rural', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'residential':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'residential', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'farm':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'farm', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'farmland':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':2, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'farmland', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('aeroway') == 'aerodrome':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':3, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'aerodrome', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'military':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':3, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'military', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'university':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':3, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'university', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'college':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':3, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'college', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'glacier':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':3, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'glacier', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'cemetery':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'cemetery', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'commercial':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'commercial', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'golf_course':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'golf_course', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'hospital':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'hospital', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'industrial':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'industrial', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('power') == 'plant':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'plant', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('power') == 'generator':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'generator', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('power') in ('substation', 'station', 'sub_station'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'substation', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'railway':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'railway', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'sports_centre':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'sports_centre', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'recreation_ground':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'recreation_ground', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'retail':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'retail', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'stadium':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'stadium', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'zoo':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'zoo', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('zoo') == 'wildlife_park':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wildlife_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'winter_sports':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'winter_sports', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'pier' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'pier', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'wastewater_plant':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wastewater_plant', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'works':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'works', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'bridge':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'bridge', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'tower':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'tower', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'breakwater' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'breakwater', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'water_works':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'water_works', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'groyne' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'groyne', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'dike' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'dike', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'cutline' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':4, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'cutline', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') in ('theme_park', 'Theme Park'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'theme_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'resort':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'resort', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'aquarium':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'aquarium', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'winery':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'winery', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('attraction') == 'maze':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'maze', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'beach':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':5, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'beach', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'garden':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'garden', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'allotments':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'allotments', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('highway') == 'pedestrian' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'pedestrian', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'common':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'common', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'pitch':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'pitch', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'place_of_worship':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'place_of_worship', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'playground':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'playground', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'school':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'school', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'attraction':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'attraction', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'artwork':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'artwork', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'wilderness_hut':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wilderness_hut', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'hanami':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'hanami', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'parking':
        return {'barrier':props.get('barrier'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'surface':props.get('surface'), 'tier':6, 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'parking', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') in ('park', 'national_park') or props.get('leisure') in ('park', 'national_park'):
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'grass':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'grass', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'meadow':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'meadow', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'village_green':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'village_green', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('landuse') == 'quarry':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'quarry', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'land':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'land', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'scrub':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'scrub', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'wetland':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'wetland', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'park':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'natural_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('highway') == 'footway' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'footway', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'library':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'library', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'fuel':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'fuel', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'cinema':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'cinema', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'theatre':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'theatre', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'prison':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'prison', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('aeroway') == 'runway' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'runway', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('aeroway') == 'taxiway' and shape.type in ('Polygon', 'MultiPolygon'):
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'taxiway', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('aeroway') == 'apron':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'apron', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'trail_riding_station':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'trail_riding_station', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'scree':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'scree', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'water_park':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'water_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('waterway') == 'dam':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'dam', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'dog_park':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'dog_park', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('leisure') == 'track':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'recreation_track', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'stone':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'stone', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'rock':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'rock', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'caravan_site':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'caravan_site', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'picnic_site':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'picnic_site', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('natural') == 'tree_row':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'tree_row', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('barrier') == 'hedge':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'hedge', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('highway') == 'services':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'service_area', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('highway') == 'rest_area':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'rest_area', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('historic') == 'citywalls' or props.get('barrier') == 'city_wall':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'city_wall', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('man_made') == 'snow_fence':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'snow_fence', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('barrier') == 'retaining_wall':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'retaining_wall', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('barrier') == 'fence':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'fence', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('tourism') == 'camp_site':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'camp_site', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('barrier') == 'gate':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'gate', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}
    if props.get('amenity') == 'grave_yard':
        return {'barrier':props.get('barrier'), 'surface':props.get('surface'), 'mz_is_building':util.is_building(props.get('building'), props.get('building:part')), 'min_zoom':4 if meta.source == 'ne' else props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'name':props.get('name'), 'kind':'grave_yard', 'natural':props.get('natural'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'mz_label_placement':props.get('mz_label_placement'), 'source':props.get('source'), 'religion':props.get('religion')}

def pois_props(shape,props,fid,meta):
    if 'disused' in props and not props.get('disused') == 'no':
        return {'kind':None}
    if props.get('name') is None and not (props.get('aerialway') == 'pylon' or props.get('aeroway') in ('gate', 'helipad') or props.get('amenity') in ('atm', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'bicycle_repair_station', 'boat_storage', 'car_sharing', 'fuel', 'life_ring', 'parking', 'picnic_table', 'post_box', 'ranger_station', 'recycling', 'shelter', 'shower', 'telephone', 'toilets', 'waste_basket', 'waste_disposal', 'water_point', 'watering_place') or props.get('barrier') in ('cycle_barrier', 'gate', 'toll_booth') or props.get('emergency') in ('lifeguard_tower', 'phone') or props.get('highway') in ('bus_stop', 'ford', 'mini_roundabout', 'motorway_junction', 'platform', 'rest_area', 'traffic_signals', 'trailhead') or props.get('historic') == 'landmark' or props.get('landuse') == 'quarry' or props.get('leisure') in ('dog_park', 'firepit', 'fishing', 'pitch', 'slipway', 'swimming_area') or 'lock' in props or props.get('man_made') in ('adit', 'communications_tower', 'mast', 'mineshaft', 'observatory', 'offshore_platform', 'petroleum_well', 'power_wind', 'telescope', 'water_tower', 'water_well', 'windmill') or props.get('natural') in ('cave_entrance', 'peak', 'volcano', 'geyser', 'hot_spring', 'rock', 'saddle', 'stone', 'spring', 'tree', 'waterfall') or props.get('power') in ('pole', 'tower') or props.get('public_transport') in ('platform', 'stop_area') or props.get('railway') in ('halt', 'level_crossing', 'platform', 'stop', 'subway_entrance', 'tram_stop') or 'icn_ref' in props or 'iwn_ref' in props or 'lcn_ref' in props or 'lwn_ref' in props or 'ncn_ref' in props or 'nwn_ref' in props or 'rcn_ref' in props or 'rwn_ref' in props or props.get('whitewater') in ('egress', 'hazard', 'put_in', 'put_in;egress', 'rapid') or props.get('tourism') in ('alpine_hut', 'information', 'picnic_site', 'viewpoint', 'wilderness_hut') or props.get('waterway') in ('dam', 'lock', 'waterfall')):
        return {'kind':None}
    if props.get('man_made') == 'windmill':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'windmill', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'lighthouse':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'lighthouse', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'observatory':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'observatory', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('park:type') == 'state_recreational_area' and (props.get('landuse') == 'park' or props.get('leisure') == 'park'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'national_park' and (props.get('protect_class') == '6' or props.get('designation') == 'area_of_outstanding_natural_beauty'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and (props.get('boundary:type') == 'protected_area' or props.get('boundary') == 'protected_area') and props.get('leisure') == 'nature_reserve' and props.get('protect_class') in ('4', '5'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'nature_reserve', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('historic') == 'battlefield':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':1, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'battlefield', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'national_park' and (props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service') or not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('protect_class') in ('2', '3', '5') or props.get('operator:en') == 'Parks Canada' or props.get('designation') == 'national_park' or props.get('protection_title') == 'National Park'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':1, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'national_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park' and props.get('protect_class') in ('2', '3', '5'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'national_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'national_park' or props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'forest' and props.get('protect_class') == '6':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'forest':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'forest':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'forest', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'nature_reserve':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'nature_reserve', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('boundary') == 'protected_area':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'protected_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'wood':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'wood', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'wood':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'wood', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'farm':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':2, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'farm', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('aeroway') in ('aerodrome', 'airport'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':3, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('aeroway'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'military':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':3, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'military', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'university':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':3, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'university', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'college':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':3, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'college', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'cemetery':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'cemetery', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('power') == 'generator':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'generator', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'golf_course':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'golf_course', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'hospital':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'hospital', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('power') == 'plant':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'plant', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'recreation_ground':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'recreation_ground', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'sports_centre':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':None if props.get('sport') in ('fitness', 'gym') else props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fitness' if props.get('sport') in ('fitness', 'gym') else 'sports_centre', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'stadium':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'stadium', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('power') == 'substation':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'substation', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'wastewater_plant':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'wastewater_plant', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'works':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'works', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'water_works':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'water_works', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('zoo') == 'wildlife_park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'wildlife_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'winter_sports':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'winter_sports', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'zoo':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':4, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'zoo', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'aquarium':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'aquarium', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'beach':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'beach', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('attraction') in ('animal', 'water_slide', 'roller_coaster', 'summer_toboggan', 'carousel', 'amusement_ride', 'maze'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('attraction'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'resort':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'resort', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') in ('theme_park', 'Theme Park'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'theme_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'winery':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':5, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'winery', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') in ('artwork', 'hanami', 'trail_riding_station'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('tourism'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if not props.get('access') in ('private', 'no') and props.get('leisure') == 'garden':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'garden', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'pitch':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'pitch', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'kind_detail':props.get('sport'), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'place_of_worship':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'place_of_worship', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'playground':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'playground', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'school':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'school', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'wilderness_hut':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'wilderness_hut', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'parking':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'parking', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'battlefield':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'battlefield', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') in ('peak', 'volcano'):
        return {'elevation':props.get('ele'), 'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('natural'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('railway') == 'station' and (props.get('historic') == 'no' or props.get('historic') is None):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'station', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'state':props.get('state'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'spring':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'spring', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('railway') == 'level_crossing':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'level_crossing', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('bank', 'cinema', 'courthouse', 'embassy', 'fire_station', 'fuel', 'library', 'police', 'post_office', 'theatre'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('biergarten', 'pub', 'bar', 'restaurant', 'fast_food', 'cafe'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'kind_detail':props.get('cuisine'), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('pharmacy', 'veterinary'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('craft') in ('brewery', 'carpenter', 'confectionery', 'dressmaker', 'electrician', 'gardener', 'handicraft', 'hvac', 'metal_construction', 'painter', 'photographer', 'photographic_laboratory', 'plumber', 'pottery', 'sawmill', 'shoemaker', 'stonemason', 'tailor', 'winery'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('craft'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'nursing_home':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'nursing_home', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'music':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'music', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'community_centre':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'community_centre', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'sports':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'sports', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'fishing':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fishing', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'hunting':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'hunting', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'outdoor':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'outdoor', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'dive_centre':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'dive_centre', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'scuba_diving':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'scuba_diving', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'motorcycle':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'motorcycle', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'mall':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'mall', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'prison':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'prison', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'museum':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'museum', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'landmark':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'landmark', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'marina':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'marina', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'townhall':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'townhall', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') in ('laundry', 'dry_cleaning', 'toys', 'ice_cream', 'wine', 'alcohol'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('shop'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'ice_cream':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ice_cream', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'ferry_terminal':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ferry_terminal', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'electronics':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'electronics', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') in ('department_store', 'supermarket', 'doityourself', 'hardware', 'trade'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('shop'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('rental') == 'ski' or props.get('amenity') == 'ski_rental':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ski_rental', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'ski':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ski', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'ski_school':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ski_school', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'snow_cannon':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'snow_cannon', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'gym' or props.get('leisure') in ('fitness_centre', 'gym'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fitness', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'fitness_station':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fitness_station', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'beach_resort':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'beach_resort', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') in ('hotel', 'motel'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('tourism'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'motorway_junction':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'motorway_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'monument':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'monument', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('zoo') in ('enclosure', 'petting_zoo', 'aviary'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('zoo'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('waterway') == 'waterfall' or props.get('natural') == 'waterfall':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'height':props.get('height'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'waterfall', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'geyser':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'geyser', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'hot_spring':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'hot_spring', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'fort':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fort', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'gallery':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'gallery', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('social_facility', 'clinic', 'doctors', 'dentist'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('healthcare') == 'midwife':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'midwife', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('kindergarten', 'childcare'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'boat_rental' or props.get('rental') == 'boat' or props.get('amenity') == 'boat_rental' or props.get('shop') == 'boat' and props.get('rental') == 'yes':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'boat_rental', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('emergency') == 'phone':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'phone', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'toilets':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'toilets', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('barrier') == 'gate':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'gate', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('barrier') == 'toll_booth':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'toll_booth', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'mini_roundabout':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'mini_roundabout', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('lock') == 'yes':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'lock', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'power_wind':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'power_wind', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'cave_entrance':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'cave_entrance', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('waterway') == 'lock':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'lock', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('aerialway') == 'station':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'station', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'state':props.get('state'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('railway') in ('halt', 'stop', 'tram_stop') and (props.get('historic') == 'no' or props.get('historic') is None):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('railway'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('railway') == 'platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'platform', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bus_stop', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('rail') == 'yes' and props.get('public_transport') == 'platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'platform', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'platform' and props.get('light_rail') == 'yes':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'platform', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('bus') == 'yes' and props.get('public_transport') == 'platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bus_stop', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'platform', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'stop_area':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'stop_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('site') == 'stop_area':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'stop_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'alpine_hut':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'alpine_hut', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('aeroway') == 'gate':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'aeroway_gate', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('aeroway') == 'helipad':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'helipad', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('bus_station', 'car_sharing', 'recycling', 'shelter'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('barrier') in ('block', 'bollard', 'lift_gate'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('barrier'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'ford':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ford', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'archaeological_site':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'archaeological_site', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'communications_tower':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'communications_tower', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'telescope':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'telescope', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'offshore_platform':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'offshore_platform', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'water_tower':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'water_tower', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'tree':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'tree', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'ranger_station':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'ranger_station', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if 'icn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'ref':props.get('icn_ref'), 'bicycle_network':'icn', 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'zoo':props.get('zoo')}
    if 'ncn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'ref':props.get('ncn_ref'), 'bicycle_network':'ncn', 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'zoo':props.get('zoo')}
    if 'rcn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'ref':props.get('rcn_ref'), 'bicycle_network':'rcn', 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'zoo':props.get('zoo')}
    if 'lcn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'ref':props.get('lcn_ref'), 'bicycle_network':'lcn', 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'zoo':props.get('zoo')}
    if 'iwn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'walking_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('iwn_ref'), 'walking_network':'iwn'}
    if 'nwn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'walking_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('nwn_ref'), 'walking_network':'nwn'}
    if 'rwn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'walking_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('rwn_ref'), 'walking_network':'rwn'}
    if 'lwn_ref' in props:
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'walking_junction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('lwn_ref'), 'walking_network':'lwn'}
    if props.get('tourism') == 'camp_site':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'camp_site', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'viewpoint':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'viewpoint', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'information':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'information', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('atm', 'bus_stop', 'drinking_water', 'emergency_phone', 'post_box', 'telephone'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') in ('bus_stop', 'traffic_signals'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('highway'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('historic') == 'memorial':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'memorial', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'slipway':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'slipway', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'mast':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'mast', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('office') in ('accountant', 'administrative', 'advertising_agency', 'architect', 'association', 'company', 'consulting', 'educational_institution', 'employment_agency', 'estate_agent', 'financial', 'foundation', 'government', 'insurance', 'it', 'lawyer', 'newspaper', 'ngo', 'notary', 'physician', 'political_party', 'religion', 'research', 'tax_advisor', 'telecommunication', 'therapist', 'travel_agent'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('office'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('office') == 'yes':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'office', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'bicycle':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('operator') is None and props.get('amenity') == 'bicycle_rental':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_rental', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if 'operator' in props and props.get('amenity') == 'bicycle_rental':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'protect_class':props.get('protect_class'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_rental_station', 'exit_to':props.get('exit_to'), 'capacity':props.get('capacity'), 'network':props.get('network'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'bicycle_parking':
        return {'maxstay':props.get('maxstay'), 'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'cyclestreets_id':props.get('cyclestreets_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'attraction':props.get('attraction'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'protect_class':props.get('protect_class'), 'kind':'bicycle_parking', 'exit_to':props.get('exit_to'), 'capacity':props.get('capacity'), 'name':props.get('name'), 'ref':props.get('ref'), 'area':util.safe_int(props.get('area')), 'fee':True if not props.get('fee') in ('no', 'Free', 'free', '0', 'No', 'none') and 'fee' in props else False, 'surveillance':True if not props.get('surveillance') in ('no', 'none') and 'surveillance' in props else None, 'access':props.get('access'), 'religion':props.get('religion'), 'source':props.get('source'), 'covered':True if props.get('covered') == 'yes' else None, 'zoo':props.get('zoo')}
    if props.get('barrier') == 'cycle_barrier':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'cycle_barrier', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') in ('bakery', 'books', 'butcher', 'car', 'car_repair', 'clothes', 'computer', 'convenience', 'fashion', 'florist', 'gift', 'greengrocer', 'hairdresser', 'jewelry', 'mobile_phone', 'optician', 'pet'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('shop'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') in ('bed_and_breakfast', 'chalet', 'guest_house', 'hostel'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('tourism'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('railway') == 'subway_entrance':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'subway_entrance', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') in ('bench', 'waste_basket'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('amenity'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') in ('beacon', 'cross', 'mineshaft'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('man_made'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'adit':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'adit', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'water_well':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'water_well', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') == 'saddle':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'saddle', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') in ('dune', 'sinkhole'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('natural'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('natural') in ('rock', 'stone'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('natural'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'trailhead':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'trailhead', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('whitewater') == 'put_in;egress':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'put_in_egress', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('whitewater') in ('put_in', 'egress'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('whitewater'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('whitewater') in ('hazard', 'rapid'):
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':props.get('whitewater'), 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('shop') == 'gas':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'gas_canister', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('aerialway') == 'pylon':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'pylon', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'bbq':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bbq', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'bicycle_repair_station':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'bicycle_repair_station', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'life_ring':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'life_ring', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'picnic_table':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'picnic_table', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'shower':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'shower', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'waste_disposal':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'waste_disposal', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'watering_place':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'watering_place', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'water_point':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'water_point', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('emergency') == 'lifeguard_tower':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'lifeguard_tower', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('power') == 'pole':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'power_pole', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('power') == 'tower':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'power_tower', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('man_made') == 'petroleum_well':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'petroleum_well', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'water_park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'water_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'summer_camp':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'summer_camp', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'boat_storage':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'boat_storage', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('waterway') == 'dam':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'dam', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'dog_park':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'dog_park', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'track':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'recreation_track', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'fishing':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'fishing_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'swimming_area':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'swimming_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('leisure') == 'firepit':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'firepit', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'caravan_site':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'caravan_site', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'picnic_site':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'picnic_site', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'services':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'service_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('highway') == 'rest_area':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'rest_area', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('amenity') == 'grave_yard':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'grave_yard', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('landuse') == 'quarry':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'quarry', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}
    if props.get('tourism') == 'attraction':
        return {'mz_transit_root_relation_id':props.get('mz_transit_root_relation_id'), 'tram_routes':props.get('tram_routes'), 'subway_routes':props.get('subway_routes'), 'tier':6, 'min_zoom':props.get('min_zoom'), 'train_routes':props.get('train_routes'), 'mz_transit_score':props.get('mz_transit_score'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'light_rail_routes':props.get('light_rail_routes'), 'name':props.get('name'), 'kind':'attraction', 'exit_to':props.get('exit_to'), 'protect_class':props.get('protect_class'), 'area':util.safe_int(props.get('area')), 'zoo':props.get('zoo'), 'attraction':props.get('attraction'), 'source':props.get('source'), 'religion':props.get('religion'), 'ref':props.get('ref')}

def transit_props(shape,props,fid,meta):
    if props.get('route') == 'train' and props.get('service') in ('high_speed', 'long_distance', 'international'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':props.get('route'), 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('route') == 'train':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'train', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('route') == 'subway':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'subway', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('route') in ('light_rail', 'tram'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':props.get('route'), 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('route') in ('funicular', 'monorail'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':props.get('route'), 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('railway') in ('halt', 'stop', 'tram_stop'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':props.get('railway'), 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('highway') == 'platform':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'bus_stop', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('rail') == 'yes' and props.get('public_transport') == 'platform':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'platform', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'platform' and props.get('light_rail') == 'yes':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'platform', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('bus') == 'yes' and props.get('public_transport') == 'platform':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'bus_stop', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'platform':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'platform', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('public_transport') == 'stop_area':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'stop_area', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('railway') in ('platform', 'station'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':props.get('railway'), 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('site') == 'stop_area':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'stop_area', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}
    if props.get('highway') == 'bus_stop':
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'bus_stop', 'network':props.get('network'), 'service':props.get('service'), 'roundtrip':props.get('roundtrip'), 'type':props.get('type'), 'colour':props.get('colour'), 'route_name':props.get('route_name'), 'name':props.get('name'), 'source':props.get('source'), 'state':props.get('state'), 'ref':props.get('ref')}

def water_props(shape,props,fid,meta):
    if props.get('waterway') == 'riverbank':
        return {'label_placement':props.get('label_placement'), 'kind':'riverbank', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'dock':
        return {'label_placement':props.get('label_placement'), 'kind':'dock', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('natural') == 'water':
        return {'label_placement':props.get('label_placement'), 'kind':'water', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('natural') == 'bay':
        return {'label_placement':props.get('label_placement'), 'kind':'bay', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('natural') == 'strait':
        return {'label_placement':props.get('label_placement'), 'kind':'strait', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('natural') == 'fjord':
        return {'label_placement':props.get('label_placement'), 'kind':'fjord', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('landuse') == 'basin':
        return {'label_placement':props.get('label_placement'), 'kind':'basin', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('landuse') == 'reservoir':
        return {'label_placement':props.get('label_placement'), 'kind':'lake', 'name':props.get('name'), 'reservoir':True, 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('amenity') == 'swimming_pool' or props.get('leisure') == 'swimming_pool':
        return {'label_placement':props.get('label_placement'), 'kind':'swimming_pool', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'canal':
        return {'label_placement':props.get('label_placement'), 'kind':'canal', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'river':
        return {'label_placement':props.get('label_placement'), 'kind':'river', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'stream':
        return {'label_placement':props.get('label_placement'), 'kind':'stream', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'ditch':
        return {'label_placement':props.get('label_placement'), 'kind':'ditch', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('waterway') == 'drain':
        return {'label_placement':props.get('label_placement'), 'kind':'drain', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'intermittent':True if props.get('intermittent') == 'yes' else None, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Coastline':
        return {'label_placement':props.get('label_placement'), 'kind':'ocean', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Alkaline Lake':
        return {'label_placement':props.get('label_placement'), 'kind':'lake', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'alkaline':True, 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Lake':
        return {'label_placement':props.get('label_placement'), 'kind':'lake', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Reservoir':
        return {'label_placement':props.get('label_placement'), 'kind':'lake', 'name':props.get('name'), 'reservoir':True, 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Playa':
        return {'label_placement':props.get('label_placement'), 'kind':'playa', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('featurecla') == 'Ocean':
        return {'label_placement':props.get('label_placement'), 'kind':'ocean', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('place') == 'ocean' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'ocean', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if props.get('place') == 'sea' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'sea', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}
    if meta.source == 'shp':
        return {'label_placement':props.get('label_placement'), 'kind':'ocean', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'tunnel':props.get('tunnel'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'mz_label_placement':props.get('mz_label_placement'), 'boundary':props.get('boundary')}

def places_props(shape,props,fid,meta):
    if meta.source == 'wof':
        return {'admin_level':props.get('admin_level'), 'kind':props.get('placetype'), 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'country' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'country', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'state' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'region', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'state', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'province' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'region', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'province', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') in ('city', 'town') and 'name' in props and 'population' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':props.get('place'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') in ('city', 'town') and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':props.get('place'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'village' and 'name' in props and 'population' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'village', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'village' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'village', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'hamlet' and 'name' in props and 'population' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'hamlet', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') in ('locality', 'hamlet') and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':props.get('place'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'isolated_dwelling' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'isolated_dwelling', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('place') == 'farm' and 'name' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'farm', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('featurecla') in ('Admin-0 region capital', 'Admin-0 capital alt', 'Admin-0 capital') and 'scalerank' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'country_capital':True, 'population':props.get('population')}
    if props.get('featurecla') in ('Admin-1 capital', 'Admin-1 region capital') and 'scalerank' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':True, 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('featurecla') == 'Populated place' and 'scalerank' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('featurecla') in ('Historic place',) and 'scalerank' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'hamlet', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}
    if props.get('featurecla') in ('Scientific station',) and 'scalerank' in props:
        return {'admin_level':props.get('admin_level'), 'kind':'locality', 'is_landuse_aoi':util.true_or_none(props.get('is_landuse_aoi')), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'mz_n_photos':props.get('mz_n_photos'), 'region_capital':util.tag_str_to_bool(props.get('state_capital')), 'max_zoom':props.get('max_zoom'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'kind_detail':'scientific_station', 'country_capital':util.tag_str_to_bool(props.get('capital')), 'population':props.get('population')}

def boundaries_props(shape,props,fid,meta):
    if 'kind' in props:
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'min_zoom':props.get('min_zoom'), 'kind':props.get('kind'), 'name':props.get('name')}
    if props.get('boundary:type') == 'aboriginal_lands' and props.get('boundary') == 'administrative' or props.get('boundary') == 'protected_area' and props.get('protect_class') == '24' or props.get('boundary') == 'aboriginal_lands':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':props.get('admin_level') if props.get('admin_level') in ('2', '4', '6', '8') else None, 'min_zoom':props.get('min_zoom'), 'kind':'aboriginal_lands'}
    if props.get('admin_level') == '2' and props.get('boundary') == 'administrative':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'country'}
    if props.get('admin_level') == '4' and props.get('boundary') == 'administrative':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'4', 'min_zoom':props.get('min_zoom'), 'kind':'region'}
    if props.get('admin_level') == '6' and props.get('boundary') == 'administrative':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'6', 'min_zoom':props.get('min_zoom'), 'kind':'county'}
    if props.get('admin_level') == '8' and props.get('boundary') == 'administrative':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'8', 'min_zoom':props.get('min_zoom'), 'kind':'locality'}
    if props.get('featurecla') == 'Disputed (please verify)':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'disputed'}
    if props.get('featurecla') == 'Indefinite (please verify)':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'indefinite'}
    if props.get('featurecla') == 'Indeterminant frontier':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'indeterminate'}
    if props.get('featurecla') == 'International boundary (verify)':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'country'}
    if props.get('featurecla') == 'Lease limit':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'lease_limit'}
    if props.get('featurecla') == 'Line of control (please verify)':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'line_of_control'}
    if props.get('featurecla') == 'Overlay limit':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'overlay_limit'}
    if props.get('featurecla') == 'Map unit boundary':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'2', 'min_zoom':props.get('min_zoom'), 'kind':'map_unit'}
    if props.get('featurecla') == 'Admin-1 region boundary':
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'3', 'min_zoom':props.get('min_zoom'), 'kind':'macroregion'}
    if props.get('featurecla') in ('Admin-1 boundary', 'Admin-1 statistical boundary', 'Admin-1 statistical meta bounds', '1st Order Admin Lines'):
        return {'source':props.get('source'), 'maritime_boundary':props.get('maritime_boundary'), 'name':props.get('name'), 'kind_detail':'4', 'min_zoom':props.get('min_zoom'), 'kind':'region'}

def buildings_props(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    volume = util.calculate_volume(way_area, props)
    if 'building' in props and not props.get('building') == 'no' and not props.get('location') == 'underground' and (volume >= 300000 or way_area >= 1600):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_kind_detail(props.get('building')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building' in props and not props.get('building') == 'no' and (volume >= 200000 or way_area >= 100):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_kind_detail(props.get('building')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building' in props and not props.get('building') == 'no' and (volume >= 100000 or way_area >= 100):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_kind_detail(props.get('building')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building' in props and not props.get('building') == 'no' and (volume >= 50000 or way_area >= 25):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_kind_detail(props.get('building')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building' in props and not props.get('building') == 'no':
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_kind_detail(props.get('building')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building:part' in props and not props.get('building:part') == 'no' and (volume >= 100000 or way_area >= 100):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building_part', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_part_kind_detail(props.get('building:part')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building:part' in props and not props.get('building:part') == 'no' and (volume >= 50000 or way_area >= 25):
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building_part', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_part_kind_detail(props.get('building:part')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'building:part' in props and not props.get('building:part') == 'no':
        return {'label_placement':props.get('label_placement'), 'layer':props.get('layer'), 'roof_material':props.get('roof:material'), 'addr_street':props.get('addr:street'), 'roof_shape':props.get('roof:shape'), 'height':props.get('height'), 'min_height':props.get('min_height'), 'building_part':props.get('building:part'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'roof_color':props.get('roof:color'), 'roof_orientation':props.get('roof:orientation'), 'building_min_levels':props.get('building:min_levels'), 'building_levels':props.get('building:levels'), 'kind':'building_part', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'kind_detail':mz_building_part_kind_detail(props.get('building:part')), 'roof_height':props.get('roof:height'), 'source':props.get('source'), 'mz_label_placement':props.get('mz_label_placement'), 'location':props.get('location')}
    if 'addr:housenumber' in props and shape.type in ('Point', 'MultiPoint'):
        return {'label_placement':props.get('label_placement'), 'kind':'address', 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'addr_street':props.get('addr:street'), 'source':props.get('source'), 'min_zoom':props.get('min_zoom'), 'addr_housenumber':props.get('addr:housenumber'), 'mz_label_placement':props.get('mz_label_placement')}

def roads_props(shape,props,fid,meta):
    if props.get('featurecla') == 'Ferry' and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'ferry', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('featurecla') == 'Road' and props.get('expressway') == 1 and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'highway', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'kind_detail':'motorway', 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('featurecla') == 'Road' and props.get('type') in ('Major Highway', 'Beltway', 'Bypass') and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'highway', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'kind_detail':'trunk', 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('featurecla') == 'Road' and props.get('type') == 'Secondary Highway' and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'major_road', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'kind_detail':'primary', 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('featurecla') == 'Road' and props.get('type') == 'Road' and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'major_road', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'kind_detail':'secondary', 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('featurecla') == 'Road' and props.get('type') in ('Track', 'Unknown') and 'scalerank' in props:
        return {'source':props.get('source'), 'kind':'minor_road', 'mz_networks':['road', 'CA:??:primary', props.get('name')] if props.get('sov_a3') == 'CAN' and props.get('level') in ('Federal', 'Interstate', 'State') else ['road', 'MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Interstate' else ['road', 'MX:MX', props.get('name')] if props.get('sov_a3') == 'MEX' and props.get('level') == 'Federal' else ['road', 'US:I', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Interstate' else ['road', 'US:US', props.get('name')] if props.get('sov_a3') == 'USA' and props.get('level') == 'Federal' else ['road', 'NZ:SH', props.get('label')] if props.get('continent') == 'Oceania' and props.get('level') == 'Federal' else ['road', 'e-road', props.get('name')] if props.get('continent') in ('Europe', 'Asia') and props.get('level') == 'E' else None, 'kind_detail':'tertiary', 'ref':props.get('name'), 'min_zoom':max(5, props.get('scalerank')), 'is_bus_route':props.get('is_bus_route')}
    if props.get('highway') == 'motorway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'motorway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'highway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') in ('trunk', 'primary'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('highway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'secondary':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'secondary', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'motorway_link':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'motorway_link', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'highway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'tertiary':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'tertiary', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'trunk_link':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'trunk_link', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') in ('primary_link', 'secondary_link'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('highway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'tertiary_link':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'tertiary_link', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'major_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('whitewater') == 'portage_way':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'portage_way', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') in ('residential', 'unclassified', 'road'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('highway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'living_street':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'living_street', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'pedestrian':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'pedestrian', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if props.get('highway') in ('path', 'track', 'cycleway', 'bridleway'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('highway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if ('name' in props or props.get('bicycle') == 'designated' or props.get('foot') == 'designated' or props.get('horse') == 'designated' or props.get('snowmobile') == 'designated' or props.get('ski') == 'designated') and props.get('highway') == 'footway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'footway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'footway':props.get('footway'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if 'name' in props and (props.get('bicycle') == 'designated' or props.get('foot') == 'designated' or props.get('horse') == 'designated' or props.get('snowmobile') == 'designated' or props.get('ski') == 'designated') and props.get('highway') == 'steps':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'steps', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'footway':props.get('footway'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if props.get('footway') in ('sidewalk', 'crossing') and props.get('highway') == 'footway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'footway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'footway':props.get('footway'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if props.get('highway') in ('footway', 'steps'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('highway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'footway':props.get('footway'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if props.get('highway') == 'corridor':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'corridor', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if props.get('highway') == 'service' and props.get('service') == 'alley':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':'alley', 'kind_detail':'service', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'service' and props.get('service') in ('driveway', 'parking_aisle', 'drive-through'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':'drive_through' if props.get('service') == 'drive-through' else props.get('service'), 'kind_detail':'service', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'service':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'service', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('highway') == 'raceway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'descent':props.get('descent'), 'service':props.get('service'), 'kind_detail':'raceway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'segregated':True if props.get('segregated') == 'yes' else None, 'distance':props.get('distance'), 'kind':'minor_road', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('aeroway') == 'runway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'runway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'aeroway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('aeroway') == 'taxiway':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'taxiway', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'aeroway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') == 'rail' and props.get('service') in ('spur', 'siding'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'rail', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') == 'rail' and props.get('service') == 'yard':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'rail', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') == 'rail' and props.get('service') == 'crossover':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'rail', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') == 'rail' and props.get('service') in ('branch', 'connector', 'wye', 'runaway', 'interchange', 'switch', 'industrial', 'disused', 'driveway', 'passing_loop'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'rail', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'railway':props.get('railway'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') == 'rail':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'rail', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('railway') in ('tram', 'light_rail', 'narrow_gauge', 'monorail', 'subway', 'funicular'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('railway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'rail', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('route') == 'ferry':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'ferry', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('aerialway') in ('gondola', 'cable_car'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('aerialway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'aerialway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('aerialway') == 'chair_lift':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('aerialway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'aerialway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('aerialway') in ('drag_lift', 'platter', 't-bar', 'goods', 'magic_carpet', 'rope_tow', 'yes', 'zip_line', 'j-bar', 'unknown', 'mixed_lift', 'canopy', 'cableway'):
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'t_bar' if props.get('aerialway') == 't-bar' else 'j_bar' if props.get('aerialway') == 'j-bar' else None if props.get('aerialway') == 'yes' else props.get('aerialway'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'aerialway', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('sport') in ('athletics', 'running', 'horse_racing', 'bmx', 'disc_golf', 'cycling', 'ski_jumping', 'motor', 'karting', 'obstacle_course', 'equestrian', 'alpine_slide', 'soap_box_derby', 'mud_truck_racing', 'skiing', 'drag_racing', 'archery') and props.get('leisure') == 'track':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':props.get('sport'), 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'segregated':True if props.get('segregated') == 'yes' else None, 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'leisure':'track', 'motor_vehicle':props.get('motor_vehicle'), 'descent':props.get('descent'), 'distance':props.get('distance'), 'kind':'racetrack', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'name':props.get('name'), 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'colour':props.get('colour'), 'sidewalk_right':props.get('sidewalk:right'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None}
    if props.get('man_made') == 'pier':
        return {'bridge':props.get('bridge'), 'layer':props.get('layer'), 'bicycle':props.get('bicycle'), 'sac_scale':props.get('sac_scale'), 'ramp_bicycle':props.get('ramp:bicycle'), 'surface':'concrete_plates' if props.get('surface') == 'concrete:plates' else 'concrete_lanes' if props.get('surface') == 'concrete:lanes' else 'cobblestone_flattened' if props.get('surface') == 'cobblestone:flattened' else props.get('surface'), 'route_name':props.get('route_name'), 'min_zoom':props.get('min_zoom'), 'descent':props.get('descent'), 'operator':props.get('operator'), 'sport':props.get('sport'), 'ascent':props.get('ascent'), 'horse':props.get('horse'), 'trail_visibility':props.get('trail_visibility'), 'network':props.get('network'), 'service':props.get('service'), 'kind_detail':'pier', 'cycleway':props.get('cycleway') if not props.get('cycleway') in ('no', 'none') else None, 'access':props.get('access'), 'source':props.get('source'), 'state':props.get('state'), 'oneway_bicycle':props.get('oneway:bicycle'), 'type':props.get('type'), 'cycleway_right':props.get('cycleway:right') if not props.get('cycleway:right') in ('no', 'none') else None, 'description':props.get('description'), 'mz_networks':props.get('mz_networks'), 'route':props.get('route'), 'symbol':props.get('symbol'), 'sidewalk_left':props.get('sidewalk:left'), 'incline':props.get('incline'), 'motor_vehicle':props.get('motor_vehicle'), 'foot':props.get('foot'), 'name':props.get('name'), 'distance':props.get('distance'), 'kind':'path', 'cycleway_left':props.get('cycleway:left') if not props.get('cycleway:left') in ('no', 'none') else None, 'segregated':True if props.get('segregated') == 'yes' else None, 'roundtrip':props.get('roundtrip'), 'ref':props.get('ref'), 'cycleway_both':props.get('cycleway:both') if not props.get('cycleway:both') in ('no', 'none') else None, 'sidewalk_right':props.get('sidewalk:right'), 'ramp':props.get('ramp'), 'is_bus_route':props.get('is_bus_route'), 'bicycle_network':props.get('mz_cycling_network'), 'tunnel':props.get('tunnel'), 'oneway':props.get('oneway'), 'crossing':props.get('crossing') if not props.get('crossing') == 'no' else None, 'sidewalk':props.get('sidewalk'), 'tracktype':props.get('tracktype'), 'colour':props.get('colour')}
    if not props.get('piste:abandoned') == 'yes' and props.get('piste:type') in ('nordic', 'downhill', 'sleigh', 'skitour', 'hike', 'sled', 'yes', 'snow_park', 'playground', 'ski_jump') and 'piste:name' in props:
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'route_name':props.get('route_name'), 'snowshoe':props.get('snowshoe'), 'min_zoom':props.get('min_zoom'), 'type':props.get('type'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'distance':props.get('distance'), 'kind':'piste', 'descent':props.get('descent'), 'piste_difficulty':props.get('piste:difficulty'), 'tunnel':props.get('tunnel'), 'kind_detail':props.get('piste:type'), 'colour':props.get('colour'), 'is_bus_route':props.get('is_bus_route'), 'name':props.get('piste:name'), 'piste_grooming':props.get('piste:grooming'), 'roundtrip':props.get('roundtrip'), 'state':props.get('state'), 'source':props.get('source'), 'oneway':props.get('oneway'), 'piste_name':props.get('piste:name'), 'ref':props.get('ref'), 'route':props.get('route'), 'ski':props.get('ski')}
    if not props.get('piste:abandoned') == 'yes' and props.get('piste:type') in ('nordic', 'downhill', 'sleigh', 'skitour', 'hike', 'sled', 'yes', 'snow_park', 'playground', 'ski_jump'):
        return {'layer':props.get('layer'), 'description':props.get('description'), 'symbol':props.get('symbol'), 'route_name':props.get('route_name'), 'snowshoe':props.get('snowshoe'), 'min_zoom':props.get('min_zoom'), 'type':props.get('type'), 'operator':props.get('operator'), 'ascent':props.get('ascent'), 'network':props.get('network'), 'distance':props.get('distance'), 'kind':'piste', 'descent':props.get('descent'), 'piste_difficulty':props.get('piste:difficulty'), 'tunnel':props.get('tunnel'), 'kind_detail':props.get('piste:type'), 'colour':props.get('colour'), 'is_bus_route':props.get('is_bus_route'), 'name':props.get('name'), 'piste_grooming':props.get('piste:grooming'), 'roundtrip':props.get('roundtrip'), 'state':props.get('state'), 'source':props.get('source'), 'oneway':props.get('oneway'), 'piste_name':props.get('piste:name'), 'ref':props.get('ref'), 'route':props.get('route'), 'ski':props.get('ski')}

def earth_props(shape,props,fid,meta):
    if props.get('place') == 'continent' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'continent', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('place') == 'archipelago' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'archipelago', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('place') == 'island' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'island', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('place') == 'islet' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'islet', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('natural') == 'cliff':
        return {'label_placement':props.get('label_placement'), 'kind':'cliff', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('natural') == 'arete':
        return {'label_placement':props.get('label_placement'), 'kind':'arete', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('natural') == 'ridge' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'ridge', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if props.get('natural') == 'valley' and 'name' in props:
        return {'label_placement':props.get('label_placement'), 'kind':'valley', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}
    if meta.source in ('ne', 'shp'):
        return {'label_placement':props.get('label_placement'), 'kind':'earth', 'mz_label_placement':props.get('mz_label_placement'), 'name':props.get('name'), 'area':util.safe_int(props.get('area')), 'min_zoom':props.get('min_zoom'), 'source':props.get('source')}

def landuse_min_zoom(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    zoom = util.calculate_1px_zoom(way_area)
    if meta.source == 'ne':
        return 4
    if props.get('zoo') == 'enclosure':
        return max(9, min(16, zoom))
    if props.get('zoo') == 'petting_zoo':
        return max(9, min(16, zoom))
    if props.get('zoo') == 'aviary':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'animal':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'water_slide':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'roller_coaster':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'summer_toboggan':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'carousel':
        return max(9, min(16, zoom))
    if props.get('attraction') == 'amusement_ride':
        return max(9, min(16, zoom))
    if props.get('historic') == 'fort':
        return max(9, min(16, zoom))
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('park:type') == 'state_recreational_area' and (props.get('landuse') == 'park' or props.get('leisure') == 'park'):
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('boundary') == 'national_park' and (props.get('protect_class') == '6' or props.get('designation') == 'area_of_outstanding_natural_beauty'):
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and (props.get('boundary:type') == 'protected_area' or props.get('boundary') == 'protected_area') and props.get('leisure') == 'nature_reserve' and props.get('protect_class') in ('4', '5'):
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and props.get('boundary:type') == 'protected_area' and props.get('protect_class') == '5' and props.get('leisure') == 'common':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('historic') == 'battlefield':
        return 3 if way_area >= 300000000 else 4 if way_area >= 300000000 else 5 if way_area >= 150000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 10000 else 16
    if props.get('boundary') == 'national_park' and (props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service') or not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('protect_class') in ('2', '3', '5') or props.get('operator:en') == 'Parks Canada' or props.get('designation') == 'national_park' or props.get('protection_title') == 'National Park'):
        return 3 if way_area >= 300000000 else 4 if way_area >= 300000000 else 5 if way_area >= 150000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 10000 else 16
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park' and props.get('protect_class') in ('2', '3', '5'):
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('boundary') == 'national_park' or props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'forest':
        return max(6, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('landuse') == 'forest':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('leisure') == 'nature_reserve':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('boundary') == 'protected_area':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'wood':
        return max(6, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('landuse') == 'wood':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('natural') == 'forest':
        return max(6, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('natural') == 'forest':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('natural') == 'wood':
        return max(6, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('natural') == 'wood':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('landuse') == 'urban':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'rural':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'residential':
        return 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'farm':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('landuse') == 'farmland':
        return max(10, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('aeroway') == 'aerodrome':
        return 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'military':
        return 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('amenity') == 'university':
        return 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('amenity') == 'college':
        return 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('natural') == 'glacier':
        return 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'cemetery':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'commercial':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('leisure') == 'golf_course':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('amenity') == 'hospital':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'industrial':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('power') == 'plant':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('power') == 'generator':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('power') in ('substation', 'station', 'sub_station'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'railway':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('leisure') == 'sports_centre':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'recreation_ground':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'retail':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('leisure') == 'stadium':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('tourism') == 'zoo':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('zoo') == 'wildlife_park':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('landuse') == 'winter_sports':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'pier' and shape.type in ('Polygon', 'MultiPolygon'):
        return max(11, min(16, 1.81 + zoom))
    if props.get('man_made') == 'wastewater_plant':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'works':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'bridge':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'tower':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'breakwater' and shape.type in ('Polygon', 'MultiPolygon'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'water_works':
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'groyne' and shape.type in ('Polygon', 'MultiPolygon'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'dike' and shape.type in ('Polygon', 'MultiPolygon'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('man_made') == 'cutline' and shape.type in ('Polygon', 'MultiPolygon'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16
    if props.get('tourism') in ('theme_park', 'Theme Park'):
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('tourism') == 'resort':
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('tourism') == 'aquarium':
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('tourism') == 'winery':
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('attraction') == 'maze':
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('natural') == 'beach':
        return 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16
    if props.get('leisure') == 'garden':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('landuse') == 'allotments':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('highway') == 'pedestrian' and shape.type in ('Polygon', 'MultiPolygon'):
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('leisure') == 'common':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('leisure') == 'pitch':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('amenity') == 'place_of_worship':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('leisure') == 'playground':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('amenity') == 'school':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('tourism') == 'attraction':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('tourism') == 'artwork':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('tourism') == 'wilderness_hut':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('tourism') == 'hanami':
        return 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('amenity') == 'parking':
        return 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16
    if props.get('landuse') in ('park', 'national_park') or props.get('leisure') in ('park', 'national_park'):
        return max(9, min(14, 2 + zoom))
    if props.get('landuse') == 'grass':
        return max(9, min(16, zoom))
    if props.get('landuse') == 'meadow':
        return max(9, min(16, zoom))
    if props.get('landuse') == 'village_green':
        return max(9, min(16, zoom))
    if props.get('landuse') == 'quarry':
        return max(9, min(16, zoom))
    if props.get('natural') == 'land':
        return max(9, min(16, zoom))
    if props.get('natural') == 'scrub':
        return max(9, min(16, zoom))
    if props.get('natural') == 'wetland':
        return max(9, min(16, zoom))
    if props.get('natural') == 'park':
        return max(9, min(16, zoom))
    if props.get('highway') == 'footway' and shape.type in ('Polygon', 'MultiPolygon'):
        return max(9, min(16, zoom))
    if props.get('amenity') == 'library':
        return max(9, min(16, zoom))
    if props.get('amenity') == 'fuel':
        return max(9, min(16, zoom))
    if props.get('amenity') == 'cinema':
        return max(9, min(16, zoom))
    if props.get('amenity') == 'theatre':
        return max(9, min(16, zoom))
    if props.get('amenity') == 'prison':
        return max(9, min(16, zoom))
    if props.get('aeroway') == 'runway' and shape.type in ('Polygon', 'MultiPolygon'):
        return max(9, min(16, zoom))
    if props.get('aeroway') == 'taxiway' and shape.type in ('Polygon', 'MultiPolygon'):
        return max(9, min(16, zoom))
    if props.get('aeroway') == 'apron':
        return max(9, min(16, zoom))
    if props.get('tourism') == 'trail_riding_station':
        return max(9, min(16, zoom))
    if props.get('natural') == 'scree':
        return max(9, min(16, zoom))
    if props.get('leisure') == 'water_park':
        return max(9, min(16, zoom))
    if props.get('waterway') == 'dam':
        return 12 if shape.type in ('Line', 'MultiLine') else max(9, min(16, zoom)) if shape.type in ('Polygon', 'MultiPolygon') else None
    if props.get('leisure') == 'dog_park':
        return max(9, min(16, zoom))
    if props.get('leisure') == 'track':
        return max(9, min(16, zoom))
    if props.get('natural') == 'stone':
        return max(9, min(16, zoom))
    if props.get('natural') == 'rock':
        return max(9, min(16, zoom))
    if props.get('tourism') == 'caravan_site':
        return max(9, min(16, zoom))
    if props.get('tourism') == 'picnic_site':
        return max(9, min(16, zoom))
    if props.get('natural') == 'tree_row':
        return max(9, min(16, zoom))
    if props.get('barrier') == 'hedge':
        return max(9, min(16, zoom))
    if props.get('highway') == 'services':
        return max(11, min(16, zoom))
    if props.get('highway') == 'rest_area':
        return max(11, min(16, zoom))
    if props.get('historic') == 'citywalls' or props.get('barrier') == 'city_wall':
        return 12
    if props.get('man_made') == 'snow_fence':
        return 15
    if props.get('barrier') == 'retaining_wall':
        return 15
    if props.get('barrier') == 'fence':
        return 16
    if props.get('tourism') == 'camp_site':
        return max(13, min(16, zoom))
    if props.get('barrier') == 'gate':
        return 16
    if props.get('amenity') == 'grave_yard':
        return max(13, min(17, 3 + zoom))

def pois_min_zoom(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    zoom = util.calculate_1px_zoom(way_area)
    if 'disused' in props and not props.get('disused') == 'no':
        return None
    if props.get('name') is None and not (props.get('aerialway') == 'pylon' or props.get('aeroway') in ('gate', 'helipad') or props.get('amenity') in ('atm', 'bbq', 'bench', 'bicycle_parking', 'bicycle_rental', 'bicycle_repair_station', 'boat_storage', 'car_sharing', 'fuel', 'life_ring', 'parking', 'picnic_table', 'post_box', 'ranger_station', 'recycling', 'shelter', 'shower', 'telephone', 'toilets', 'waste_basket', 'waste_disposal', 'water_point', 'watering_place') or props.get('barrier') in ('cycle_barrier', 'gate', 'toll_booth') or props.get('emergency') in ('lifeguard_tower', 'phone') or props.get('highway') in ('bus_stop', 'ford', 'mini_roundabout', 'motorway_junction', 'platform', 'rest_area', 'traffic_signals', 'trailhead') or props.get('historic') == 'landmark' or props.get('landuse') == 'quarry' or props.get('leisure') in ('dog_park', 'firepit', 'fishing', 'pitch', 'slipway', 'swimming_area') or 'lock' in props or props.get('man_made') in ('adit', 'communications_tower', 'mast', 'mineshaft', 'observatory', 'offshore_platform', 'petroleum_well', 'power_wind', 'telescope', 'water_tower', 'water_well', 'windmill') or props.get('natural') in ('cave_entrance', 'peak', 'volcano', 'geyser', 'hot_spring', 'rock', 'saddle', 'stone', 'spring', 'tree', 'waterfall') or props.get('power') in ('pole', 'tower') or props.get('public_transport') in ('platform', 'stop_area') or props.get('railway') in ('halt', 'level_crossing', 'platform', 'stop', 'subway_entrance', 'tram_stop') or 'icn_ref' in props or 'iwn_ref' in props or 'lcn_ref' in props or 'lwn_ref' in props or 'ncn_ref' in props or 'nwn_ref' in props or 'rcn_ref' in props or 'rwn_ref' in props or props.get('whitewater') in ('egress', 'hazard', 'put_in', 'put_in;egress', 'rapid') or props.get('tourism') in ('alpine_hut', 'information', 'picnic_site', 'viewpoint', 'wilderness_hut') or props.get('waterway') in ('dam', 'lock', 'waterfall')):
        return None
    if props.get('man_made') == 'windmill':
        return 14 if props.get('tourism') == 'attraction' else 15
    if props.get('man_made') == 'lighthouse':
        return 14 if props.get('tourism') == 'attraction' else 15
    if props.get('man_made') == 'observatory':
        return 15
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('park:type') == 'state_recreational_area' and (props.get('landuse') == 'park' or props.get('leisure') == 'park'):
        return min(max(9, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('boundary') == 'national_park' and props.get('protect_class') == '6' and props.get('protection_title') == 'National Forest':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('boundary') == 'national_park' and (props.get('protect_class') == '6' or props.get('designation') == 'area_of_outstanding_natural_beauty'):
        return min(max(9, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if not (props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') or props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service')) and (props.get('boundary:type') == 'protected_area' or props.get('boundary') == 'protected_area') and props.get('leisure') == 'nature_reserve' and props.get('protect_class') in ('4', '5'):
        return min(max(5 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 10)
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('historic') == 'battlefield':
        return min(max(10, 4 + zoom, 3 if way_area >= 300000000 else 4 if way_area >= 300000000 else 5 if way_area >= 150000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('boundary') == 'national_park' and (props.get('operator') in ('United States National Park Service', 'National Park Service', 'US National Park Service', 'U.S. National Park Service', 'US National Park service') or not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('protect_class') in ('2', '3', '5') or props.get('operator:en') == 'Parks Canada' or props.get('designation') == 'national_park' or props.get('protection_title') == 'National Park'):
        return min(max(3.5 + zoom, 3 if way_area >= 300000000 else 4 if way_area >= 300000000 else 5 if way_area >= 150000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 10)
    if not props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('boundary') == 'national_park' and props.get('protect_class') in ('2', '3', '5'):
        return min(max(3.5 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 10)
    if props.get('boundary') == 'national_park' or props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return min(max(9, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('landuse') == 'forest' and props.get('protect_class') == '6':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'forest':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('landuse') == 'forest':
        return min(max(10, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('leisure') == 'nature_reserve':
        return min(max(5 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 10)
    if props.get('boundary') == 'protected_area':
        return min(max(7, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('operator') in ('United States Forest Service', 'US Forest Service', 'U.S. Forest Service', 'USDA Forest Service', 'United States Department of Agriculture', 'US National Forest Service', 'United State Forest Service', 'U.S. National Forest Service') and props.get('landuse') == 'wood':
        return min(max(9, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('landuse') == 'wood':
        return min(max(10, 2 + zoom, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('landuse') == 'farm':
        return max(15, 4 if way_area >= 1000000000 else 5 if way_area >= 1000000000 else 6 if way_area >= 150000000 else 7 if way_area >= 100000000 else 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 250000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('aeroway') in ('aerodrome', 'airport'):
        return min(max(4.12 + zoom, 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 13)
    if props.get('landuse') == 'military':
        return min(max(8, 2 + zoom, 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('amenity') == 'university':
        return min(max(2.55 + zoom, 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 15)
    if props.get('amenity') == 'college':
        return min(max(2.35 + zoom, 8 if way_area >= 10000000 else 9 if way_area >= 5000000 else 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 16)
    if props.get('landuse') == 'cemetery':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('power') == 'generator':
        return max(15, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16)
    if props.get('leisure') == 'golf_course':
        return min(max(12, 2 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('amenity') == 'hospital':
        return min(max(3.32 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('power') == 'plant':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('landuse') == 'recreation_ground':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('leisure') == 'sports_centre':
        return min(max(3.98 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('leisure') == 'stadium':
        return min(max(2.3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 15)
    if props.get('power') == 'substation':
        return 15
    if props.get('man_made') == 'wastewater_plant':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('man_made') == 'works':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('man_made') == 'water_works':
        return min(max(12, 3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('zoo') == 'wildlife_park':
        return 17
    if props.get('landuse') == 'winter_sports':
        return min(max(10, 1 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 13)
    if props.get('tourism') == 'zoo':
        return min(max(3 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 500000 else 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 2000 else 16), 13)
    if props.get('tourism') == 'aquarium':
        return min(max(14, 3.09 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('natural') == 'beach':
        return min(max(3.2 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16), 14)
    if props.get('attraction') in ('animal', 'water_slide', 'roller_coaster', 'summer_toboggan', 'carousel', 'amusement_ride', 'maze'):
        return 17
    if props.get('tourism') == 'resort':
        return min(max(14, 5.32 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('tourism') in ('theme_park', 'Theme Park'):
        return min(max(13, 6.32 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('tourism') == 'winery':
        return min(max(14, 2.85 + zoom, 10 if way_area >= 1000000 else 11 if way_area >= 400000 else 12 if way_area >= 200000 else 13 if way_area >= 50000 else 14 if way_area >= 20000 else 15 if way_area >= 2000 else 16), 17)
    if props.get('tourism') in ('artwork', 'hanami', 'trail_riding_station'):
        return 17
    if not props.get('access') in ('private', 'no') and props.get('leisure') == 'garden':
        return min(max(12, zoom, 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16), 16)
    if props.get('leisure') == 'pitch':
        return 16
    if props.get('amenity') == 'place_of_worship':
        return min(max(-9.55 + zoom * 2, 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16), 17)
    if props.get('leisure') == 'playground':
        return 17
    if props.get('amenity') == 'school':
        return min(max(2.3 + zoom, 12 if way_area >= 500000 else 13 if way_area >= 100000 else 14 if way_area >= 50000 else 15 if way_area >= 5000 else 16), 15)
    if props.get('tourism') == 'wilderness_hut':
        return 15
    if props.get('amenity') == 'parking':
        return 17
    if props.get('historic') == 'battlefield':
        return max(10, min(17, 4 + zoom))
    if props.get('landuse') == 'park' or props.get('leisure') == 'park':
        return max(9, min(14, 2 + zoom))
    if props.get('natural') in ('peak', 'volcano'):
        return 9 if mz_to_float_meters(props.get('ele')) >= 4000 else 10 if mz_to_float_meters(props.get('ele')) >= 3000 else 11 if mz_to_float_meters(props.get('ele')) >= 2000 else 12 if mz_to_float_meters(props.get('ele')) >= 1000 else 13
    if props.get('railway') == 'station' and (props.get('historic') == 'no' or props.get('historic') is None):
        return 10
    if props.get('natural') == 'spring':
        return 14
    if props.get('railway') == 'level_crossing':
        return 18
    if props.get('amenity') in ('bank', 'cinema', 'courthouse', 'embassy', 'fire_station', 'fuel', 'library', 'police', 'post_office', 'theatre'):
        return max(0, min(16, 2.7 + zoom))
    if props.get('amenity') in ('biergarten', 'pub', 'bar', 'restaurant', 'fast_food', 'cafe'):
        return max(0, min(17, 2.5 + zoom))
    if props.get('amenity') in ('pharmacy', 'veterinary'):
        return max(0, min(17, 3.3 + zoom))
    if props.get('craft') in ('brewery', 'carpenter', 'confectionery', 'dressmaker', 'electrician', 'gardener', 'handicraft', 'hvac', 'metal_construction', 'painter', 'photographer', 'photographic_laboratory', 'plumber', 'pottery', 'sawmill', 'shoemaker', 'stonemason', 'tailor', 'winery'):
        return max(0, min(17, 3.3 + zoom))
    if props.get('amenity') == 'nursing_home':
        return max(0, min(16, 1.25 + zoom))
    if props.get('shop') == 'music':
        return max(0, min(17, 1.27 + zoom))
    if props.get('amenity') == 'community_centre':
        return max(0, min(17, 3.98 + zoom))
    if props.get('shop') == 'sports':
        return max(0, min(17, 1.53 + zoom))
    if props.get('shop') == 'fishing':
        return 16
    if props.get('shop') == 'hunting':
        return 16
    if props.get('shop') == 'outdoor':
        return max(15, min(16, zoom))
    if props.get('amenity') == 'dive_centre':
        return 16
    if props.get('shop') == 'scuba_diving':
        return 17
    if props.get('shop') == 'motorcycle':
        return 17
    if props.get('shop') == 'mall':
        return max(0, min(17, 2.77 + zoom))
    if props.get('amenity') == 'prison':
        return max(0, min(15, 2.55 + zoom))
    if props.get('tourism') == 'museum':
        return max(0, min(16, 1.43 + zoom))
    if props.get('historic') == 'landmark':
        return max(0, min(15, 1.76 + zoom))
    if props.get('leisure') == 'marina':
        return max(0, min(17, 3.45 + zoom))
    if props.get('amenity') == 'townhall':
        return max(0, min(16, 1.85 + zoom))
    if props.get('shop') in ('laundry', 'dry_cleaning', 'toys', 'ice_cream', 'wine', 'alcohol'):
        return max(0, min(17, 4.9 + zoom))
    if props.get('amenity') == 'ice_cream':
        return max(0, min(17, 4.9 + zoom))
    if props.get('amenity') == 'ferry_terminal':
        return max(0, min(15, 3.2 + zoom))
    if props.get('shop') == 'electronics':
        return max(0, min(17, 3.3 + zoom))
    if props.get('shop') in ('department_store', 'supermarket', 'doityourself', 'hardware', 'trade'):
        return max(0, min(17, 3.29 + zoom))
    if props.get('rental') == 'ski' or props.get('amenity') == 'ski_rental':
        return max(0, min(17, 1.27 + zoom))
    if props.get('shop') == 'ski':
        return max(0, min(17, 1.27 + zoom))
    if props.get('amenity') == 'ski_school':
        return max(0, min(15, 2.3 + zoom))
    if props.get('man_made') == 'snow_cannon':
        return max(0, min(18, 4.9 + zoom))
    if props.get('amenity') == 'gym' or props.get('leisure') in ('fitness_centre', 'gym'):
        return max(0, min(17, 3.98 + zoom))
    if props.get('leisure') == 'fitness_station':
        return max(0, min(17, 3.98 + zoom))
    if props.get('leisure') == 'beach_resort':
        return max(14, min(16, 0.5 + zoom))
    if props.get('tourism') in ('hotel', 'motel'):
        return max(0, min(17, 4.3 + zoom))
    if props.get('highway') == 'motorway_junction':
        return 12
    if props.get('historic') == 'monument':
        return max(15, min(17, 2.24 + zoom))
    if props.get('zoo') in ('enclosure', 'petting_zoo', 'aviary'):
        return 17
    if props.get('waterway') == 'waterfall' or props.get('natural') == 'waterfall':
        return 12 if mz_to_float_meters(props.get('height')) >= 300 else 13 if mz_to_float_meters(props.get('height')) >= 50 else 14 if mz_to_float_meters(props.get('height')) >= 10 else 15 if mz_to_float_meters(props.get('height')) >= 1 else max(12, min(14, 1.066 + zoom))
    if props.get('natural') == 'geyser':
        return 15
    if props.get('natural') == 'hot_spring':
        return 16
    if props.get('historic') == 'fort':
        return max(13, min(16, 2.5 + zoom))
    if props.get('tourism') == 'gallery':
        return max(15, min(17, 1.43 + zoom))
    if props.get('amenity') in ('social_facility', 'clinic', 'doctors', 'dentist'):
        return 17
    if props.get('healthcare') == 'midwife':
        return 17
    if props.get('amenity') in ('kindergarten', 'childcare'):
        return 17
    if props.get('shop') == 'boat_rental' or props.get('rental') == 'boat' or props.get('amenity') == 'boat_rental' or props.get('shop') == 'boat' and props.get('rental') == 'yes':
        return 16
    if props.get('emergency') == 'phone':
        return 18
    if props.get('amenity') == 'toilets':
        return 18
    if props.get('barrier') == 'gate':
        return mz_get_min_zoom_highway_level_gate(fid)
    if props.get('barrier') == 'toll_booth':
        return 15
    if props.get('highway') == 'mini_roundabout':
        return 15
    if props.get('lock') == 'yes':
        return 15
    if props.get('man_made') == 'power_wind':
        return 15
    if props.get('natural') == 'cave_entrance':
        return 15
    if props.get('waterway') == 'lock':
        return 15
    if props.get('aerialway') == 'station':
        return 13
    if props.get('railway') in ('halt', 'stop', 'tram_stop') and (props.get('historic') == 'no' or props.get('historic') is None):
        return 13
    if props.get('railway') == 'platform':
        return 15
    if props.get('highway') == 'platform':
        return 17
    if props.get('rail') == 'yes' and props.get('public_transport') == 'platform':
        return 15
    if props.get('public_transport') == 'platform' and props.get('light_rail') == 'yes':
        return 15
    if props.get('bus') == 'yes' and props.get('public_transport') == 'platform':
        return 17
    if props.get('public_transport') == 'platform':
        return 15
    if props.get('public_transport') == 'stop_area':
        return 15
    if props.get('site') == 'stop_area':
        return 15
    if props.get('tourism') == 'alpine_hut':
        return 15
    if props.get('aeroway') == 'gate':
        return 16
    if props.get('aeroway') == 'helipad':
        return 16
    if props.get('amenity') in ('bus_station', 'car_sharing', 'recycling', 'shelter'):
        return 16
    if props.get('barrier') in ('block', 'bollard', 'lift_gate'):
        return 16
    if props.get('highway') == 'ford':
        return 16
    if props.get('historic') == 'archaeological_site':
        return 16
    if props.get('man_made') == 'communications_tower':
        return 15
    if props.get('man_made') == 'telescope':
        return max(15, min(16, 0.1 + zoom))
    if props.get('man_made') == 'offshore_platform':
        return 13
    if props.get('man_made') == 'water_tower':
        return 15
    if props.get('natural') == 'tree':
        return 16
    if props.get('amenity') == 'ranger_station':
        return 14
    if 'icn_ref' in props:
        return 16
    if 'ncn_ref' in props:
        return 16
    if 'rcn_ref' in props:
        return 16
    if 'lcn_ref' in props:
        return 16
    if 'iwn_ref' in props:
        return 16
    if 'nwn_ref' in props:
        return 16
    if 'rwn_ref' in props:
        return 16
    if 'lwn_ref' in props:
        return 16
    if props.get('tourism') == 'camp_site':
        return max(13, min(16, 4.9 + zoom))
    if props.get('tourism') == 'viewpoint':
        return 15
    if props.get('tourism') == 'information':
        return 16
    if props.get('amenity') in ('atm', 'bus_stop', 'drinking_water', 'emergency_phone', 'post_box', 'telephone'):
        return 17
    if props.get('highway') in ('bus_stop', 'traffic_signals'):
        return 17
    if props.get('historic') == 'memorial':
        return 17
    if props.get('leisure') == 'slipway':
        return 17
    if props.get('man_made') == 'mast':
        return 17
    if props.get('office') in ('accountant', 'administrative', 'advertising_agency', 'architect', 'association', 'company', 'consulting', 'educational_institution', 'employment_agency', 'estate_agent', 'financial', 'foundation', 'government', 'insurance', 'it', 'lawyer', 'newspaper', 'ngo', 'notary', 'physician', 'political_party', 'religion', 'research', 'tax_advisor', 'telecommunication', 'therapist', 'travel_agent'):
        return 17
    if props.get('office') == 'yes':
        return 17
    if props.get('shop') == 'bicycle':
        return 15
    if props.get('operator') is None and props.get('amenity') == 'bicycle_rental':
        return 16
    if 'operator' in props and props.get('amenity') == 'bicycle_rental':
        return 17
    if props.get('amenity') == 'bicycle_parking':
        return 17
    if props.get('barrier') == 'cycle_barrier':
        return 18
    if props.get('shop') in ('bakery', 'books', 'butcher', 'car', 'car_repair', 'clothes', 'computer', 'convenience', 'fashion', 'florist', 'gift', 'greengrocer', 'hairdresser', 'jewelry', 'mobile_phone', 'optician', 'pet'):
        return 17
    if props.get('tourism') in ('bed_and_breakfast', 'chalet', 'guest_house', 'hostel'):
        return 17
    if props.get('railway') == 'subway_entrance':
        return 17
    if props.get('amenity') in ('bench', 'waste_basket'):
        return 18
    if props.get('man_made') in ('beacon', 'cross', 'mineshaft'):
        return 15
    if props.get('man_made') == 'adit':
        return 16
    if props.get('man_made') == 'water_well':
        return 17
    if props.get('natural') == 'saddle':
        return 14
    if props.get('natural') in ('dune', 'sinkhole'):
        return 15
    if props.get('natural') in ('rock', 'stone'):
        return 17
    if props.get('highway') == 'trailhead':
        return 15
    if props.get('whitewater') == 'put_in;egress':
        return 14
    if props.get('whitewater') in ('put_in', 'egress'):
        return 14
    if props.get('whitewater') in ('hazard', 'rapid'):
        return 15
    if props.get('shop') == 'gas':
        return 18
    if props.get('aerialway') == 'pylon':
        return 17
    if props.get('amenity') == 'bbq':
        return 18
    if props.get('amenity') == 'bicycle_repair_station':
        return 18
    if props.get('amenity') == 'life_ring':
        return 18
    if props.get('amenity') == 'picnic_table':
        return 18
    if props.get('amenity') == 'shower':
        return 18
    if props.get('amenity') == 'waste_disposal':
        return 18
    if props.get('amenity') == 'watering_place':
        return 18
    if props.get('amenity') == 'water_point':
        return 18
    if props.get('emergency') == 'lifeguard_tower':
        return 17
    if props.get('power') == 'pole':
        return 18
    if props.get('power') == 'tower':
        return 16
    if props.get('man_made') == 'petroleum_well':
        return 17
    if props.get('leisure') == 'water_park':
        return max(13, min(15, 2.34 + zoom))
    if props.get('leisure') == 'summer_camp':
        return max(14, min(15, 1.32 + zoom))
    if props.get('amenity') == 'boat_storage':
        return 17
    if props.get('waterway') == 'dam':
        return max(12, min(14, 1 + zoom))
    if props.get('leisure') == 'dog_park':
        return max(16, min(17, 1 + zoom))
    if props.get('leisure') == 'track':
        return max(16, min(17, 1 + zoom))
    if props.get('leisure') == 'fishing':
        return max(16, min(17, 1.76 + zoom))
    if props.get('leisure') == 'swimming_area':
        return 16
    if props.get('leisure') == 'firepit':
        return 18
    if props.get('tourism') == 'caravan_site':
        return max(14, min(15, zoom))
    if props.get('tourism') == 'picnic_site':
        return 16
    if props.get('highway') == 'services':
        return 11
    if props.get('highway') == 'rest_area':
        return 11
    if props.get('amenity') == 'grave_yard':
        return max(13, min(17, 3 + zoom))
    if props.get('landuse') == 'quarry':
        return max(12, min(14, 3 + zoom))
    if props.get('tourism') == 'attraction':
        return 17

def transit_min_zoom(shape,props,fid,meta):
    if props.get('route') == 'train' and props.get('service') in ('high_speed', 'long_distance', 'international'):
        return 5
    if props.get('route') == 'train':
        return 6
    if props.get('route') == 'subway':
        return 8
    if props.get('route') in ('light_rail', 'tram'):
        return 9
    if props.get('route') in ('funicular', 'monorail'):
        return 12
    if props.get('railway') in ('halt', 'stop', 'tram_stop'):
        return 13
    if props.get('highway') == 'platform':
        return 17
    if props.get('rail') == 'yes' and props.get('public_transport') == 'platform':
        return 15
    if props.get('public_transport') == 'platform' and props.get('light_rail') == 'yes':
        return 15
    if props.get('bus') == 'yes' and props.get('public_transport') == 'platform':
        return 17
    if props.get('public_transport') == 'platform':
        return 15
    if props.get('public_transport') == 'stop_area':
        return 15
    if props.get('railway') in ('platform', 'station'):
        return 15
    if props.get('site') == 'stop_area':
        return 15
    if props.get('highway') == 'bus_stop':
        return 17

def water_min_zoom(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    zoom = util.calculate_1px_zoom(way_area)
    if props.get('waterway') == 'riverbank':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('waterway') == 'dock':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('natural') == 'water':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('natural') == 'bay':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('natural') == 'strait':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('natural') == 'fjord':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('landuse') == 'basin':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('landuse') == 'reservoir':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('amenity') == 'swimming_pool' or props.get('leisure') == 'swimming_pool':
        return min(9, max(0, min(16, 1.066 + zoom))) if way_area >= 102400 else max(0, min(16, 1.066 + zoom))
    if props.get('waterway') == 'canal':
        return 9
    if props.get('waterway') == 'river':
        return 9
    if props.get('waterway') == 'stream':
        return 11
    if props.get('waterway') == 'ditch':
        return 16
    if props.get('waterway') == 'drain':
        return 16
    if props.get('featurecla') == 'Coastline':
        return 0
    if props.get('featurecla') == 'Alkaline Lake':
        return 0
    if props.get('featurecla') == 'Lake':
        return 0
    if props.get('featurecla') == 'Reservoir':
        return 0
    if props.get('featurecla') == 'Playa':
        return 0
    if props.get('featurecla') == 'Ocean':
        return 0
    if props.get('place') == 'ocean' and 'name' in props:
        return 0
    if props.get('place') == 'sea' and 'name' in props:
        return 3
    if meta.source == 'shp':
        return 0

def places_min_zoom(shape,props,fid,meta):
    if meta.source == 'wof':
        return props.get('min_zoom')
    if props.get('place') == 'country' and 'name' in props:
        return 2
    if props.get('place') == 'state' and 'name' in props:
        return 4
    if props.get('place') == 'province' and 'name' in props:
        return 4
    if props.get('place') in ('city', 'town') and 'name' in props and 'population' in props:
        return 8
    if props.get('place') in ('city', 'town') and 'name' in props:
        return 9
    if props.get('place') == 'village' and 'name' in props and 'population' in props:
        return 11
    if props.get('place') == 'village' and 'name' in props:
        return 12
    if props.get('place') == 'hamlet' and 'name' in props and 'population' in props:
        return 12
    if props.get('place') in ('locality', 'hamlet') and 'name' in props:
        return 13
    if props.get('place') == 'isolated_dwelling' and 'name' in props:
        return 13
    if props.get('place') == 'farm' and 'name' in props:
        return 13
    if props.get('featurecla') in ('Admin-0 region capital', 'Admin-0 capital alt', 'Admin-0 capital') and 'scalerank' in props:
        return 2 if props.get('scalerank') <= 0 else 3 if props.get('scalerank') <= 1 else 4 if props.get('scalerank') <= 2 else 5 if props.get('scalerank') <= 4 else 6 if props.get('scalerank') <= 6 else 7 if props.get('scalerank') <= 7 else 9 if props.get('scalerank') <= 9 else 10
    if props.get('featurecla') in ('Admin-1 capital', 'Admin-1 region capital') and 'scalerank' in props:
        return 2 if props.get('scalerank') <= 0 else 3 if props.get('scalerank') <= 1 else 4 if props.get('scalerank') <= 2 else 5 if props.get('scalerank') <= 4 else 6 if props.get('scalerank') <= 6 else 7 if props.get('scalerank') <= 7 else 9 if props.get('scalerank') <= 9 else 10
    if props.get('featurecla') == 'Populated place' and 'scalerank' in props:
        return 2 if props.get('scalerank') <= 0 else 3 if props.get('scalerank') <= 1 else 4 if props.get('scalerank') <= 2 else 5 if props.get('scalerank') <= 4 else 6 if props.get('scalerank') <= 6 else 7 if props.get('scalerank') <= 7 else 9 if props.get('scalerank') <= 9 else 10
    if props.get('featurecla') in ('Historic place',) and 'scalerank' in props:
        return 2 if props.get('scalerank') <= 0 else 3 if props.get('scalerank') <= 1 else 4 if props.get('scalerank') <= 2 else 5 if props.get('scalerank') <= 4 else 6 if props.get('scalerank') <= 6 else 7 if props.get('scalerank') <= 7 else 9 if props.get('scalerank') <= 9 else 10
    if props.get('featurecla') in ('Scientific station',) and 'scalerank' in props:
        return 2 if props.get('scalerank') <= 0 else 3 if props.get('scalerank') <= 1 else 4 if props.get('scalerank') <= 2 else 5 if props.get('scalerank') <= 4 else 6 if props.get('scalerank') <= 6 else 7 if props.get('scalerank') <= 7 else 9 if props.get('scalerank') <= 9 else 10

def boundaries_min_zoom(shape,props,fid,meta):
    if 'kind' in props:
        return 8
    if props.get('boundary:type') == 'aboriginal_lands' and props.get('boundary') == 'administrative' or props.get('boundary') == 'protected_area' and props.get('protect_class') == '24' or props.get('boundary') == 'aboriginal_lands':
        return 8
    if props.get('admin_level') == '2' and props.get('boundary') == 'administrative':
        return 8
    if props.get('admin_level') == '4' and props.get('boundary') == 'administrative':
        return 8
    if props.get('admin_level') == '6' and props.get('boundary') == 'administrative':
        return 10
    if props.get('admin_level') == '8' and props.get('boundary') == 'administrative':
        return 10
    if props.get('featurecla') == 'Disputed (please verify)':
        return 0
    if props.get('featurecla') == 'Indefinite (please verify)':
        return 0
    if props.get('featurecla') == 'Indeterminant frontier':
        return 0
    if props.get('featurecla') == 'International boundary (verify)':
        return 0
    if props.get('featurecla') == 'Lease limit':
        return 0
    if props.get('featurecla') == 'Line of control (please verify)':
        return 0
    if props.get('featurecla') == 'Overlay limit':
        return 0
    if props.get('featurecla') == 'Map unit boundary':
        return 5
    if props.get('featurecla') == 'Admin-1 region boundary':
        return 7 if props.get('scalerank') <= 0 else 2 if props.get('scalerank') <= 2 else 3 if props.get('scalerank') <= 3 else 5 if props.get('scalerank') <= 4 else 5.5 if props.get('scalerank') <= 5 else 6 if props.get('scalerank') <= 6 else 6.7 if props.get('scalerank') <= 7 else 6.8 if props.get('scalerank') <= 8 else 7 if props.get('scalerank') <= 9 else None
    if props.get('featurecla') in ('Admin-1 boundary', 'Admin-1 statistical boundary', 'Admin-1 statistical meta bounds', '1st Order Admin Lines'):
        return 7 if props.get('scalerank') <= 0 else 2 if props.get('scalerank') <= 2 else 3 if props.get('scalerank') <= 3 else 5 if props.get('scalerank') <= 4 else 5.5 if props.get('scalerank') <= 5 else 6 if props.get('scalerank') <= 6 else 6.7 if props.get('scalerank') <= 7 else 6.8 if props.get('scalerank') <= 8 else 7 if props.get('scalerank') <= 9 else None

def buildings_min_zoom(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    volume = util.calculate_volume(way_area, props)
    if 'building' in props and not props.get('building') == 'no' and not props.get('location') == 'underground' and (volume >= 300000 or way_area >= 1600):
        return 13
    if 'building' in props and not props.get('building') == 'no' and (volume >= 200000 or way_area >= 100):
        return 14
    if 'building' in props and not props.get('building') == 'no' and (volume >= 100000 or way_area >= 100):
        return 15
    if 'building' in props and not props.get('building') == 'no' and (volume >= 50000 or way_area >= 25):
        return 16
    if 'building' in props and not props.get('building') == 'no':
        return 17
    if 'building:part' in props and not props.get('building:part') == 'no' and (volume >= 100000 or way_area >= 100):
        return 15
    if 'building:part' in props and not props.get('building:part') == 'no' and (volume >= 50000 or way_area >= 25):
        return 16
    if 'building:part' in props and not props.get('building:part') == 'no':
        return 17
    if 'addr:housenumber' in props and shape.type in ('Point', 'MultiPoint'):
        return 17

def roads_min_zoom(shape,props,fid,meta):
    if props.get('featurecla') == 'Ferry' and 'scalerank' in props:
        return props.get('scalerank')
    if props.get('featurecla') == 'Road' and props.get('expressway') == 1 and 'scalerank' in props:
        return max(5, min(17, props.get('scalerank')))
    if props.get('featurecla') == 'Road' and props.get('type') in ('Major Highway', 'Beltway', 'Bypass') and 'scalerank' in props:
        return max(5, min(17, props.get('scalerank')))
    if props.get('featurecla') == 'Road' and props.get('type') == 'Secondary Highway' and 'scalerank' in props:
        return max(5, min(17, props.get('scalerank')))
    if props.get('featurecla') == 'Road' and props.get('type') == 'Road' and 'scalerank' in props:
        return max(5, min(17, props.get('scalerank')))
    if props.get('featurecla') == 'Road' and props.get('type') in ('Track', 'Unknown') and 'scalerank' in props:
        return max(5, min(17, props.get('scalerank')))
    if props.get('highway') == 'motorway':
        return 8
    if props.get('highway') in ('trunk', 'primary'):
        return 8
    if props.get('highway') == 'secondary':
        return max(0, min(10, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'motorway_link':
        return max(0, min(11, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'tertiary':
        return max(0, min(11, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'trunk_link':
        return max(0, min(12, util.calculate_path_major_route(fid)))
    if props.get('highway') in ('primary_link', 'secondary_link'):
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'tertiary_link':
        return max(0, min(14, util.calculate_path_major_route(fid)))
    if props.get('whitewater') == 'portage_way':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('highway') in ('residential', 'unclassified', 'road'):
        return max(0, min(12, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'living_street':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'pedestrian':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('highway') in ('path', 'track', 'cycleway', 'bridleway'):
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if ('name' in props or props.get('bicycle') == 'designated' or props.get('foot') == 'designated' or props.get('horse') == 'designated' or props.get('snowmobile') == 'designated' or props.get('ski') == 'designated') and props.get('highway') == 'footway':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if 'name' in props and (props.get('bicycle') == 'designated' or props.get('foot') == 'designated' or props.get('horse') == 'designated' or props.get('snowmobile') == 'designated' or props.get('ski') == 'designated') and props.get('highway') == 'steps':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('footway') in ('sidewalk', 'crossing') and props.get('highway') == 'footway':
        return max(0, min(15, util.calculate_path_major_route(fid)))
    if props.get('highway') in ('footway', 'steps'):
        return max(0, min(14, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'corridor':
        return 16
    if props.get('highway') == 'service' and props.get('service') == 'alley':
        return max(0, min(13, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'service' and props.get('service') in ('driveway', 'parking_aisle', 'drive-through'):
        return max(0, min(15, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'service':
        return max(0, min(14, util.calculate_path_major_route(fid)))
    if props.get('highway') == 'raceway':
        return 13
    if props.get('aeroway') == 'runway':
        return 9
    if props.get('aeroway') == 'taxiway':
        return 11
    if props.get('railway') == 'rail' and props.get('service') in ('spur', 'siding'):
        return 12
    if props.get('railway') == 'rail' and props.get('service') == 'yard':
        return 13
    if props.get('railway') == 'rail' and props.get('service') == 'crossover':
        return 15
    if props.get('railway') == 'rail' and props.get('service') in ('branch', 'connector', 'wye', 'runaway', 'interchange', 'switch', 'industrial', 'disused', 'driveway', 'passing_loop'):
        return 15
    if props.get('railway') == 'rail':
        return 11
    if props.get('railway') in ('tram', 'light_rail', 'narrow_gauge', 'monorail', 'subway', 'funicular'):
        return 15
    if props.get('route') == 'ferry':
        return mz_calculate_ferry_level(shape)
    if props.get('aerialway') in ('gondola', 'cable_car'):
        return 12
    if props.get('aerialway') == 'chair_lift':
        return 13
    if props.get('aerialway') in ('drag_lift', 'platter', 't-bar', 'goods', 'magic_carpet', 'rope_tow', 'yes', 'zip_line', 'j-bar', 'unknown', 'mixed_lift', 'canopy', 'cableway'):
        return 15
    if props.get('sport') in ('athletics', 'running', 'horse_racing', 'bmx', 'disc_golf', 'cycling', 'ski_jumping', 'motor', 'karting', 'obstacle_course', 'equestrian', 'alpine_slide', 'soap_box_derby', 'mud_truck_racing', 'skiing', 'drag_racing', 'archery') and props.get('leisure') == 'track':
        return 14
    if props.get('man_made') == 'pier':
        return 13
    if not props.get('piste:abandoned') == 'yes' and props.get('piste:type') in ('nordic', 'downhill', 'sleigh', 'skitour', 'hike', 'sled', 'yes', 'snow_park', 'playground', 'ski_jump') and 'piste:name' in props:
        return 13
    if not props.get('piste:abandoned') == 'yes' and props.get('piste:type') in ('nordic', 'downhill', 'sleigh', 'skitour', 'hike', 'sled', 'yes', 'snow_park', 'playground', 'ski_jump'):
        return 13

def earth_min_zoom(shape,props,fid,meta):
    way_area = util.calculate_way_area(shape)
    zoom = util.calculate_1px_zoom(way_area)
    if props.get('place') == 'continent' and 'name' in props:
        return 0
    if props.get('place') == 'archipelago' and 'name' in props:
        return 15
    if props.get('place') == 'island' and 'name' in props:
        return max(7, min(15, 5.75 + zoom))
    if props.get('place') == 'islet' and 'name' in props:
        return max(15, min(17, 3.5 + zoom))
    if props.get('natural') == 'cliff':
        return 13
    if props.get('natural') == 'arete':
        return 13
    if props.get('natural') == 'ridge' and 'name' in props:
        return 13
    if props.get('natural') == 'valley' and 'name' in props:
        return 13
    if meta.source in ('ne', 'shp'):
        return 0

