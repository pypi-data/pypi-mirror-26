# coding: utf-8

"""
    style-api

    This is a API document for Stylens Service

    OpenAPI spec version: 0.0.1
    Contact: master@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BoxObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'box': 'BoxArray',
        'class_code': 'str',
        'class_name': 'str',
        'images': 'ProductsArray'
    }

    attribute_map = {
        'box': 'box',
        'class_code': 'class_code',
        'class_name': 'class_name',
        'images': 'images'
    }

    def __init__(self, box=None, class_code=None, class_name=None, images=None):
        """
        BoxObject - a model defined in Swagger
        """

        self._box = None
        self._class_code = None
        self._class_name = None
        self._images = None

        if box is not None:
          self.box = box
        if class_code is not None:
          self.class_code = class_code
        if class_name is not None:
          self.class_name = class_name
        if images is not None:
          self.images = images

    @property
    def box(self):
        """
        Gets the box of this BoxObject.

        :return: The box of this BoxObject.
        :rtype: BoxArray
        """
        return self._box

    @box.setter
    def box(self, box):
        """
        Sets the box of this BoxObject.

        :param box: The box of this BoxObject.
        :type: BoxArray
        """

        self._box = box

    @property
    def class_code(self):
        """
        Gets the class_code of this BoxObject.

        :return: The class_code of this BoxObject.
        :rtype: str
        """
        return self._class_code

    @class_code.setter
    def class_code(self, class_code):
        """
        Sets the class_code of this BoxObject.

        :param class_code: The class_code of this BoxObject.
        :type: str
        """

        self._class_code = class_code

    @property
    def class_name(self):
        """
        Gets the class_name of this BoxObject.

        :return: The class_name of this BoxObject.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """
        Sets the class_name of this BoxObject.

        :param class_name: The class_name of this BoxObject.
        :type: str
        """

        self._class_name = class_name

    @property
    def images(self):
        """
        Gets the images of this BoxObject.

        :return: The images of this BoxObject.
        :rtype: ProductsArray
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this BoxObject.

        :param images: The images of this BoxObject.
        :type: ProductsArray
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BoxObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
