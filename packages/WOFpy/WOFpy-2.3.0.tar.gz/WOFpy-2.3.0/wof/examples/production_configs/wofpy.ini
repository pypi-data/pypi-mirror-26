# Allows uWSGI to know to apply the settings
[uwsgi]
module = wsgi
# Tells uWSGI to start up in master mode and spawn five worker processes to serve actual request
master = true
processes = 5
# When we were testing, we exposed uWSGI on a network port.
# However, we're going to be using Nginx to handle actual client connections, which will then pass requests to uWSGI.
# Since these components are operating on the same computer, a Unix socket is preferred because it is more secure and faster.
# We'll call the socket myproject.sock and place it in this directory.
# We'll also have to change the permissions on the socket.
# We'll be giving the Nginx group ownership of the uWSGI process later on, so we need to make sure the group owner of the socket can read information from it and write to it.
# We will also clean up the socket when the process stops by adding the "vacuum" option.
socket = wofpy.sock
chmod-socket = 660
vacuum = true
# The last thing we need to do is set the die-on-term option.
# This is needed because the Upstart init system and uWSGI have different ideas on what different process signals should mean.
die-on-term = true

# lazy-apps mode loads your application one time per worker.
# It will require about O(n) time to load it (where n is the number of workers),
# will very probably consume more memory,
# but will run in a more consistent and clean environment.
# This is needed for Postgresql Database.
lazy-apps = true
