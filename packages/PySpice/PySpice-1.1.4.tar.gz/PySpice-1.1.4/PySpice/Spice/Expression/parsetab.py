
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'statementleftIFleftORleftANDleftGREATERLESSGREATER_EQUALLESS_EQUALNOT_EQUALEQUALleftMINUSPLUSleftINT_DIVIDEMODULODIVIDEMULTIPLYleftPOWERleftNOTNAME NUMBER SEMICOLON LEFT_PARENTHESIS RIGHT_PARENTHESIS SET NOT POWER MULTIPLY DIVIDE INT_DIVIDE MODULO PLUS MINUS EQUAL NOT_EQUAL LESS GREATER LESS_EQUAL GREATER_EQUAL AND OR IF COLONstatement : expressionvariable : NAME\n        constant : NUMBER\n        expression : variable\n                      | constant\n        expression : MINUS expression\n                      | NOT expression\n        expression : expression POWER expression\n                      | expression MULTIPLY expression\n                      | expression DIVIDE expression\n                      | expression MODULO expression\n                      | expression INT_DIVIDE expression\n                      | expression PLUS expression\n                      | expression MINUS expression\n                      | expression EQUAL expression\n                      | expression NOT_EQUAL expression\n                      | expression LESS expression\n                      | expression GREATER expression\n                      | expression LESS_EQUAL expression\n                      | expression GREATER_EQUAL expression\n                      | expression AND expression\n                      | expression OR expression\n        expression : expression IF expression COLON expression\n        '
    
_lr_action_items = {'AND':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,22,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,22,-14,22,-17,-16,-9,-11,-21,-8,-15,-12,22,]),'GREATER_EQUAL':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,11,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,11,-14,11,-17,-16,-9,-11,11,-8,-15,-12,11,]),'LESS_EQUAL':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,10,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,10,-14,10,-17,-16,-9,-11,10,-8,-15,-12,10,]),'INT_DIVIDE':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,25,-2,-5,-3,25,-7,25,25,-10,25,25,25,25,25,25,25,-9,-11,25,-8,25,-12,25,]),'MULTIPLY':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,20,-2,-5,-3,20,-7,20,20,-10,20,20,20,20,20,20,20,-9,-11,20,-8,20,-12,20,]),'PLUS':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,13,-2,-5,-3,-6,-7,13,13,-10,-13,13,13,-14,13,13,13,-9,-11,13,-8,13,-12,13,]),'GREATER':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,14,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,14,-14,14,-17,-16,-9,-11,14,-8,-15,-12,14,]),'MINUS':([0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,],[2,-4,2,16,-2,-5,2,-3,-6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-7,16,16,-10,-13,16,16,-14,16,16,16,-9,-11,16,-8,16,-12,2,16,]),'OR':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,15,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,-22,-14,15,-17,-16,-9,-11,-21,-8,-15,-12,15,]),'NOT_EQUAL':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,19,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,19,-14,19,-17,-16,-9,-11,19,-8,-15,-12,19,]),'COLON':([1,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,-22,-14,43,-17,-16,-9,-11,-21,-8,-15,-12,-23,]),'NAME':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'IF':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,17,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,-22,-14,17,-17,-16,-9,-11,-21,-8,-15,-12,17,]),'NOT':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'MODULO':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,21,-2,-5,-3,21,-7,21,21,-10,21,21,21,21,21,21,21,-9,-11,21,-8,21,-12,21,]),'NUMBER':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'POWER':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,23,-2,-5,-3,23,-7,23,23,23,23,23,23,23,23,23,23,23,23,23,-8,23,23,23,]),'EQUAL':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,24,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,24,-14,24,-17,-16,-9,-11,24,-8,-15,-12,24,]),'$end':([1,3,4,5,6,8,9,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,44,],[-4,-1,-2,0,-5,-3,-6,-7,-19,-20,-10,-13,-18,-22,-14,-17,-16,-9,-11,-21,-8,-15,-12,-23,]),'LESS':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,18,-2,-5,-3,-6,-7,-19,-20,-10,-13,-18,18,-14,18,-17,-16,-9,-11,18,-8,-15,-12,18,]),'DIVIDE':([1,3,4,6,8,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,],[-4,12,-2,-5,-3,12,-7,12,12,-10,12,12,12,12,12,12,12,-9,-11,12,-8,12,-12,12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'statement':([0,],[5,]),'expression':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[3,9,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,]),'variable':([0,2,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,43,],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','Parser.py',191),
  ('variable -> NAME','variable',1,'p_variable','Parser.py',249),
  ('constant -> NUMBER','constant',1,'p_float','Parser.py',263),
  ('expression -> variable','expression',1,'p_value','Parser.py',271),
  ('expression -> constant','expression',1,'p_value','Parser.py',272),
  ('expression -> MINUS expression','expression',2,'p_unnary_operation','Parser.py',277),
  ('expression -> NOT expression','expression',2,'p_unnary_operation','Parser.py',278),
  ('expression -> expression POWER expression','expression',3,'p_binary_operation','Parser.py',284),
  ('expression -> expression MULTIPLY expression','expression',3,'p_binary_operation','Parser.py',285),
  ('expression -> expression DIVIDE expression','expression',3,'p_binary_operation','Parser.py',286),
  ('expression -> expression MODULO expression','expression',3,'p_binary_operation','Parser.py',287),
  ('expression -> expression INT_DIVIDE expression','expression',3,'p_binary_operation','Parser.py',288),
  ('expression -> expression PLUS expression','expression',3,'p_binary_operation','Parser.py',289),
  ('expression -> expression MINUS expression','expression',3,'p_binary_operation','Parser.py',290),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_operation','Parser.py',291),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_binary_operation','Parser.py',292),
  ('expression -> expression LESS expression','expression',3,'p_binary_operation','Parser.py',293),
  ('expression -> expression GREATER expression','expression',3,'p_binary_operation','Parser.py',294),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_binary_operation','Parser.py',295),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_binary_operation','Parser.py',296),
  ('expression -> expression AND expression','expression',3,'p_binary_operation','Parser.py',297),
  ('expression -> expression OR expression','expression',3,'p_binary_operation','Parser.py',298),
  ('expression -> expression IF expression COLON expression','expression',5,'p_if','Parser.py',304),
]
