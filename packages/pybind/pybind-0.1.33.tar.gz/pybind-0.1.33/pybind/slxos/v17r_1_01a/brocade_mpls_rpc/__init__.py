
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import clear_mpls_lsp
import mpls_reopt_lsp
import clear_mpls_rsvp_statistics
import clear_mpls_rsvp_statistics_neighbor
import clear_mpls_ldp_statistics
import clear_mpls_statistics
import clear_mpls_statistics_ldp_tunnel
import clear_mpls_ldp_neighbor
import clear_mpls_statistics_ldp_transit
import clear_mpls_auto_bandwidth_statistics_lsp
import clear_mpls_auto_bandwidth_sample_history_lsp
import mpls_adjust_bandwidth_lsp
class brocade_mpls(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This management module is an instrumentation to manage
mpls protocol.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__clear_mpls_lsp','__mpls_reopt_lsp','__clear_mpls_rsvp_statistics','__clear_mpls_rsvp_statistics_neighbor','__clear_mpls_ldp_statistics','__clear_mpls_statistics','__clear_mpls_statistics_ldp_tunnel','__clear_mpls_ldp_neighbor','__clear_mpls_statistics_ldp_transit','__clear_mpls_auto_bandwidth_statistics_lsp','__clear_mpls_auto_bandwidth_sample_history_lsp','__mpls_adjust_bandwidth_lsp',)

  _yang_name = 'brocade-mpls'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__clear_mpls_statistics = YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__mpls_reopt_lsp = YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_rsvp_statistics_neighbor = YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_statistics_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__mpls_adjust_bandwidth_lsp = YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_statistics_ldp_tunnel = YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_ldp_neighbor = YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_rsvp_statistics = YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_lsp = YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_sample_history_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_statistics_ldp_transit = YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_ldp_statistics = YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return []

  def _get_clear_mpls_lsp(self):
    """
    Getter method for clear_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_lsp (rpc)
    """
    return self.__clear_mpls_lsp
      
  def _set_clear_mpls_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_lsp(self):
    self.__clear_mpls_lsp = YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_mpls_reopt_lsp(self):
    """
    Getter method for mpls_reopt_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_reopt_lsp (rpc)
    """
    return self.__mpls_reopt_lsp
      
  def _set_mpls_reopt_lsp(self, v, load=False):
    """
    Setter method for mpls_reopt_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_reopt_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_reopt_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_reopt_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_reopt_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__mpls_reopt_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_reopt_lsp(self):
    self.__mpls_reopt_lsp = YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_rsvp_statistics(self):
    """
    Getter method for clear_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics (rpc)
    """
    return self.__clear_mpls_rsvp_statistics
      
  def _set_clear_mpls_rsvp_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_rsvp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_rsvp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_rsvp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_rsvp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_rsvp_statistics(self):
    self.__clear_mpls_rsvp_statistics = YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_rsvp_statistics_neighbor(self):
    """
    Getter method for clear_mpls_rsvp_statistics_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics_neighbor (rpc)
    """
    return self.__clear_mpls_rsvp_statistics_neighbor
      
  def _set_clear_mpls_rsvp_statistics_neighbor(self, v, load=False):
    """
    Setter method for clear_mpls_rsvp_statistics_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_rsvp_statistics_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_rsvp_statistics_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_rsvp_statistics_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_rsvp_statistics_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_rsvp_statistics_neighbor(self):
    self.__clear_mpls_rsvp_statistics_neighbor = YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_ldp_statistics(self):
    """
    Getter method for clear_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_statistics (rpc)
    """
    return self.__clear_mpls_ldp_statistics
      
  def _set_clear_mpls_ldp_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_ldp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_ldp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_ldp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_ldp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_ldp_statistics(self):
    self.__clear_mpls_ldp_statistics = YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics(self):
    """
    Getter method for clear_mpls_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics (rpc)
    """
    return self.__clear_mpls_statistics
      
  def _set_clear_mpls_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics(self):
    self.__clear_mpls_statistics = YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics_ldp_tunnel(self):
    """
    Getter method for clear_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_tunnel (rpc)
    """
    return self.__clear_mpls_statistics_ldp_tunnel
      
  def _set_clear_mpls_statistics_ldp_tunnel(self, v, load=False):
    """
    Setter method for clear_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_tunnel (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics_ldp_tunnel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics_ldp_tunnel() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics_ldp_tunnel must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics_ldp_tunnel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics_ldp_tunnel(self):
    self.__clear_mpls_statistics_ldp_tunnel = YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_ldp_neighbor(self):
    """
    Getter method for clear_mpls_ldp_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_neighbor (rpc)
    """
    return self.__clear_mpls_ldp_neighbor
      
  def _set_clear_mpls_ldp_neighbor(self, v, load=False):
    """
    Setter method for clear_mpls_ldp_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_ldp_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_ldp_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_ldp_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_ldp_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_ldp_neighbor(self):
    self.__clear_mpls_ldp_neighbor = YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics_ldp_transit(self):
    """
    Getter method for clear_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit (rpc)
    """
    return self.__clear_mpls_statistics_ldp_transit
      
  def _set_clear_mpls_statistics_ldp_transit(self, v, load=False):
    """
    Setter method for clear_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics_ldp_transit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics_ldp_transit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics_ldp_transit must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics_ldp_transit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics_ldp_transit(self):
    self.__clear_mpls_statistics_ldp_transit = YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_statistics_lsp(self):
    """
    Getter method for clear_mpls_auto_bandwidth_statistics_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_lsp (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_statistics_lsp
      
  def _set_clear_mpls_auto_bandwidth_statistics_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_statistics_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_statistics_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_statistics_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_statistics_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_statistics_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_statistics_lsp(self):
    self.__clear_mpls_auto_bandwidth_statistics_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_sample_history_lsp(self):
    """
    Getter method for clear_mpls_auto_bandwidth_sample_history_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_lsp (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_sample_history_lsp
      
  def _set_clear_mpls_auto_bandwidth_sample_history_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_sample_history_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_sample_history_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_sample_history_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_sample_history_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_sample_history_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_sample_history_lsp(self):
    self.__clear_mpls_auto_bandwidth_sample_history_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_mpls_adjust_bandwidth_lsp(self):
    """
    Getter method for mpls_adjust_bandwidth_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp (rpc)
    """
    return self.__mpls_adjust_bandwidth_lsp
      
  def _set_mpls_adjust_bandwidth_lsp(self, v, load=False):
    """
    Setter method for mpls_adjust_bandwidth_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_adjust_bandwidth_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_adjust_bandwidth_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_adjust_bandwidth_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__mpls_adjust_bandwidth_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_adjust_bandwidth_lsp(self):
    self.__mpls_adjust_bandwidth_lsp = YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)

  clear_mpls_lsp = __builtin__.property(_get_clear_mpls_lsp, _set_clear_mpls_lsp)
  mpls_reopt_lsp = __builtin__.property(_get_mpls_reopt_lsp, _set_mpls_reopt_lsp)
  clear_mpls_rsvp_statistics = __builtin__.property(_get_clear_mpls_rsvp_statistics, _set_clear_mpls_rsvp_statistics)
  clear_mpls_rsvp_statistics_neighbor = __builtin__.property(_get_clear_mpls_rsvp_statistics_neighbor, _set_clear_mpls_rsvp_statistics_neighbor)
  clear_mpls_ldp_statistics = __builtin__.property(_get_clear_mpls_ldp_statistics, _set_clear_mpls_ldp_statistics)
  clear_mpls_statistics = __builtin__.property(_get_clear_mpls_statistics, _set_clear_mpls_statistics)
  clear_mpls_statistics_ldp_tunnel = __builtin__.property(_get_clear_mpls_statistics_ldp_tunnel, _set_clear_mpls_statistics_ldp_tunnel)
  clear_mpls_ldp_neighbor = __builtin__.property(_get_clear_mpls_ldp_neighbor, _set_clear_mpls_ldp_neighbor)
  clear_mpls_statistics_ldp_transit = __builtin__.property(_get_clear_mpls_statistics_ldp_transit, _set_clear_mpls_statistics_ldp_transit)
  clear_mpls_auto_bandwidth_statistics_lsp = __builtin__.property(_get_clear_mpls_auto_bandwidth_statistics_lsp, _set_clear_mpls_auto_bandwidth_statistics_lsp)
  clear_mpls_auto_bandwidth_sample_history_lsp = __builtin__.property(_get_clear_mpls_auto_bandwidth_sample_history_lsp, _set_clear_mpls_auto_bandwidth_sample_history_lsp)
  mpls_adjust_bandwidth_lsp = __builtin__.property(_get_mpls_adjust_bandwidth_lsp, _set_mpls_adjust_bandwidth_lsp)


  _pyangbind_elements = {'clear_mpls_lsp': clear_mpls_lsp, 'mpls_reopt_lsp': mpls_reopt_lsp, 'clear_mpls_rsvp_statistics': clear_mpls_rsvp_statistics, 'clear_mpls_rsvp_statistics_neighbor': clear_mpls_rsvp_statistics_neighbor, 'clear_mpls_ldp_statistics': clear_mpls_ldp_statistics, 'clear_mpls_statistics': clear_mpls_statistics, 'clear_mpls_statistics_ldp_tunnel': clear_mpls_statistics_ldp_tunnel, 'clear_mpls_ldp_neighbor': clear_mpls_ldp_neighbor, 'clear_mpls_statistics_ldp_transit': clear_mpls_statistics_ldp_transit, 'clear_mpls_auto_bandwidth_statistics_lsp': clear_mpls_auto_bandwidth_statistics_lsp, 'clear_mpls_auto_bandwidth_sample_history_lsp': clear_mpls_auto_bandwidth_sample_history_lsp, 'mpls_adjust_bandwidth_lsp': mpls_adjust_bandwidth_lsp, }


