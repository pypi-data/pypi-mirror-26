from classutils.json_api_helper import (JsonApiPropertiesClass,
                                        MANDATORY,
                                        PROPERTIES,
                                        PROPERTY,
                                        DEFAULT,
                                        JsonApiPropertiesClassCreator)


import unittest


class ApiResponse(JsonApiPropertiesClass):
    @property
    def m(self):
        return self.mandatory(u'a')

    @property
    def o(self):
        return self.optional(u'o')

    @property
    def od(self):
        return self.optional(u'od', u'default')


class TestJsonApiResponse(unittest.TestCase):

    def setUp(self):
        self.api_response = ApiResponse(response=u"""{"a": 1,
                                                      "o": 2}""")

    def tearDown(self):
        pass

    def test_mandatory(self):
        assert self.api_response.m == 1

    def test_optional(self):
        assert self.api_response.o == 2

    def test_optional_default(self):
        assert self.api_response.od == u"default"


class TestDictionaryResponderCreator(unittest.TestCase):

    def test_x(self):
        x = JsonApiPropertiesClassCreator(class_name=u'Rectangle',
                                          key=u'rectangle',
                                          property_name=u'rect',
                                          attributes={u'w': {MANDATORY: True,
                                                          PROPERTIES: [u'w', u'width'], },

                                                   u'h': {MANDATORY: True,
                                                          PROPERTIES: [u'h', u'height'], },

                                                   u'col': {MANDATORY: False,
                                                            PROPERTIES: [u'color', u'colour'], },

                                                   u'border': {MANDATORY: False,
                                                               PROPERTY: u'border',
                                                               DEFAULT: 1},
                                                   })

        assert x.code == u"""# Code generated by classutils.responses.JsonApiPropertiesClassCreator

from classutils import JsonApiPropertiesClass


class Rectangle(JsonApiPropertiesClass):

    def __init__(self,
                 *args,
                 **kwargs):
        super(Rectangle, self).__init__(*args, **kwargs)

    @property
    def h(self):
        return self.mandatory(u'h')

    @property
    def height(self):
        return self.mandatory(u'h')

    @property
    def border(self):
        return self.optional(u'border', 1)

    @property
    def color(self):
        return self.optional(u'col')

    @property
    def colour(self):
        return self.optional(u'col')

    @property
    def w(self):
        return self.mandatory(u'w')

    @property
    def width(self):
        return self.mandatory(u'w')


class RectMandatoryMixIn(object):

    RECTANGLE = Rectangle  # Override in subclass if required

    def __init__(self):
        super(RectMandatoryMixIn, self).__init__()

    @property
    def rect(self):
        try:
            return self._rect
        except AttributeError:
            pass
        attribute = self.mandatory(u'rectangle')
        if isinstance(attribute, list):
            self._rect = [
                Rectangle(
                    response=response,
                    parent=self)
                for response in attribute]
        elif isinstance(attribute, dict):
            self._rect = Rectangle(
                response=attribute,
                parent=self)
        else:
            self._rect = None
        return self._rect


class RectOptionalMixIn(object):

    RECTANGLE = Rectangle  # Override in subclass if required

    def __init__(self):
        super(RectOptionalMixIn, self).__init__()

    @property
    def rect(self):
        try:
            return self._rect
        except AttributeError:
            pass
        attribute = self.optional(u'rectangle')
        if isinstance(attribute, list):
            self._rect = [
                Rectangle(
                    response=response,
                    parent=self)
                for response in attribute]
        elif isinstance(attribute, dict):
            self._rect = Rectangle(
                response=attribute,
                parent=self)
        else:
            self._rect = None
        return self._rect
"""

if __name__ == u'__main__':
    unittest.main()
