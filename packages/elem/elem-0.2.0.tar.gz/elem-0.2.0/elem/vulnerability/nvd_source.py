# -*- coding: utf-8 -*-
"""
vulnerability_data_reader
"""
import dateutil.parser
from elem.vulnerability import VulnerabilitySource

class NvdSource(VulnerabilitySource):
    """
    This module reads CVE data as formated by the NVD.  The data location can either be
    a URL or a file on disk.  The file at the URL location is expected to be a gzip file.

    Args:
        name (str): Human readable notation naming this reader.
        location (str): Either a file path or URL to a file.
        tlsverify (bool): Whether or not to verify the SSL connection.
        cache (bool): Whether or not to cache the file.
        cache_path (str): The path at which to cache the file.
    """

    def __init__(self, name, location, tlsverify=True, cachepath=None):
        super(NvdSource, self).__init__(name,
                                        location,
                                        VulnerabilitySource.NVD_SOURCE,
                                        tlsverify,
                                        cachepath)

    def cves(self):
        self.conditional_read()
        cve_result = dict()
        for cveitem in self.data['CVE_Items']:
            cve_id = cveitem['cve']['CVE_data_meta']['ID']
            if  cve_id not in cve_result.keys():
                published_date = None
                if cveitem['publishedDate']:
                    published_date = dateutil.parser.parse(cveitem['publishedDate']).replace(tzinfo=None).date()
                cve_result[cve_id] = dict(published_date=str(published_date),
                                          source_name=self.name,
                                          source_type=self.source_type,
                                          configurations=cveitem['configurations'])

        return cve_result

    def update_cves(self, new_data):
        self.conditional_read()
        updated_cves = []
        for updated_cve_item in new_data['CVE_Items']:
            for cve_item in self.data['CVE_Items']:
                if updated_cve_item['cve']['CVE_data_meta']['ID'] == \
                        cve_item['cve']['CVE_data_meta']['ID']:
                    cve_item = updated_cve_item
                    updated_cves.append(updated_cve_item['cve']['CVE_data_meta']['ID'])
        return updated_cves
