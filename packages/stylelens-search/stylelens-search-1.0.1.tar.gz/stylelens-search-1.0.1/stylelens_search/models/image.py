# coding: utf-8

"""
    stylelens-search

    This is a API document for Image search on fashion items\"

    OpenAPI spec version: 0.0.1
    Contact: devops@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'host_url': 'str',
        'host_code': 'str',
        'host_name': 'str',
        'tags': 'list[str]',
        'format': 'str',
        'product_name': 'str',
        'parent_image_raw': 'str',
        'parent_image_mobile': 'str',
        'parent_image_mobile_thumb': 'str',
        'image': 'str',
        'class_code': 'str',
        'product_price': 'str',
        'currency_unit': 'str',
        'product_url': 'str',
        'product_no': 'str',
        'main': 'int',
        'nation': 'str'
    }

    attribute_map = {
        'name': 'name',
        'host_url': 'host_url',
        'host_code': 'host_code',
        'host_name': 'host_name',
        'tags': 'tags',
        'format': 'format',
        'product_name': 'product_name',
        'parent_image_raw': 'parent_image_raw',
        'parent_image_mobile': 'parent_image_mobile',
        'parent_image_mobile_thumb': 'parent_image_mobile_thumb',
        'image': 'image',
        'class_code': 'class_code',
        'product_price': 'product_price',
        'currency_unit': 'currency_unit',
        'product_url': 'product_url',
        'product_no': 'product_no',
        'main': 'main',
        'nation': 'nation'
    }

    def __init__(self, name=None, host_url=None, host_code=None, host_name=None, tags=None, format=None, product_name=None, parent_image_raw=None, parent_image_mobile=None, parent_image_mobile_thumb=None, image=None, class_code=None, product_price=None, currency_unit=None, product_url=None, product_no=None, main=None, nation=None):
        """
        Image - a model defined in Swagger
        """

        self._name = None
        self._host_url = None
        self._host_code = None
        self._host_name = None
        self._tags = None
        self._format = None
        self._product_name = None
        self._parent_image_raw = None
        self._parent_image_mobile = None
        self._parent_image_mobile_thumb = None
        self._image = None
        self._class_code = None
        self._product_price = None
        self._currency_unit = None
        self._product_url = None
        self._product_no = None
        self._main = None
        self._nation = None

        if name is not None:
          self.name = name
        if host_url is not None:
          self.host_url = host_url
        if host_code is not None:
          self.host_code = host_code
        if host_name is not None:
          self.host_name = host_name
        if tags is not None:
          self.tags = tags
        if format is not None:
          self.format = format
        if product_name is not None:
          self.product_name = product_name
        if parent_image_raw is not None:
          self.parent_image_raw = parent_image_raw
        if parent_image_mobile is not None:
          self.parent_image_mobile = parent_image_mobile
        if parent_image_mobile_thumb is not None:
          self.parent_image_mobile_thumb = parent_image_mobile_thumb
        if image is not None:
          self.image = image
        if class_code is not None:
          self.class_code = class_code
        if product_price is not None:
          self.product_price = product_price
        if currency_unit is not None:
          self.currency_unit = currency_unit
        if product_url is not None:
          self.product_url = product_url
        if product_no is not None:
          self.product_no = product_no
        if main is not None:
          self.main = main
        if nation is not None:
          self.nation = nation

    @property
    def name(self):
        """
        Gets the name of this Image.

        :return: The name of this Image.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Image.

        :param name: The name of this Image.
        :type: str
        """

        self._name = name

    @property
    def host_url(self):
        """
        Gets the host_url of this Image.

        :return: The host_url of this Image.
        :rtype: str
        """
        return self._host_url

    @host_url.setter
    def host_url(self, host_url):
        """
        Sets the host_url of this Image.

        :param host_url: The host_url of this Image.
        :type: str
        """

        self._host_url = host_url

    @property
    def host_code(self):
        """
        Gets the host_code of this Image.

        :return: The host_code of this Image.
        :rtype: str
        """
        return self._host_code

    @host_code.setter
    def host_code(self, host_code):
        """
        Sets the host_code of this Image.

        :param host_code: The host_code of this Image.
        :type: str
        """

        self._host_code = host_code

    @property
    def host_name(self):
        """
        Gets the host_name of this Image.

        :return: The host_name of this Image.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this Image.

        :param host_name: The host_name of this Image.
        :type: str
        """

        self._host_name = host_name

    @property
    def tags(self):
        """
        Gets the tags of this Image.

        :return: The tags of this Image.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Image.

        :param tags: The tags of this Image.
        :type: list[str]
        """

        self._tags = tags

    @property
    def format(self):
        """
        Gets the format of this Image.

        :return: The format of this Image.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this Image.

        :param format: The format of this Image.
        :type: str
        """

        self._format = format

    @property
    def product_name(self):
        """
        Gets the product_name of this Image.

        :return: The product_name of this Image.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """
        Sets the product_name of this Image.

        :param product_name: The product_name of this Image.
        :type: str
        """

        self._product_name = product_name

    @property
    def parent_image_raw(self):
        """
        Gets the parent_image_raw of this Image.

        :return: The parent_image_raw of this Image.
        :rtype: str
        """
        return self._parent_image_raw

    @parent_image_raw.setter
    def parent_image_raw(self, parent_image_raw):
        """
        Sets the parent_image_raw of this Image.

        :param parent_image_raw: The parent_image_raw of this Image.
        :type: str
        """

        self._parent_image_raw = parent_image_raw

    @property
    def parent_image_mobile(self):
        """
        Gets the parent_image_mobile of this Image.

        :return: The parent_image_mobile of this Image.
        :rtype: str
        """
        return self._parent_image_mobile

    @parent_image_mobile.setter
    def parent_image_mobile(self, parent_image_mobile):
        """
        Sets the parent_image_mobile of this Image.

        :param parent_image_mobile: The parent_image_mobile of this Image.
        :type: str
        """

        self._parent_image_mobile = parent_image_mobile

    @property
    def parent_image_mobile_thumb(self):
        """
        Gets the parent_image_mobile_thumb of this Image.

        :return: The parent_image_mobile_thumb of this Image.
        :rtype: str
        """
        return self._parent_image_mobile_thumb

    @parent_image_mobile_thumb.setter
    def parent_image_mobile_thumb(self, parent_image_mobile_thumb):
        """
        Sets the parent_image_mobile_thumb of this Image.

        :param parent_image_mobile_thumb: The parent_image_mobile_thumb of this Image.
        :type: str
        """

        self._parent_image_mobile_thumb = parent_image_mobile_thumb

    @property
    def image(self):
        """
        Gets the image of this Image.

        :return: The image of this Image.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Image.

        :param image: The image of this Image.
        :type: str
        """

        self._image = image

    @property
    def class_code(self):
        """
        Gets the class_code of this Image.

        :return: The class_code of this Image.
        :rtype: str
        """
        return self._class_code

    @class_code.setter
    def class_code(self, class_code):
        """
        Sets the class_code of this Image.

        :param class_code: The class_code of this Image.
        :type: str
        """

        self._class_code = class_code

    @property
    def product_price(self):
        """
        Gets the product_price of this Image.

        :return: The product_price of this Image.
        :rtype: str
        """
        return self._product_price

    @product_price.setter
    def product_price(self, product_price):
        """
        Sets the product_price of this Image.

        :param product_price: The product_price of this Image.
        :type: str
        """

        self._product_price = product_price

    @property
    def currency_unit(self):
        """
        Gets the currency_unit of this Image.

        :return: The currency_unit of this Image.
        :rtype: str
        """
        return self._currency_unit

    @currency_unit.setter
    def currency_unit(self, currency_unit):
        """
        Sets the currency_unit of this Image.

        :param currency_unit: The currency_unit of this Image.
        :type: str
        """

        self._currency_unit = currency_unit

    @property
    def product_url(self):
        """
        Gets the product_url of this Image.

        :return: The product_url of this Image.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """
        Sets the product_url of this Image.

        :param product_url: The product_url of this Image.
        :type: str
        """

        self._product_url = product_url

    @property
    def product_no(self):
        """
        Gets the product_no of this Image.

        :return: The product_no of this Image.
        :rtype: str
        """
        return self._product_no

    @product_no.setter
    def product_no(self, product_no):
        """
        Sets the product_no of this Image.

        :param product_no: The product_no of this Image.
        :type: str
        """

        self._product_no = product_no

    @property
    def main(self):
        """
        Gets the main of this Image.

        :return: The main of this Image.
        :rtype: int
        """
        return self._main

    @main.setter
    def main(self, main):
        """
        Sets the main of this Image.

        :param main: The main of this Image.
        :type: int
        """

        self._main = main

    @property
    def nation(self):
        """
        Gets the nation of this Image.

        :return: The nation of this Image.
        :rtype: str
        """
        return self._nation

    @nation.setter
    def nation(self, nation):
        """
        Sets the nation of this Image.

        :param nation: The nation of this Image.
        :type: str
        """

        self._nation = nation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
