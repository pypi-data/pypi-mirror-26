// Generated by CoffeeScript 1.12.5
(function() {
  var SliderH,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SliderH = (function() {
    function SliderH(sliderh, parent) {
      this.start_pand = bind(this.start_pand, this);
      this.start_pand_end = bind(this.start_pand_end, this);
      this.start_pand_single = bind(this.start_pand_single, this);
      this.get_parent = bind(this.get_parent, this);
      var threshold;
      threshold = $(parent).data("threshold");
      if (!threshold) {
        threshold = 0.25;
      }
      this.DIRTY = false;
      this.WIDTH_SLIDER = $(sliderh).width();
      this.WIDTH_SLIDER_THRESHOLD = this.WIDTH_SLIDER * threshold;
      this.WIDTH_MAX_SLIDER = $(parent).width() - this.WIDTH_SLIDER;
    }

    SliderH.prototype.get_parent = function(event) {
      var cls, parent;
      cls = this;
      parent = $(event.srcEvent.path[1]);
      if (!parent.hasClass("d4a-sliderh-parent")) {
        parent = parent.parents(".d4a-sliderh-parent");
      }
      return parent;
    };

    SliderH.prototype.start_pand_single = function(event) {
      var cls, i, parent, s;
      cls = this;
      parent = cls.get_parent(event);
      cls.OFFSET = parseInt(parent.css("transform").split(',')[4]);
      for (s = i = 1; i <= 11; s = ++i) {
        if (cls.OFFSET < this.WIDTH_SLIDER * s) {
          cls.OFFSET = this.WIDTH_SLIDER * s;
          break;
        }
      }
      if (!cls.OFFSET) {
        cls.OFFSET = 0;
      }
      if (cls.OFFSET > 0) {
        cls.OFFSET = 0;
      }
      return cls.DIRTY = true;
    };

    SliderH.prototype.start_pand_end = function(event) {
      var cls, fn, parent;
      cls = this;
      parent = cls.get_parent(event);
      if (cls.DIRTY) {
        parent.css({
          "-webkit-transition-duration": "0.2s"
        });
        return parent.css({
          "-webkit-transform": "translateX(" + cls.OFFSET + "px)"
        });
      } else {
        fn = function() {
          if (cls.OFFSET) {
            console.log("Running: " + parent.data("onmove"));
            return eval(parent.data("onmove"));
          } else {
            return console.log("Fake");
          }
        };
        return setTimeout(fn, 200);
      }
    };

    SliderH.prototype.start_pand = function(event) {
      var W, X, cls, fn, parent;
      cls = this;
      parent = cls.get_parent(event);
      X = cls.OFFSET + event.deltaX;
      if (cls.OFFSET === 0 && event.deltaX > 0) {
        return;
      }
      if (cls.OFFSET === -cls.WIDTH_MAX_SLIDER && event.deltaX < 0) {
        return;
      }
      parent.css({
        "-webkit-transition-duration": "0s"
      });
      parent.css({
        "-webkit-transform": "translateX(" + X + "px)"
      });
      if (event.deltaX < -cls.WIDTH_SLIDER_THRESHOLD) {
        W = cls.OFFSET - cls.WIDTH_SLIDER;
        parent.css({
          "-webkit-transition-duration": "0.2s"
        });
        parent.css({
          "-webkit-transform": "translateX(" + W + "px)"
        });
        cls.DIRTY = false;
        fn = function() {
          return eval(parent.data("onmove"));
        };
        setTimeout(fn, 200);
        return;
      }
      if (event.deltaX > cls.WIDTH_SLIDER_THRESHOLD) {
        W = cls.OFFSET + cls.WIDTH_SLIDER;
        parent.css({
          "-webkit-transition-duration": "0.2s"
        });
        parent.css({
          "-webkit-transform": "translateX(" + W + "px)"
        });
        cls.DIRTY = false;
      }
    };

    return SliderH;

  })();

  $(document).ready(function() {
    window.initsliders = function() {
      var ASH_slider, SliderH_, element, i, len, ref, results;
      ref = $(".d4a-sliderh-parent");
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        SliderH_ = new SliderH($(element).children(".d4a-sliderh"), element);
        ASH_slider = new Hammer(element);
        ASH_slider.get("pan").set({
          velocity: 0,
          pointers: 1,
          threshold: 0
        });
        ASH_slider.on("panleft panright", SliderH_.start_pand);
        ASH_slider.on("panstart", SliderH_.start_pand_single);
        results.push(ASH_slider.on("panend", SliderH_.start_pand_end));
      }
      return results;
    };
    return window.initsliders();
  });

}).call(this);
