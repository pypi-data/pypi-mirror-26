# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/bayesnetwork/BayesNetworkEvidence.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from rst.timing import Timestamp_pb2 as rst_dot_timing_dot_Timestamp__pb2
from rst.bayesnetwork import BayesNetwork_pb2 as rst_dot_bayesnetwork_dot_BayesNetwork__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/bayesnetwork/BayesNetworkEvidence.proto',
  package='rst.bayesnetwork',
  syntax='proto2',
  serialized_pb=_b('\n+rst/bayesnetwork/BayesNetworkEvidence.proto\x12\x10rst.bayesnetwork\x1a\x1arst/timing/Timestamp.proto\x1a#rst/bayesnetwork/BayesNetwork.proto\"\x89\x02\n\x14\x42\x61yesNetworkEvidence\x12/\n\x07network\x18\x01 \x01(\x0b\x32\x1e.rst.bayesnetwork.BayesNetwork\x12#\n\x04time\x18\x02 \x01(\x0b\x32\x15.rst.timing.Timestamp\x12\x1d\n\x15\x64uration_microseconds\x18\x04 \x01(\x04\x12J\n\x0cobservations\x18\x03 \x03(\x0b\x32\x34.rst.bayesnetwork.BayesNetworkEvidence.VariableState\x1a\x30\n\rVariableState\x12\x10\n\x08variable\x18\x01 \x02(\t\x12\r\n\x05state\x18\x02 \x02(\tB\x1a\x42\x18\x42\x61yesNetworkEvidenceType')
  ,
  dependencies=[rst_dot_timing_dot_Timestamp__pb2.DESCRIPTOR,rst_dot_bayesnetwork_dot_BayesNetwork__pb2.DESCRIPTOR,])




_BAYESNETWORKEVIDENCE_VARIABLESTATE = _descriptor.Descriptor(
  name='VariableState',
  full_name='rst.bayesnetwork.BayesNetworkEvidence.VariableState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='variable', full_name='rst.bayesnetwork.BayesNetworkEvidence.VariableState.variable', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='state', full_name='rst.bayesnetwork.BayesNetworkEvidence.VariableState.state', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=348,
  serialized_end=396,
)

_BAYESNETWORKEVIDENCE = _descriptor.Descriptor(
  name='BayesNetworkEvidence',
  full_name='rst.bayesnetwork.BayesNetworkEvidence',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='network', full_name='rst.bayesnetwork.BayesNetworkEvidence.network', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='time', full_name='rst.bayesnetwork.BayesNetworkEvidence.time', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='duration_microseconds', full_name='rst.bayesnetwork.BayesNetworkEvidence.duration_microseconds', index=2,
      number=4, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='observations', full_name='rst.bayesnetwork.BayesNetworkEvidence.observations', index=3,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_BAYESNETWORKEVIDENCE_VARIABLESTATE, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=131,
  serialized_end=396,
)

_BAYESNETWORKEVIDENCE_VARIABLESTATE.containing_type = _BAYESNETWORKEVIDENCE
_BAYESNETWORKEVIDENCE.fields_by_name['network'].message_type = rst_dot_bayesnetwork_dot_BayesNetwork__pb2._BAYESNETWORK
_BAYESNETWORKEVIDENCE.fields_by_name['time'].message_type = rst_dot_timing_dot_Timestamp__pb2._TIMESTAMP
_BAYESNETWORKEVIDENCE.fields_by_name['observations'].message_type = _BAYESNETWORKEVIDENCE_VARIABLESTATE
DESCRIPTOR.message_types_by_name['BayesNetworkEvidence'] = _BAYESNETWORKEVIDENCE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

BayesNetworkEvidence = _reflection.GeneratedProtocolMessageType('BayesNetworkEvidence', (_message.Message,), dict(

  VariableState = _reflection.GeneratedProtocolMessageType('VariableState', (_message.Message,), dict(
    DESCRIPTOR = _BAYESNETWORKEVIDENCE_VARIABLESTATE,
    __module__ = 'rst.bayesnetwork.BayesNetworkEvidence_pb2'
    # @@protoc_insertion_point(class_scope:rst.bayesnetwork.BayesNetworkEvidence.VariableState)
    ))
  ,
  DESCRIPTOR = _BAYESNETWORKEVIDENCE,
  __module__ = 'rst.bayesnetwork.BayesNetworkEvidence_pb2'
  # @@protoc_insertion_point(class_scope:rst.bayesnetwork.BayesNetworkEvidence)
  ))
_sym_db.RegisterMessage(BayesNetworkEvidence)
_sym_db.RegisterMessage(BayesNetworkEvidence.VariableState)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('B\030BayesNetworkEvidenceType'))
# @@protoc_insertion_point(module_scope)
