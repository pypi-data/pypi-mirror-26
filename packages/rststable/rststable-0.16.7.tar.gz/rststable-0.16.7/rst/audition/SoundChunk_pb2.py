# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rst/audition/SoundChunk.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='rst/audition/SoundChunk.proto',
  package='rst.audition',
  syntax='proto2',
  serialized_pb=_b('\n\x1drst/audition/SoundChunk.proto\x12\x0crst.audition\"\x85\x03\n\nSoundChunk\x12\x0c\n\x04\x64\x61ta\x18\x01 \x02(\x0c\x12\x14\n\x0csample_count\x18\x02 \x02(\r\x12\x13\n\x08\x63hannels\x18\x03 \x01(\r:\x01\x31\x12\x13\n\x04rate\x18\x04 \x01(\r:\x05\x34\x34\x31\x30\x30\x12\x44\n\x0bsample_type\x18\x05 \x01(\x0e\x32#.rst.audition.SoundChunk.SampleType:\nSAMPLE_S16\x12\x46\n\nendianness\x18\x06 \x01(\x0e\x32#.rst.audition.SoundChunk.EndianNess:\rENDIAN_LITTLE\"j\n\nSampleType\x12\r\n\tSAMPLE_S8\x10\x00\x12\r\n\tSAMPLE_U8\x10\x01\x12\x0e\n\nSAMPLE_S16\x10\x02\x12\x0e\n\nSAMPLE_U16\x10\x04\x12\x0e\n\nSAMPLE_S24\x10\x08\x12\x0e\n\nSAMPLE_U24\x10\x10\"/\n\nEndianNess\x12\x11\n\rENDIAN_LITTLE\x10\x00\x12\x0e\n\nENDIAN_BIG\x10\x01\x42\x10\x42\x0eSoundChunkType')
)



_SOUNDCHUNK_SAMPLETYPE = _descriptor.EnumDescriptor(
  name='SampleType',
  full_name='rst.audition.SoundChunk.SampleType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_S8', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_U8', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_S16', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_U16', index=3, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_S24', index=4, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SAMPLE_U24', index=5, number=16,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=282,
  serialized_end=388,
)
_sym_db.RegisterEnumDescriptor(_SOUNDCHUNK_SAMPLETYPE)

_SOUNDCHUNK_ENDIANNESS = _descriptor.EnumDescriptor(
  name='EndianNess',
  full_name='rst.audition.SoundChunk.EndianNess',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ENDIAN_LITTLE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ENDIAN_BIG', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=390,
  serialized_end=437,
)
_sym_db.RegisterEnumDescriptor(_SOUNDCHUNK_ENDIANNESS)


_SOUNDCHUNK = _descriptor.Descriptor(
  name='SoundChunk',
  full_name='rst.audition.SoundChunk',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='rst.audition.SoundChunk.data', index=0,
      number=1, type=12, cpp_type=9, label=2,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sample_count', full_name='rst.audition.SoundChunk.sample_count', index=1,
      number=2, type=13, cpp_type=3, label=2,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='channels', full_name='rst.audition.SoundChunk.channels', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=1,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='rate', full_name='rst.audition.SoundChunk.rate', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=True, default_value=44100,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sample_type', full_name='rst.audition.SoundChunk.sample_type', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=2,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='endianness', full_name='rst.audition.SoundChunk.endianness', index=5,
      number=6, type=14, cpp_type=8, label=1,
      has_default_value=True, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SOUNDCHUNK_SAMPLETYPE,
    _SOUNDCHUNK_ENDIANNESS,
  ],
  options=None,
  is_extendable=False,
  syntax='proto2',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=437,
)

_SOUNDCHUNK.fields_by_name['sample_type'].enum_type = _SOUNDCHUNK_SAMPLETYPE
_SOUNDCHUNK.fields_by_name['endianness'].enum_type = _SOUNDCHUNK_ENDIANNESS
_SOUNDCHUNK_SAMPLETYPE.containing_type = _SOUNDCHUNK
_SOUNDCHUNK_ENDIANNESS.containing_type = _SOUNDCHUNK
DESCRIPTOR.message_types_by_name['SoundChunk'] = _SOUNDCHUNK
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SoundChunk = _reflection.GeneratedProtocolMessageType('SoundChunk', (_message.Message,), dict(
  DESCRIPTOR = _SOUNDCHUNK,
  __module__ = 'rst.audition.SoundChunk_pb2'
  # @@protoc_insertion_point(class_scope:rst.audition.SoundChunk)
  ))
_sym_db.RegisterMessage(SoundChunk)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('B\016SoundChunkType'))
# @@protoc_insertion_point(module_scope)
