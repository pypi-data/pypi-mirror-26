# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SectionsPropertyPriceStudy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price_comment': 'str',
        'similar_properties_comment': 'str',
        'similar_properties': 'list[ModelProperty]',
        'show_market_price': 'bool',
        'estimated_price': 'float',
        'active_serie': 'bool',
        'expired_serie': 'bool'
    }

    attribute_map = {
        'price_comment': 'priceComment',
        'similar_properties_comment': 'similarPropertiesComment',
        'similar_properties': 'similarProperties',
        'show_market_price': 'showMarketPrice',
        'estimated_price': 'estimatedPrice',
        'active_serie': 'activeSerie',
        'expired_serie': 'expiredSerie'
    }

    def __init__(self, price_comment=None, similar_properties_comment=None, similar_properties=None, show_market_price=None, estimated_price=None, active_serie=None, expired_serie=None):
        """
        SectionsPropertyPriceStudy - a model defined in Swagger
        """

        self._price_comment = None
        self._similar_properties_comment = None
        self._similar_properties = None
        self._show_market_price = None
        self._estimated_price = None
        self._active_serie = None
        self._expired_serie = None

        if price_comment is not None:
          self.price_comment = price_comment
        if similar_properties_comment is not None:
          self.similar_properties_comment = similar_properties_comment
        if similar_properties is not None:
          self.similar_properties = similar_properties
        if show_market_price is not None:
          self.show_market_price = show_market_price
        if estimated_price is not None:
          self.estimated_price = estimated_price
        if active_serie is not None:
          self.active_serie = active_serie
        if expired_serie is not None:
          self.expired_serie = expired_serie

    @property
    def price_comment(self):
        """
        Gets the price_comment of this SectionsPropertyPriceStudy.

        :return: The price_comment of this SectionsPropertyPriceStudy.
        :rtype: str
        """
        return self._price_comment

    @price_comment.setter
    def price_comment(self, price_comment):
        """
        Sets the price_comment of this SectionsPropertyPriceStudy.

        :param price_comment: The price_comment of this SectionsPropertyPriceStudy.
        :type: str
        """

        self._price_comment = price_comment

    @property
    def similar_properties_comment(self):
        """
        Gets the similar_properties_comment of this SectionsPropertyPriceStudy.

        :return: The similar_properties_comment of this SectionsPropertyPriceStudy.
        :rtype: str
        """
        return self._similar_properties_comment

    @similar_properties_comment.setter
    def similar_properties_comment(self, similar_properties_comment):
        """
        Sets the similar_properties_comment of this SectionsPropertyPriceStudy.

        :param similar_properties_comment: The similar_properties_comment of this SectionsPropertyPriceStudy.
        :type: str
        """

        self._similar_properties_comment = similar_properties_comment

    @property
    def similar_properties(self):
        """
        Gets the similar_properties of this SectionsPropertyPriceStudy.

        :return: The similar_properties of this SectionsPropertyPriceStudy.
        :rtype: list[ModelProperty]
        """
        return self._similar_properties

    @similar_properties.setter
    def similar_properties(self, similar_properties):
        """
        Sets the similar_properties of this SectionsPropertyPriceStudy.

        :param similar_properties: The similar_properties of this SectionsPropertyPriceStudy.
        :type: list[ModelProperty]
        """

        self._similar_properties = similar_properties

    @property
    def show_market_price(self):
        """
        Gets the show_market_price of this SectionsPropertyPriceStudy.

        :return: The show_market_price of this SectionsPropertyPriceStudy.
        :rtype: bool
        """
        return self._show_market_price

    @show_market_price.setter
    def show_market_price(self, show_market_price):
        """
        Sets the show_market_price of this SectionsPropertyPriceStudy.

        :param show_market_price: The show_market_price of this SectionsPropertyPriceStudy.
        :type: bool
        """

        self._show_market_price = show_market_price

    @property
    def estimated_price(self):
        """
        Gets the estimated_price of this SectionsPropertyPriceStudy.

        :return: The estimated_price of this SectionsPropertyPriceStudy.
        :rtype: float
        """
        return self._estimated_price

    @estimated_price.setter
    def estimated_price(self, estimated_price):
        """
        Sets the estimated_price of this SectionsPropertyPriceStudy.

        :param estimated_price: The estimated_price of this SectionsPropertyPriceStudy.
        :type: float
        """

        self._estimated_price = estimated_price

    @property
    def active_serie(self):
        """
        Gets the active_serie of this SectionsPropertyPriceStudy.

        :return: The active_serie of this SectionsPropertyPriceStudy.
        :rtype: bool
        """
        return self._active_serie

    @active_serie.setter
    def active_serie(self, active_serie):
        """
        Sets the active_serie of this SectionsPropertyPriceStudy.

        :param active_serie: The active_serie of this SectionsPropertyPriceStudy.
        :type: bool
        """

        self._active_serie = active_serie

    @property
    def expired_serie(self):
        """
        Gets the expired_serie of this SectionsPropertyPriceStudy.

        :return: The expired_serie of this SectionsPropertyPriceStudy.
        :rtype: bool
        """
        return self._expired_serie

    @expired_serie.setter
    def expired_serie(self, expired_serie):
        """
        Sets the expired_serie of this SectionsPropertyPriceStudy.

        :param expired_serie: The expired_serie of this SectionsPropertyPriceStudy.
        :type: bool
        """

        self._expired_serie = expired_serie

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SectionsPropertyPriceStudy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
