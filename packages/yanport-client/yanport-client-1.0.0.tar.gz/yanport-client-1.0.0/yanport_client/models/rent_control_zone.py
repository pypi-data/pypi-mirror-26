# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RentControlZone(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'observatory_id': 'int',
        'iris_quarter_ids': 'list[str]',
        'room_count_category': 'Range',
        'construction_period': 'Range',
        'furnished': 'bool',
        'median': 'float'
    }

    attribute_map = {
        'id': 'id',
        'observatory_id': 'observatoryId',
        'iris_quarter_ids': 'irisQuarterIds',
        'room_count_category': 'roomCountCategory',
        'construction_period': 'constructionPeriod',
        'furnished': 'furnished',
        'median': 'median'
    }

    def __init__(self, id=None, observatory_id=None, iris_quarter_ids=None, room_count_category=None, construction_period=None, furnished=None, median=None):
        """
        RentControlZone - a model defined in Swagger
        """

        self._id = None
        self._observatory_id = None
        self._iris_quarter_ids = None
        self._room_count_category = None
        self._construction_period = None
        self._furnished = None
        self._median = None

        if id is not None:
          self.id = id
        if observatory_id is not None:
          self.observatory_id = observatory_id
        if iris_quarter_ids is not None:
          self.iris_quarter_ids = iris_quarter_ids
        if room_count_category is not None:
          self.room_count_category = room_count_category
        if construction_period is not None:
          self.construction_period = construction_period
        if furnished is not None:
          self.furnished = furnished
        if median is not None:
          self.median = median

    @property
    def id(self):
        """
        Gets the id of this RentControlZone.

        :return: The id of this RentControlZone.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RentControlZone.

        :param id: The id of this RentControlZone.
        :type: int
        """

        self._id = id

    @property
    def observatory_id(self):
        """
        Gets the observatory_id of this RentControlZone.

        :return: The observatory_id of this RentControlZone.
        :rtype: int
        """
        return self._observatory_id

    @observatory_id.setter
    def observatory_id(self, observatory_id):
        """
        Sets the observatory_id of this RentControlZone.

        :param observatory_id: The observatory_id of this RentControlZone.
        :type: int
        """

        self._observatory_id = observatory_id

    @property
    def iris_quarter_ids(self):
        """
        Gets the iris_quarter_ids of this RentControlZone.

        :return: The iris_quarter_ids of this RentControlZone.
        :rtype: list[str]
        """
        return self._iris_quarter_ids

    @iris_quarter_ids.setter
    def iris_quarter_ids(self, iris_quarter_ids):
        """
        Sets the iris_quarter_ids of this RentControlZone.

        :param iris_quarter_ids: The iris_quarter_ids of this RentControlZone.
        :type: list[str]
        """

        self._iris_quarter_ids = iris_quarter_ids

    @property
    def room_count_category(self):
        """
        Gets the room_count_category of this RentControlZone.

        :return: The room_count_category of this RentControlZone.
        :rtype: Range
        """
        return self._room_count_category

    @room_count_category.setter
    def room_count_category(self, room_count_category):
        """
        Sets the room_count_category of this RentControlZone.

        :param room_count_category: The room_count_category of this RentControlZone.
        :type: Range
        """

        self._room_count_category = room_count_category

    @property
    def construction_period(self):
        """
        Gets the construction_period of this RentControlZone.

        :return: The construction_period of this RentControlZone.
        :rtype: Range
        """
        return self._construction_period

    @construction_period.setter
    def construction_period(self, construction_period):
        """
        Sets the construction_period of this RentControlZone.

        :param construction_period: The construction_period of this RentControlZone.
        :type: Range
        """

        self._construction_period = construction_period

    @property
    def furnished(self):
        """
        Gets the furnished of this RentControlZone.

        :return: The furnished of this RentControlZone.
        :rtype: bool
        """
        return self._furnished

    @furnished.setter
    def furnished(self, furnished):
        """
        Sets the furnished of this RentControlZone.

        :param furnished: The furnished of this RentControlZone.
        :type: bool
        """

        self._furnished = furnished

    @property
    def median(self):
        """
        Gets the median of this RentControlZone.

        :return: The median of this RentControlZone.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """
        Sets the median of this RentControlZone.

        :param median: The median of this RentControlZone.
        :type: float
        """

        self._median = median

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RentControlZone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
