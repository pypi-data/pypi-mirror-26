# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PropertyFeatures(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'descriptive': 'PropertyFeaturesDescriptive',
        'visual': 'PropertyFeaturesVisual',
        'geometry': 'PropertyFeaturesGeometry',
        'construction': 'PropertyFeaturesConstruction',
        'energy': 'PropertyFeaturesEnergy',
        'condominium': 'PropertyFeaturesCondominium',
        'additional_features': 'list[PropertyFeaturesAdditionalFeatures]'
    }

    attribute_map = {
        'descriptive': 'descriptive',
        'visual': 'visual',
        'geometry': 'geometry',
        'construction': 'construction',
        'energy': 'energy',
        'condominium': 'condominium',
        'additional_features': 'additionalFeatures'
    }

    def __init__(self, descriptive=None, visual=None, geometry=None, construction=None, energy=None, condominium=None, additional_features=None):
        """
        PropertyFeatures - a model defined in Swagger
        """

        self._descriptive = None
        self._visual = None
        self._geometry = None
        self._construction = None
        self._energy = None
        self._condominium = None
        self._additional_features = None

        if descriptive is not None:
          self.descriptive = descriptive
        if visual is not None:
          self.visual = visual
        if geometry is not None:
          self.geometry = geometry
        if construction is not None:
          self.construction = construction
        if energy is not None:
          self.energy = energy
        if condominium is not None:
          self.condominium = condominium
        if additional_features is not None:
          self.additional_features = additional_features

    @property
    def descriptive(self):
        """
        Gets the descriptive of this PropertyFeatures.

        :return: The descriptive of this PropertyFeatures.
        :rtype: PropertyFeaturesDescriptive
        """
        return self._descriptive

    @descriptive.setter
    def descriptive(self, descriptive):
        """
        Sets the descriptive of this PropertyFeatures.

        :param descriptive: The descriptive of this PropertyFeatures.
        :type: PropertyFeaturesDescriptive
        """

        self._descriptive = descriptive

    @property
    def visual(self):
        """
        Gets the visual of this PropertyFeatures.

        :return: The visual of this PropertyFeatures.
        :rtype: PropertyFeaturesVisual
        """
        return self._visual

    @visual.setter
    def visual(self, visual):
        """
        Sets the visual of this PropertyFeatures.

        :param visual: The visual of this PropertyFeatures.
        :type: PropertyFeaturesVisual
        """

        self._visual = visual

    @property
    def geometry(self):
        """
        Gets the geometry of this PropertyFeatures.

        :return: The geometry of this PropertyFeatures.
        :rtype: PropertyFeaturesGeometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """
        Sets the geometry of this PropertyFeatures.

        :param geometry: The geometry of this PropertyFeatures.
        :type: PropertyFeaturesGeometry
        """

        self._geometry = geometry

    @property
    def construction(self):
        """
        Gets the construction of this PropertyFeatures.

        :return: The construction of this PropertyFeatures.
        :rtype: PropertyFeaturesConstruction
        """
        return self._construction

    @construction.setter
    def construction(self, construction):
        """
        Sets the construction of this PropertyFeatures.

        :param construction: The construction of this PropertyFeatures.
        :type: PropertyFeaturesConstruction
        """

        self._construction = construction

    @property
    def energy(self):
        """
        Gets the energy of this PropertyFeatures.

        :return: The energy of this PropertyFeatures.
        :rtype: PropertyFeaturesEnergy
        """
        return self._energy

    @energy.setter
    def energy(self, energy):
        """
        Sets the energy of this PropertyFeatures.

        :param energy: The energy of this PropertyFeatures.
        :type: PropertyFeaturesEnergy
        """

        self._energy = energy

    @property
    def condominium(self):
        """
        Gets the condominium of this PropertyFeatures.

        :return: The condominium of this PropertyFeatures.
        :rtype: PropertyFeaturesCondominium
        """
        return self._condominium

    @condominium.setter
    def condominium(self, condominium):
        """
        Sets the condominium of this PropertyFeatures.

        :param condominium: The condominium of this PropertyFeatures.
        :type: PropertyFeaturesCondominium
        """

        self._condominium = condominium

    @property
    def additional_features(self):
        """
        Gets the additional_features of this PropertyFeatures.

        :return: The additional_features of this PropertyFeatures.
        :rtype: list[PropertyFeaturesAdditionalFeatures]
        """
        return self._additional_features

    @additional_features.setter
    def additional_features(self, additional_features):
        """
        Sets the additional_features of this PropertyFeatures.

        :param additional_features: The additional_features of this PropertyFeatures.
        :type: list[PropertyFeaturesAdditionalFeatures]
        """

        self._additional_features = additional_features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PropertyFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
