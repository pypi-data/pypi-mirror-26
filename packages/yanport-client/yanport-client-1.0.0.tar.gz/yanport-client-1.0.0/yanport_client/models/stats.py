# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Stats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'min': 'float',
        'max': 'float',
        'avg': 'float',
        'sum': 'float'
    }

    attribute_map = {
        'count': 'count',
        'min': 'min',
        'max': 'max',
        'avg': 'avg',
        'sum': 'sum'
    }

    def __init__(self, count=None, min=None, max=None, avg=None, sum=None):
        """
        Stats - a model defined in Swagger
        """

        self._count = None
        self._min = None
        self._max = None
        self._avg = None
        self._sum = None

        if count is not None:
          self.count = count
        if min is not None:
          self.min = min
        if max is not None:
          self.max = max
        if avg is not None:
          self.avg = avg
        if sum is not None:
          self.sum = sum

    @property
    def count(self):
        """
        Gets the count of this Stats.

        :return: The count of this Stats.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this Stats.

        :param count: The count of this Stats.
        :type: int
        """
        if count is not None and count < 0:
            raise ValueError("Invalid value for `count`, must be a value greater than or equal to `0`")

        self._count = count

    @property
    def min(self):
        """
        Gets the min of this Stats.

        :return: The min of this Stats.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this Stats.

        :param min: The min of this Stats.
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """
        Gets the max of this Stats.

        :return: The max of this Stats.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this Stats.

        :param max: The max of this Stats.
        :type: float
        """

        self._max = max

    @property
    def avg(self):
        """
        Gets the avg of this Stats.

        :return: The avg of this Stats.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """
        Sets the avg of this Stats.

        :param avg: The avg of this Stats.
        :type: float
        """

        self._avg = avg

    @property
    def sum(self):
        """
        Gets the sum of this Stats.

        :return: The sum of this Stats.
        :rtype: float
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """
        Sets the sum of this Stats.

        :param sum: The sum of this Stats.
        :type: float
        """
        if sum is not None and sum < 0:
            raise ValueError("Invalid value for `sum`, must be a value greater than or equal to `0`")

        self._sum = sum

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Stats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
