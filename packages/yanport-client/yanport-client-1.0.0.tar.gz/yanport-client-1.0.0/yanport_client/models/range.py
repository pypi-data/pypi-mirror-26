# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Range(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lower_endpoint': 'int',
        'lower_bound_type': 'BoundType',
        'upper_endpoint': 'int',
        'upper_bound_type': 'BoundType'
    }

    attribute_map = {
        'lower_endpoint': 'lowerEndpoint',
        'lower_bound_type': 'lowerBoundType',
        'upper_endpoint': 'upperEndpoint',
        'upper_bound_type': 'upperBoundType'
    }

    def __init__(self, lower_endpoint=None, lower_bound_type=None, upper_endpoint=None, upper_bound_type=None):
        """
        Range - a model defined in Swagger
        """

        self._lower_endpoint = None
        self._lower_bound_type = None
        self._upper_endpoint = None
        self._upper_bound_type = None

        if lower_endpoint is not None:
          self.lower_endpoint = lower_endpoint
        if lower_bound_type is not None:
          self.lower_bound_type = lower_bound_type
        if upper_endpoint is not None:
          self.upper_endpoint = upper_endpoint
        if upper_bound_type is not None:
          self.upper_bound_type = upper_bound_type

    @property
    def lower_endpoint(self):
        """
        Gets the lower_endpoint of this Range.

        :return: The lower_endpoint of this Range.
        :rtype: int
        """
        return self._lower_endpoint

    @lower_endpoint.setter
    def lower_endpoint(self, lower_endpoint):
        """
        Sets the lower_endpoint of this Range.

        :param lower_endpoint: The lower_endpoint of this Range.
        :type: int
        """

        self._lower_endpoint = lower_endpoint

    @property
    def lower_bound_type(self):
        """
        Gets the lower_bound_type of this Range.

        :return: The lower_bound_type of this Range.
        :rtype: BoundType
        """
        return self._lower_bound_type

    @lower_bound_type.setter
    def lower_bound_type(self, lower_bound_type):
        """
        Sets the lower_bound_type of this Range.

        :param lower_bound_type: The lower_bound_type of this Range.
        :type: BoundType
        """

        self._lower_bound_type = lower_bound_type

    @property
    def upper_endpoint(self):
        """
        Gets the upper_endpoint of this Range.

        :return: The upper_endpoint of this Range.
        :rtype: int
        """
        return self._upper_endpoint

    @upper_endpoint.setter
    def upper_endpoint(self, upper_endpoint):
        """
        Sets the upper_endpoint of this Range.

        :param upper_endpoint: The upper_endpoint of this Range.
        :type: int
        """

        self._upper_endpoint = upper_endpoint

    @property
    def upper_bound_type(self):
        """
        Gets the upper_bound_type of this Range.

        :return: The upper_bound_type of this Range.
        :rtype: BoundType
        """
        return self._upper_bound_type

    @upper_bound_type.setter
    def upper_bound_type(self, upper_bound_type):
        """
        Sets the upper_bound_type of this Range.

        :param upper_bound_type: The upper_bound_type of this Range.
        :type: BoundType
        """

        self._upper_bound_type = upper_bound_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Range):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
