# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RentControlResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'RentControlStatus',
        'address': 'Address',
        'construction_period': 'Range',
        'irish_quarter': 'IrisQuarter',
        'zones': 'RentControlZone',
        'buildings': 'Building'
    }

    attribute_map = {
        'status': 'status',
        'address': 'address',
        'construction_period': 'constructionPeriod',
        'irish_quarter': 'irishQuarter',
        'zones': 'zones',
        'buildings': 'buildings'
    }

    def __init__(self, status=None, address=None, construction_period=None, irish_quarter=None, zones=None, buildings=None):
        """
        RentControlResult - a model defined in Swagger
        """

        self._status = None
        self._address = None
        self._construction_period = None
        self._irish_quarter = None
        self._zones = None
        self._buildings = None

        if status is not None:
          self.status = status
        if address is not None:
          self.address = address
        if construction_period is not None:
          self.construction_period = construction_period
        if irish_quarter is not None:
          self.irish_quarter = irish_quarter
        if zones is not None:
          self.zones = zones
        if buildings is not None:
          self.buildings = buildings

    @property
    def status(self):
        """
        Gets the status of this RentControlResult.

        :return: The status of this RentControlResult.
        :rtype: RentControlStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RentControlResult.

        :param status: The status of this RentControlResult.
        :type: RentControlStatus
        """

        self._status = status

    @property
    def address(self):
        """
        Gets the address of this RentControlResult.

        :return: The address of this RentControlResult.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this RentControlResult.

        :param address: The address of this RentControlResult.
        :type: Address
        """

        self._address = address

    @property
    def construction_period(self):
        """
        Gets the construction_period of this RentControlResult.

        :return: The construction_period of this RentControlResult.
        :rtype: Range
        """
        return self._construction_period

    @construction_period.setter
    def construction_period(self, construction_period):
        """
        Sets the construction_period of this RentControlResult.

        :param construction_period: The construction_period of this RentControlResult.
        :type: Range
        """

        self._construction_period = construction_period

    @property
    def irish_quarter(self):
        """
        Gets the irish_quarter of this RentControlResult.

        :return: The irish_quarter of this RentControlResult.
        :rtype: IrisQuarter
        """
        return self._irish_quarter

    @irish_quarter.setter
    def irish_quarter(self, irish_quarter):
        """
        Sets the irish_quarter of this RentControlResult.

        :param irish_quarter: The irish_quarter of this RentControlResult.
        :type: IrisQuarter
        """

        self._irish_quarter = irish_quarter

    @property
    def zones(self):
        """
        Gets the zones of this RentControlResult.

        :return: The zones of this RentControlResult.
        :rtype: RentControlZone
        """
        return self._zones

    @zones.setter
    def zones(self, zones):
        """
        Sets the zones of this RentControlResult.

        :param zones: The zones of this RentControlResult.
        :type: RentControlZone
        """

        self._zones = zones

    @property
    def buildings(self):
        """
        Gets the buildings of this RentControlResult.

        :return: The buildings of this RentControlResult.
        :rtype: Building
        """
        return self._buildings

    @buildings.setter
    def buildings(self, buildings):
        """
        Sets the buildings of this RentControlResult.

        :param buildings: The buildings of this RentControlResult.
        :type: Building
        """

        self._buildings = buildings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RentControlResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
