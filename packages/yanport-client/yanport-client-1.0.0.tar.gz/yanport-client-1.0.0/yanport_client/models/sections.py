# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Sections(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'estimation_engine': 'SectionsEstimationEngine',
        'market_stats': 'SectionsMarketStats',
        'similar_properties': 'SectionsSimilarProperties',
        'property_price_study': 'SectionsPropertyPriceStudy',
        'conclusion': 'SectionsConclusion'
    }

    attribute_map = {
        'estimation_engine': 'estimationEngine',
        'market_stats': 'marketStats',
        'similar_properties': 'similarProperties',
        'property_price_study': 'propertyPriceStudy',
        'conclusion': 'conclusion'
    }

    def __init__(self, estimation_engine=None, market_stats=None, similar_properties=None, property_price_study=None, conclusion=None):
        """
        Sections - a model defined in Swagger
        """

        self._estimation_engine = None
        self._market_stats = None
        self._similar_properties = None
        self._property_price_study = None
        self._conclusion = None

        if estimation_engine is not None:
          self.estimation_engine = estimation_engine
        if market_stats is not None:
          self.market_stats = market_stats
        if similar_properties is not None:
          self.similar_properties = similar_properties
        if property_price_study is not None:
          self.property_price_study = property_price_study
        if conclusion is not None:
          self.conclusion = conclusion

    @property
    def estimation_engine(self):
        """
        Gets the estimation_engine of this Sections.

        :return: The estimation_engine of this Sections.
        :rtype: SectionsEstimationEngine
        """
        return self._estimation_engine

    @estimation_engine.setter
    def estimation_engine(self, estimation_engine):
        """
        Sets the estimation_engine of this Sections.

        :param estimation_engine: The estimation_engine of this Sections.
        :type: SectionsEstimationEngine
        """

        self._estimation_engine = estimation_engine

    @property
    def market_stats(self):
        """
        Gets the market_stats of this Sections.

        :return: The market_stats of this Sections.
        :rtype: SectionsMarketStats
        """
        return self._market_stats

    @market_stats.setter
    def market_stats(self, market_stats):
        """
        Sets the market_stats of this Sections.

        :param market_stats: The market_stats of this Sections.
        :type: SectionsMarketStats
        """

        self._market_stats = market_stats

    @property
    def similar_properties(self):
        """
        Gets the similar_properties of this Sections.

        :return: The similar_properties of this Sections.
        :rtype: SectionsSimilarProperties
        """
        return self._similar_properties

    @similar_properties.setter
    def similar_properties(self, similar_properties):
        """
        Sets the similar_properties of this Sections.

        :param similar_properties: The similar_properties of this Sections.
        :type: SectionsSimilarProperties
        """

        self._similar_properties = similar_properties

    @property
    def property_price_study(self):
        """
        Gets the property_price_study of this Sections.

        :return: The property_price_study of this Sections.
        :rtype: SectionsPropertyPriceStudy
        """
        return self._property_price_study

    @property_price_study.setter
    def property_price_study(self, property_price_study):
        """
        Sets the property_price_study of this Sections.

        :param property_price_study: The property_price_study of this Sections.
        :type: SectionsPropertyPriceStudy
        """

        self._property_price_study = property_price_study

    @property
    def conclusion(self):
        """
        Gets the conclusion of this Sections.

        :return: The conclusion of this Sections.
        :rtype: SectionsConclusion
        """
        return self._conclusion

    @conclusion.setter
    def conclusion(self, conclusion):
        """
        Sets the conclusion of this Sections.

        :param conclusion: The conclusion of this Sections.
        :type: SectionsConclusion
        """

        self._conclusion = conclusion

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Sections):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
