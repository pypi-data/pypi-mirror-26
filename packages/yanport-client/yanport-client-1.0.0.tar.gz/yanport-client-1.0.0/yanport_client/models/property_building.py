# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PropertyBuilding(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'floor_count': 'int',
        'construction_year': 'int',
        'construction_materials': 'str',
        'general_state': 'State',
        'common_area_state': 'State',
        'facade_state': 'State',
        'elevator': 'bool',
        'caretaker': 'bool',
        'digicode': 'bool',
        'intercom': 'bool',
        'adsl': 'bool',
        'cable': 'bool',
        'fiber': 'bool',
        'disable_access': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'floor_count': 'floorCount',
        'construction_year': 'constructionYear',
        'construction_materials': 'constructionMaterials',
        'general_state': 'generalState',
        'common_area_state': 'commonAreaState',
        'facade_state': 'facadeState',
        'elevator': 'elevator',
        'caretaker': 'caretaker',
        'digicode': 'digicode',
        'intercom': 'intercom',
        'adsl': 'adsl',
        'cable': 'cable',
        'fiber': 'fiber',
        'disable_access': 'disableAccess'
    }

    def __init__(self, type=None, floor_count=None, construction_year=None, construction_materials=None, general_state=None, common_area_state=None, facade_state=None, elevator=None, caretaker=None, digicode=None, intercom=None, adsl=None, cable=None, fiber=None, disable_access=None):
        """
        PropertyBuilding - a model defined in Swagger
        """

        self._type = None
        self._floor_count = None
        self._construction_year = None
        self._construction_materials = None
        self._general_state = None
        self._common_area_state = None
        self._facade_state = None
        self._elevator = None
        self._caretaker = None
        self._digicode = None
        self._intercom = None
        self._adsl = None
        self._cable = None
        self._fiber = None
        self._disable_access = None

        if type is not None:
          self.type = type
        if floor_count is not None:
          self.floor_count = floor_count
        if construction_year is not None:
          self.construction_year = construction_year
        if construction_materials is not None:
          self.construction_materials = construction_materials
        if general_state is not None:
          self.general_state = general_state
        if common_area_state is not None:
          self.common_area_state = common_area_state
        if facade_state is not None:
          self.facade_state = facade_state
        if elevator is not None:
          self.elevator = elevator
        if caretaker is not None:
          self.caretaker = caretaker
        if digicode is not None:
          self.digicode = digicode
        if intercom is not None:
          self.intercom = intercom
        if adsl is not None:
          self.adsl = adsl
        if cable is not None:
          self.cable = cable
        if fiber is not None:
          self.fiber = fiber
        if disable_access is not None:
          self.disable_access = disable_access

    @property
    def type(self):
        """
        Gets the type of this PropertyBuilding.

        :return: The type of this PropertyBuilding.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PropertyBuilding.

        :param type: The type of this PropertyBuilding.
        :type: str
        """
        if type is not None and len(type) > 200:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `200`")

        self._type = type

    @property
    def floor_count(self):
        """
        Gets the floor_count of this PropertyBuilding.

        :return: The floor_count of this PropertyBuilding.
        :rtype: int
        """
        return self._floor_count

    @floor_count.setter
    def floor_count(self, floor_count):
        """
        Sets the floor_count of this PropertyBuilding.

        :param floor_count: The floor_count of this PropertyBuilding.
        :type: int
        """
        if floor_count is not None and floor_count > 100:
            raise ValueError("Invalid value for `floor_count`, must be a value less than or equal to `100`")
        if floor_count is not None and floor_count < 0:
            raise ValueError("Invalid value for `floor_count`, must be a value greater than or equal to `0`")

        self._floor_count = floor_count

    @property
    def construction_year(self):
        """
        Gets the construction_year of this PropertyBuilding.

        :return: The construction_year of this PropertyBuilding.
        :rtype: int
        """
        return self._construction_year

    @construction_year.setter
    def construction_year(self, construction_year):
        """
        Sets the construction_year of this PropertyBuilding.

        :param construction_year: The construction_year of this PropertyBuilding.
        :type: int
        """
        if construction_year is not None and construction_year > 3000:
            raise ValueError("Invalid value for `construction_year`, must be a value less than or equal to `3000`")
        if construction_year is not None and construction_year < 1000:
            raise ValueError("Invalid value for `construction_year`, must be a value greater than or equal to `1000`")

        self._construction_year = construction_year

    @property
    def construction_materials(self):
        """
        Gets the construction_materials of this PropertyBuilding.

        :return: The construction_materials of this PropertyBuilding.
        :rtype: str
        """
        return self._construction_materials

    @construction_materials.setter
    def construction_materials(self, construction_materials):
        """
        Sets the construction_materials of this PropertyBuilding.

        :param construction_materials: The construction_materials of this PropertyBuilding.
        :type: str
        """
        if construction_materials is not None and len(construction_materials) > 1000:
            raise ValueError("Invalid value for `construction_materials`, length must be less than or equal to `1000`")

        self._construction_materials = construction_materials

    @property
    def general_state(self):
        """
        Gets the general_state of this PropertyBuilding.

        :return: The general_state of this PropertyBuilding.
        :rtype: State
        """
        return self._general_state

    @general_state.setter
    def general_state(self, general_state):
        """
        Sets the general_state of this PropertyBuilding.

        :param general_state: The general_state of this PropertyBuilding.
        :type: State
        """

        self._general_state = general_state

    @property
    def common_area_state(self):
        """
        Gets the common_area_state of this PropertyBuilding.

        :return: The common_area_state of this PropertyBuilding.
        :rtype: State
        """
        return self._common_area_state

    @common_area_state.setter
    def common_area_state(self, common_area_state):
        """
        Sets the common_area_state of this PropertyBuilding.

        :param common_area_state: The common_area_state of this PropertyBuilding.
        :type: State
        """

        self._common_area_state = common_area_state

    @property
    def facade_state(self):
        """
        Gets the facade_state of this PropertyBuilding.

        :return: The facade_state of this PropertyBuilding.
        :rtype: State
        """
        return self._facade_state

    @facade_state.setter
    def facade_state(self, facade_state):
        """
        Sets the facade_state of this PropertyBuilding.

        :param facade_state: The facade_state of this PropertyBuilding.
        :type: State
        """

        self._facade_state = facade_state

    @property
    def elevator(self):
        """
        Gets the elevator of this PropertyBuilding.

        :return: The elevator of this PropertyBuilding.
        :rtype: bool
        """
        return self._elevator

    @elevator.setter
    def elevator(self, elevator):
        """
        Sets the elevator of this PropertyBuilding.

        :param elevator: The elevator of this PropertyBuilding.
        :type: bool
        """

        self._elevator = elevator

    @property
    def caretaker(self):
        """
        Gets the caretaker of this PropertyBuilding.

        :return: The caretaker of this PropertyBuilding.
        :rtype: bool
        """
        return self._caretaker

    @caretaker.setter
    def caretaker(self, caretaker):
        """
        Sets the caretaker of this PropertyBuilding.

        :param caretaker: The caretaker of this PropertyBuilding.
        :type: bool
        """

        self._caretaker = caretaker

    @property
    def digicode(self):
        """
        Gets the digicode of this PropertyBuilding.

        :return: The digicode of this PropertyBuilding.
        :rtype: bool
        """
        return self._digicode

    @digicode.setter
    def digicode(self, digicode):
        """
        Sets the digicode of this PropertyBuilding.

        :param digicode: The digicode of this PropertyBuilding.
        :type: bool
        """

        self._digicode = digicode

    @property
    def intercom(self):
        """
        Gets the intercom of this PropertyBuilding.

        :return: The intercom of this PropertyBuilding.
        :rtype: bool
        """
        return self._intercom

    @intercom.setter
    def intercom(self, intercom):
        """
        Sets the intercom of this PropertyBuilding.

        :param intercom: The intercom of this PropertyBuilding.
        :type: bool
        """

        self._intercom = intercom

    @property
    def adsl(self):
        """
        Gets the adsl of this PropertyBuilding.

        :return: The adsl of this PropertyBuilding.
        :rtype: bool
        """
        return self._adsl

    @adsl.setter
    def adsl(self, adsl):
        """
        Sets the adsl of this PropertyBuilding.

        :param adsl: The adsl of this PropertyBuilding.
        :type: bool
        """

        self._adsl = adsl

    @property
    def cable(self):
        """
        Gets the cable of this PropertyBuilding.

        :return: The cable of this PropertyBuilding.
        :rtype: bool
        """
        return self._cable

    @cable.setter
    def cable(self, cable):
        """
        Sets the cable of this PropertyBuilding.

        :param cable: The cable of this PropertyBuilding.
        :type: bool
        """

        self._cable = cable

    @property
    def fiber(self):
        """
        Gets the fiber of this PropertyBuilding.

        :return: The fiber of this PropertyBuilding.
        :rtype: bool
        """
        return self._fiber

    @fiber.setter
    def fiber(self, fiber):
        """
        Sets the fiber of this PropertyBuilding.

        :param fiber: The fiber of this PropertyBuilding.
        :type: bool
        """

        self._fiber = fiber

    @property
    def disable_access(self):
        """
        Gets the disable_access of this PropertyBuilding.

        :return: The disable_access of this PropertyBuilding.
        :rtype: bool
        """
        return self._disable_access

    @disable_access.setter
    def disable_access(self, disable_access):
        """
        Sets the disable_access of this PropertyBuilding.

        :param disable_access: The disable_access of this PropertyBuilding.
        :type: bool
        """

        self._disable_access = disable_access

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PropertyBuilding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
