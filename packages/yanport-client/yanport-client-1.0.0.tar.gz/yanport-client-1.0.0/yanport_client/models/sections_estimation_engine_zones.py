# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SectionsEstimationEngineZones(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'price_m2_percentiles': 'Percentiles',
        'price_m2_distribution': 'DateHistogram',
        'bounding_boxes': 'list[LngLat]'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'price_m2_percentiles': 'priceM2Percentiles',
        'price_m2_distribution': 'priceM2Distribution',
        'bounding_boxes': 'boundingBoxes'
    }

    def __init__(self, type=None, name=None, price_m2_percentiles=None, price_m2_distribution=None, bounding_boxes=None):
        """
        SectionsEstimationEngineZones - a model defined in Swagger
        """

        self._type = None
        self._name = None
        self._price_m2_percentiles = None
        self._price_m2_distribution = None
        self._bounding_boxes = None

        if type is not None:
          self.type = type
        if name is not None:
          self.name = name
        if price_m2_percentiles is not None:
          self.price_m2_percentiles = price_m2_percentiles
        if price_m2_distribution is not None:
          self.price_m2_distribution = price_m2_distribution
        if bounding_boxes is not None:
          self.bounding_boxes = bounding_boxes

    @property
    def type(self):
        """
        Gets the type of this SectionsEstimationEngineZones.

        :return: The type of this SectionsEstimationEngineZones.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SectionsEstimationEngineZones.

        :param type: The type of this SectionsEstimationEngineZones.
        :type: str
        """
        allowed_values = ["DISTRICT", "CITY", "DEPARTMENT", "REGION", "UNKNOWN"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """
        Gets the name of this SectionsEstimationEngineZones.

        :return: The name of this SectionsEstimationEngineZones.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SectionsEstimationEngineZones.

        :param name: The name of this SectionsEstimationEngineZones.
        :type: str
        """

        self._name = name

    @property
    def price_m2_percentiles(self):
        """
        Gets the price_m2_percentiles of this SectionsEstimationEngineZones.

        :return: The price_m2_percentiles of this SectionsEstimationEngineZones.
        :rtype: Percentiles
        """
        return self._price_m2_percentiles

    @price_m2_percentiles.setter
    def price_m2_percentiles(self, price_m2_percentiles):
        """
        Sets the price_m2_percentiles of this SectionsEstimationEngineZones.

        :param price_m2_percentiles: The price_m2_percentiles of this SectionsEstimationEngineZones.
        :type: Percentiles
        """

        self._price_m2_percentiles = price_m2_percentiles

    @property
    def price_m2_distribution(self):
        """
        Gets the price_m2_distribution of this SectionsEstimationEngineZones.

        :return: The price_m2_distribution of this SectionsEstimationEngineZones.
        :rtype: DateHistogram
        """
        return self._price_m2_distribution

    @price_m2_distribution.setter
    def price_m2_distribution(self, price_m2_distribution):
        """
        Sets the price_m2_distribution of this SectionsEstimationEngineZones.

        :param price_m2_distribution: The price_m2_distribution of this SectionsEstimationEngineZones.
        :type: DateHistogram
        """

        self._price_m2_distribution = price_m2_distribution

    @property
    def bounding_boxes(self):
        """
        Gets the bounding_boxes of this SectionsEstimationEngineZones.

        :return: The bounding_boxes of this SectionsEstimationEngineZones.
        :rtype: list[LngLat]
        """
        return self._bounding_boxes

    @bounding_boxes.setter
    def bounding_boxes(self, bounding_boxes):
        """
        Sets the bounding_boxes of this SectionsEstimationEngineZones.

        :param bounding_boxes: The bounding_boxes of this SectionsEstimationEngineZones.
        :type: list[LngLat]
        """

        self._bounding_boxes = bounding_boxes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SectionsEstimationEngineZones):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
