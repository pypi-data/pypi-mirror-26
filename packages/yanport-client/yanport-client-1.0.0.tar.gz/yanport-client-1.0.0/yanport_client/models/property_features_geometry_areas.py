# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PropertyFeaturesGeometryAreas(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'surface': 'float',
        'kitchen_type': 'str',
        'kitchen_equipments': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'surface': 'surface',
        'kitchen_type': 'kitchenType',
        'kitchen_equipments': 'kitchenEquipments'
    }

    def __init__(self, type=None, surface=None, kitchen_type=None, kitchen_equipments=None):
        """
        PropertyFeaturesGeometryAreas - a model defined in Swagger
        """

        self._type = None
        self._surface = None
        self._kitchen_type = None
        self._kitchen_equipments = None

        if type is not None:
          self.type = type
        if surface is not None:
          self.surface = surface
        if kitchen_type is not None:
          self.kitchen_type = kitchen_type
        if kitchen_equipments is not None:
          self.kitchen_equipments = kitchen_equipments

    @property
    def type(self):
        """
        Gets the type of this PropertyFeaturesGeometryAreas.

        :return: The type of this PropertyFeaturesGeometryAreas.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PropertyFeaturesGeometryAreas.

        :param type: The type of this PropertyFeaturesGeometryAreas.
        :type: str
        """
        allowed_values = ["BATHROOM", "SHOWER_ROOM", "BEDROOM", "LUNCHROOM", "LIVING_ROOM", "CELLAR", "KITCHEN", "TOILET", "BALCONY", "GARDEN", "PARKING", "SWIMMING_POOL", "TERRACE", "OTHER"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def surface(self):
        """
        Gets the surface of this PropertyFeaturesGeometryAreas.

        :return: The surface of this PropertyFeaturesGeometryAreas.
        :rtype: float
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """
        Sets the surface of this PropertyFeaturesGeometryAreas.

        :param surface: The surface of this PropertyFeaturesGeometryAreas.
        :type: float
        """

        self._surface = surface

    @property
    def kitchen_type(self):
        """
        Gets the kitchen_type of this PropertyFeaturesGeometryAreas.

        :return: The kitchen_type of this PropertyFeaturesGeometryAreas.
        :rtype: str
        """
        return self._kitchen_type

    @kitchen_type.setter
    def kitchen_type(self, kitchen_type):
        """
        Sets the kitchen_type of this PropertyFeaturesGeometryAreas.

        :param kitchen_type: The kitchen_type of this PropertyFeaturesGeometryAreas.
        :type: str
        """
        allowed_values = ["OPENED", "CLOSED", "KITCHENETTE"]
        if kitchen_type not in allowed_values:
            raise ValueError(
                "Invalid value for `kitchen_type` ({0}), must be one of {1}"
                .format(kitchen_type, allowed_values)
            )

        self._kitchen_type = kitchen_type

    @property
    def kitchen_equipments(self):
        """
        Gets the kitchen_equipments of this PropertyFeaturesGeometryAreas.

        :return: The kitchen_equipments of this PropertyFeaturesGeometryAreas.
        :rtype: list[str]
        """
        return self._kitchen_equipments

    @kitchen_equipments.setter
    def kitchen_equipments(self, kitchen_equipments):
        """
        Sets the kitchen_equipments of this PropertyFeaturesGeometryAreas.

        :param kitchen_equipments: The kitchen_equipments of this PropertyFeaturesGeometryAreas.
        :type: list[str]
        """
        allowed_values = ["FITTED", "EQUIPPED", "NONE"]
        if not set(kitchen_equipments).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `kitchen_equipments` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(kitchen_equipments)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._kitchen_equipments = kitchen_equipments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PropertyFeaturesGeometryAreas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
