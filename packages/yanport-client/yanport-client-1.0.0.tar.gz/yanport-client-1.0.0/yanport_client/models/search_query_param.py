# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SearchQueryParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'int',
        'size': 'int',
        'sort': 'str',
        'includes': 'list[str]',
        'excludes': 'list[str]'
    }

    attribute_map = {
        '_from': 'from',
        'size': 'size',
        'sort': 'sort',
        'includes': 'includes',
        'excludes': 'excludes'
    }

    def __init__(self, _from=None, size=None, sort=None, includes=None, excludes=None):
        """
        SearchQueryParam - a model defined in Swagger
        """

        self.__from = None
        self._size = None
        self._sort = None
        self._includes = None
        self._excludes = None

        if _from is not None:
          self._from = _from
        if size is not None:
          self.size = size
        if sort is not None:
          self.sort = sort
        if includes is not None:
          self.includes = includes
        if excludes is not None:
          self.excludes = excludes

    @property
    def _from(self):
        """
        Gets the _from of this SearchQueryParam.

        :return: The _from of this SearchQueryParam.
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this SearchQueryParam.

        :param _from: The _from of this SearchQueryParam.
        :type: int
        """
        if _from is not None and _from < 0:
            raise ValueError("Invalid value for `_from`, must be a value greater than or equal to `0`")

        self.__from = _from

    @property
    def size(self):
        """
        Gets the size of this SearchQueryParam.

        :return: The size of this SearchQueryParam.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this SearchQueryParam.

        :param size: The size of this SearchQueryParam.
        :type: int
        """
        if size is not None and size > 1000:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `1000`")

        self._size = size

    @property
    def sort(self):
        """
        Gets the sort of this SearchQueryParam.

        :return: The sort of this SearchQueryParam.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """
        Sets the sort of this SearchQueryParam.

        :param sort: The sort of this SearchQueryParam.
        :type: str
        """

        self._sort = sort

    @property
    def includes(self):
        """
        Gets the includes of this SearchQueryParam.

        :return: The includes of this SearchQueryParam.
        :rtype: list[str]
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """
        Sets the includes of this SearchQueryParam.

        :param includes: The includes of this SearchQueryParam.
        :type: list[str]
        """

        self._includes = includes

    @property
    def excludes(self):
        """
        Gets the excludes of this SearchQueryParam.

        :return: The excludes of this SearchQueryParam.
        :rtype: list[str]
        """
        return self._excludes

    @excludes.setter
    def excludes(self, excludes):
        """
        Sets the excludes of this SearchQueryParam.

        :param excludes: The excludes of this SearchQueryParam.
        :type: list[str]
        """

        self._excludes = excludes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SearchQueryParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
