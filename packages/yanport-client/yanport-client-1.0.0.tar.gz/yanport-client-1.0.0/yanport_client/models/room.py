# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Room(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_type': 'str',
        'surface': 'int',
        'wall_covering': 'str',
        'floor_covering': 'str',
        'general_state': 'State'
    }

    attribute_map = {
        'room_type': 'roomType',
        'surface': 'surface',
        'wall_covering': 'wallCovering',
        'floor_covering': 'floorCovering',
        'general_state': 'generalState'
    }

    def __init__(self, room_type=None, surface=None, wall_covering=None, floor_covering=None, general_state=None):
        """
        Room - a model defined in Swagger
        """

        self._room_type = None
        self._surface = None
        self._wall_covering = None
        self._floor_covering = None
        self._general_state = None

        if room_type is not None:
          self.room_type = room_type
        if surface is not None:
          self.surface = surface
        if wall_covering is not None:
          self.wall_covering = wall_covering
        if floor_covering is not None:
          self.floor_covering = floor_covering
        if general_state is not None:
          self.general_state = general_state

    @property
    def room_type(self):
        """
        Gets the room_type of this Room.

        :return: The room_type of this Room.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """
        Sets the room_type of this Room.

        :param room_type: The room_type of this Room.
        :type: str
        """
        if room_type is not None and len(room_type) > 200:
            raise ValueError("Invalid value for `room_type`, length must be less than or equal to `200`")

        self._room_type = room_type

    @property
    def surface(self):
        """
        Gets the surface of this Room.

        :return: The surface of this Room.
        :rtype: int
        """
        return self._surface

    @surface.setter
    def surface(self, surface):
        """
        Sets the surface of this Room.

        :param surface: The surface of this Room.
        :type: int
        """
        if surface is not None and surface > 1000:
            raise ValueError("Invalid value for `surface`, must be a value less than or equal to `1000`")
        if surface is not None and surface < 0:
            raise ValueError("Invalid value for `surface`, must be a value greater than or equal to `0`")

        self._surface = surface

    @property
    def wall_covering(self):
        """
        Gets the wall_covering of this Room.

        :return: The wall_covering of this Room.
        :rtype: str
        """
        return self._wall_covering

    @wall_covering.setter
    def wall_covering(self, wall_covering):
        """
        Sets the wall_covering of this Room.

        :param wall_covering: The wall_covering of this Room.
        :type: str
        """
        if wall_covering is not None and len(wall_covering) > 200:
            raise ValueError("Invalid value for `wall_covering`, length must be less than or equal to `200`")

        self._wall_covering = wall_covering

    @property
    def floor_covering(self):
        """
        Gets the floor_covering of this Room.

        :return: The floor_covering of this Room.
        :rtype: str
        """
        return self._floor_covering

    @floor_covering.setter
    def floor_covering(self, floor_covering):
        """
        Sets the floor_covering of this Room.

        :param floor_covering: The floor_covering of this Room.
        :type: str
        """
        if floor_covering is not None and len(floor_covering) > 200:
            raise ValueError("Invalid value for `floor_covering`, length must be less than or equal to `200`")

        self._floor_covering = floor_covering

    @property
    def general_state(self):
        """
        Gets the general_state of this Room.

        :return: The general_state of this Room.
        :rtype: State
        """
        return self._general_state

    @general_state.setter
    def general_state(self, general_state):
        """
        Sets the general_state of this Room.

        :param general_state: The general_state of this Room.
        :type: State
        """

        self._general_state = general_state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Room):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
