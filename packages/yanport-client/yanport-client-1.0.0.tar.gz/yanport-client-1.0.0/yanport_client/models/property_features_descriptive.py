# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PropertyFeaturesDescriptive(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'pros': 'list[str]',
        'cons': 'list[str]',
        'comments': 'str',
        'general_state': 'State',
        'services': 'PropertyFeaturesDescriptiveServices',
        'equipments': 'PropertyFeaturesDescriptiveEquipments'
    }

    attribute_map = {
        'description': 'description',
        'pros': 'pros',
        'cons': 'cons',
        'comments': 'comments',
        'general_state': 'generalState',
        'services': 'services',
        'equipments': 'equipments'
    }

    def __init__(self, description=None, pros=None, cons=None, comments=None, general_state=None, services=None, equipments=None):
        """
        PropertyFeaturesDescriptive - a model defined in Swagger
        """

        self._description = None
        self._pros = None
        self._cons = None
        self._comments = None
        self._general_state = None
        self._services = None
        self._equipments = None

        if description is not None:
          self.description = description
        if pros is not None:
          self.pros = pros
        if cons is not None:
          self.cons = cons
        if comments is not None:
          self.comments = comments
        if general_state is not None:
          self.general_state = general_state
        if services is not None:
          self.services = services
        if equipments is not None:
          self.equipments = equipments

    @property
    def description(self):
        """
        Gets the description of this PropertyFeaturesDescriptive.

        :return: The description of this PropertyFeaturesDescriptive.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PropertyFeaturesDescriptive.

        :param description: The description of this PropertyFeaturesDescriptive.
        :type: str
        """
        if description is not None and len(description) > 10000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `10000`")

        self._description = description

    @property
    def pros(self):
        """
        Gets the pros of this PropertyFeaturesDescriptive.

        :return: The pros of this PropertyFeaturesDescriptive.
        :rtype: list[str]
        """
        return self._pros

    @pros.setter
    def pros(self, pros):
        """
        Sets the pros of this PropertyFeaturesDescriptive.

        :param pros: The pros of this PropertyFeaturesDescriptive.
        :type: list[str]
        """

        self._pros = pros

    @property
    def cons(self):
        """
        Gets the cons of this PropertyFeaturesDescriptive.

        :return: The cons of this PropertyFeaturesDescriptive.
        :rtype: list[str]
        """
        return self._cons

    @cons.setter
    def cons(self, cons):
        """
        Sets the cons of this PropertyFeaturesDescriptive.

        :param cons: The cons of this PropertyFeaturesDescriptive.
        :type: list[str]
        """

        self._cons = cons

    @property
    def comments(self):
        """
        Gets the comments of this PropertyFeaturesDescriptive.

        :return: The comments of this PropertyFeaturesDescriptive.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """
        Sets the comments of this PropertyFeaturesDescriptive.

        :param comments: The comments of this PropertyFeaturesDescriptive.
        :type: str
        """
        if comments is not None and len(comments) > 2000:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `2000`")

        self._comments = comments

    @property
    def general_state(self):
        """
        Gets the general_state of this PropertyFeaturesDescriptive.

        :return: The general_state of this PropertyFeaturesDescriptive.
        :rtype: State
        """
        return self._general_state

    @general_state.setter
    def general_state(self, general_state):
        """
        Sets the general_state of this PropertyFeaturesDescriptive.

        :param general_state: The general_state of this PropertyFeaturesDescriptive.
        :type: State
        """

        self._general_state = general_state

    @property
    def services(self):
        """
        Gets the services of this PropertyFeaturesDescriptive.

        :return: The services of this PropertyFeaturesDescriptive.
        :rtype: PropertyFeaturesDescriptiveServices
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this PropertyFeaturesDescriptive.

        :param services: The services of this PropertyFeaturesDescriptive.
        :type: PropertyFeaturesDescriptiveServices
        """

        self._services = services

    @property
    def equipments(self):
        """
        Gets the equipments of this PropertyFeaturesDescriptive.

        :return: The equipments of this PropertyFeaturesDescriptive.
        :rtype: PropertyFeaturesDescriptiveEquipments
        """
        return self._equipments

    @equipments.setter
    def equipments(self, equipments):
        """
        Sets the equipments of this PropertyFeaturesDescriptive.

        :param equipments: The equipments of this PropertyFeaturesDescriptive.
        :type: PropertyFeaturesDescriptiveEquipments
        """

        self._equipments = equipments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PropertyFeaturesDescriptive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
