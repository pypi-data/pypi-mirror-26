# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BienssimilairesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def similar_properties_get(self, **kwargs):
        """
        Récuperer des biens similaires
        Retourne les biens similaires correspondants aux critères demandés.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.similar_properties_get_with_http_info(**kwargs)
        else:
            (data) = self.similar_properties_get_with_http_info(**kwargs)
            return data

    def similar_properties_get_with_http_info(self, **kwargs):
        """
        Récuperer des biens similaires
        Retourne les biens similaires correspondants aux critères demandés.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_doc_count', 'city_ids', 'marketing_types', 'property_types', 'price', 'surface', 'publication_date_min', 'active', 'room_count', '_from', 'size', 'sort', 'includes', 'excludes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method similar_properties_get" % key
                )
            params[key] = val
        del params['kwargs']

        if 'min_doc_count' in params and params['min_doc_count'] > 100:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_get`, must be a value less than or equal to `100`")
        if 'min_doc_count' in params and params['min_doc_count'] < 0:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_get`, must be a value greater than or equal to `0`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `similar_properties_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_doc_count' in params:
            query_params.append(('minDocCount', params['min_doc_count']))
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'price' in params:
            query_params.append(('price', params['price']))
        if 'surface' in params:
            query_params.append(('surface', params['surface']))
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'room_count' in params:
            query_params.append(('roomCount', params['room_count']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'includes' in params:
            query_params.append(('includes', params['includes']))
            collection_formats['includes'] = 'multi'
        if 'excludes' in params:
            query_params.append(('excludes', params['excludes']))
            collection_formats['excludes'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/similar-properties', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2003',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def similar_properties_percentiles_get(self, field, percentiles, **kwargs):
        """
        Indicateurs de références
        Permet de récupérer les indicateurs de références des biens similaires
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_percentiles_get(field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: Percentiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.similar_properties_percentiles_get_with_http_info(field, percentiles, **kwargs)
        else:
            (data) = self.similar_properties_percentiles_get_with_http_info(field, percentiles, **kwargs)
            return data

    def similar_properties_percentiles_get_with_http_info(self, field, percentiles, **kwargs):
        """
        Indicateurs de références
        Permet de récupérer les indicateurs de références des biens similaires
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_percentiles_get_with_http_info(field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: Percentiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'percentiles', 'min_doc_count', 'city_ids', 'marketing_types', 'property_types', 'price', 'surface', 'publication_date_min', 'active', 'room_count', '_from', 'size', 'sort', 'includes', 'excludes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method similar_properties_percentiles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `similar_properties_percentiles_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `similar_properties_percentiles_get`")

        if 'min_doc_count' in params and params['min_doc_count'] > 100:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_percentiles_get`, must be a value less than or equal to `100`")
        if 'min_doc_count' in params and params['min_doc_count'] < 0:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_percentiles_get`, must be a value greater than or equal to `0`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `similar_properties_percentiles_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_percentiles_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_percentiles_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_doc_count' in params:
            query_params.append(('minDocCount', params['min_doc_count']))
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'price' in params:
            query_params.append(('price', params['price']))
        if 'surface' in params:
            query_params.append(('surface', params['surface']))
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'room_count' in params:
            query_params.append(('roomCount', params['room_count']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'includes' in params:
            query_params.append(('includes', params['includes']))
            collection_formats['includes'] = 'multi'
        if 'excludes' in params:
            query_params.append(('excludes', params['excludes']))
            collection_formats['excludes'] = 'multi'
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/similar-properties/percentiles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Percentiles',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def similar_properties_query_get(self, **kwargs):
        """
        Paramètres optimaux
        Permet de récupérer les paramètres de requêtes optimaux pour avoir au minimum X biens similaires.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_query_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: PropertySearchQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.similar_properties_query_get_with_http_info(**kwargs)
        else:
            (data) = self.similar_properties_query_get_with_http_info(**kwargs)
            return data

    def similar_properties_query_get_with_http_info(self, **kwargs):
        """
        Paramètres optimaux
        Permet de récupérer les paramètres de requêtes optimaux pour avoir au minimum X biens similaires.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.similar_properties_query_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int min_doc_count: Le nombre minimum de documents a matcher
        :param list[int] city_ids: Liste d'identifiants de villes
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] property_types: Types de bien
        :param float price: Prix
        :param float surface: Surface
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param bool active: En cours de publication
        :param int room_count: Nombre de pièces
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param list[str] includes: Inclure un ou plusieurs élements par identifiant
        :param list[str] excludes: Exclure un ou plusieurs élements par identifiant
        :return: PropertySearchQuery
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['min_doc_count', 'city_ids', 'marketing_types', 'property_types', 'price', 'surface', 'publication_date_min', 'active', 'room_count', '_from', 'size', 'sort', 'includes', 'excludes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method similar_properties_query_get" % key
                )
            params[key] = val
        del params['kwargs']

        if 'min_doc_count' in params and params['min_doc_count'] > 100:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_query_get`, must be a value less than or equal to `100`")
        if 'min_doc_count' in params and params['min_doc_count'] < 0:
            raise ValueError("Invalid value for parameter `min_doc_count` when calling `similar_properties_query_get`, must be a value greater than or equal to `0`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `similar_properties_query_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_query_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `similar_properties_query_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'min_doc_count' in params:
            query_params.append(('minDocCount', params['min_doc_count']))
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'price' in params:
            query_params.append(('price', params['price']))
        if 'surface' in params:
            query_params.append(('surface', params['surface']))
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'room_count' in params:
            query_params.append(('roomCount', params['room_count']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'includes' in params:
            query_params.append(('includes', params['includes']))
            collection_formats['includes'] = 'multi'
        if 'excludes' in params:
            query_params.append(('excludes', params['excludes']))
            collection_formats['excludes'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/similar-properties/query', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PropertySearchQuery',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
