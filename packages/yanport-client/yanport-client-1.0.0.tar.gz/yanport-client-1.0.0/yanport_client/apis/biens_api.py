# coding: utf-8

"""
    Yanport API

    ## À propos Voici quelques ressources qui vous aideront à explorer notre API, si vous avez des problèmes ou des demandes, veuillez contacter le [support](mailto:support@yanport.com). ## REST API Nos services webs utilisent le protocle **HTTPS** sur le port 443, tout accès en HTTP sur le port 80 est bloqué par notre pare-feu. Les échanges de données sont réalisés en **JSON**. ## Authentification Avant de commencer à explorer notre API, vous devez nous [contacter](https://www.yanport.com/contact) afin d'obtenir un [JSON Web Token](https://jwt.io) (**JWT**) qui vous permettra de vous identifier à chaque requêtes. ### JWT (header) La méthode privilégiée pour s'authentifier est de passer à chaque requêtes le token dans le header `Authorization: Bearer {{ JWT }}` en remplaçant `{{ JWT }}` par votre token. ### JWT (query param) Il est aussi possible de passer le token directement en query param de la requête `https://api.yanport.com/?token={{ JWT }}`. (_privilégié le passage par header en production._) ## Pour démarrer Lorsque vous disposez de votre token d'authentification, vous pouvez commencer à explorer notre API grâce au boutton  `Try it out` sur chacun de nos webs services. Mais au préalable, vous devez vous authentifier en cliquant sur le boutton `Authorize `, en remplissant l'input `api_key` avec `Bearer {{ JWT }}`.  **Exemple** `Bearer eyUEkiLCJh...CHCUiBfD63oxoo=` ## Limitation Toutes les requêtes à notre API sont loggées, c'est pourquoi vous devez respecter nos [CGU](https://dev.yanport.com/cgu) afin d'éviter tout usage abusif de notre API. 

    OpenAPI spec version: 1.0
    Contact: dev@yanport.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BiensApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def properties_count_get(self, **kwargs):
        """
        Nombre de biens
        Compte le nombre de biens par rapport à certains critères de recherches. (prix, surface, ville, ...) # Exemples   ## Nombre de biens en cours de publication sur Levallois-Perret entre 120 et 130m²     /properties/count?active=true&published=true&zipCodes=92300&surfaceMin=120&surfaceMax=130
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_count_get_with_http_info(**kwargs)
        else:
            (data) = self.properties_count_get_with_http_info(**kwargs)
            return data

    def properties_count_get_with_http_info(self, **kwargs):
        """
        Nombre de biens
        Compte le nombre de biens par rapport à certains critères de recherches. (prix, surface, ville, ...) # Exemples   ## Nombre de biens en cours de publication sur Levallois-Perret entre 120 et 130m²     /properties/count?active=true&published=true&zipCodes=92300&surfaceMin=120&surfaceMax=130
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_count_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/count', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CountResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_count_group_by_group_by_and_sub_group_by_get(self, group_by, sub_group_by, terms_size, **kwargs):
        """
        Nombre de biens
        Retourne le nombre de biens regroupés selon 1 critère et 1 sous-critère. # Exemples   ## Nombre de biens regroupés par portails et par type de vendeur en cours de publication sur Levallois-Perret     /properties/count/group-by-CRAWL_SOURCES-and-DEALER_TYPE?active=true&published=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_group_by_group_by_and_sub_group_by_get(group_by, sub_group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param str sub_group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_count_group_by_group_by_and_sub_group_by_get_with_http_info(group_by, sub_group_by, terms_size, **kwargs)
        else:
            (data) = self.properties_count_group_by_group_by_and_sub_group_by_get_with_http_info(group_by, sub_group_by, terms_size, **kwargs)
            return data

    def properties_count_group_by_group_by_and_sub_group_by_get_with_http_info(self, group_by, sub_group_by, terms_size, **kwargs):
        """
        Nombre de biens
        Retourne le nombre de biens regroupés selon 1 critère et 1 sous-critère. # Exemples   ## Nombre de biens regroupés par portails et par type de vendeur en cours de publication sur Levallois-Perret     /properties/count/group-by-CRAWL_SOURCES-and-DEALER_TYPE?active=true&published=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_group_by_group_by_and_sub_group_by_get_with_http_info(group_by, sub_group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param str sub_group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'sub_group_by', 'terms_size', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_count_group_by_group_by_and_sub_group_by_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params) or (params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `properties_count_group_by_group_by_and_sub_group_by_get`")
        # verify the required parameter 'sub_group_by' is set
        if ('sub_group_by' not in params) or (params['sub_group_by'] is None):
            raise ValueError("Missing the required parameter `sub_group_by` when calling `properties_count_group_by_group_by_and_sub_group_by_get`")
        # verify the required parameter 'terms_size' is set
        if ('terms_size' not in params) or (params['terms_size'] is None):
            raise ValueError("Missing the required parameter `terms_size` when calling `properties_count_group_by_group_by_and_sub_group_by_get`")

        if 'terms_size' in params and params['terms_size'] > 100:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_count_group_by_group_by_and_sub_group_by_get`, must be a value less than or equal to `100`")
        if 'terms_size' in params and params['terms_size'] < 10:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_count_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `10`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_count_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_group_by_group_by_and_sub_group_by_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']
        if 'sub_group_by' in params:
            path_params['subGroupBy'] = params['sub_group_by']

        query_params = []
        if 'terms_size' in params:
            query_params.append(('termsSize', params['terms_size']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/count/group-by-{groupBy}-and-{subGroupBy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CountResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_count_group_by_group_by_get(self, group_by, terms_size, **kwargs):
        """
        Nombre de biens
        Retourne le nombre de biens regroupés selon 1 critère. # Exemples   ## Nombre de biens regroupés par portails en cours de publication sur Levallois-Perret     /properties/count/group-by-CRAWL_SOURCES?active=true&published=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_group_by_group_by_get(group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_count_group_by_group_by_get_with_http_info(group_by, terms_size, **kwargs)
        else:
            (data) = self.properties_count_group_by_group_by_get_with_http_info(group_by, terms_size, **kwargs)
            return data

    def properties_count_group_by_group_by_get_with_http_info(self, group_by, terms_size, **kwargs):
        """
        Nombre de biens
        Retourne le nombre de biens regroupés selon 1 critère. # Exemples   ## Nombre de biens regroupés par portails en cours de publication sur Levallois-Perret     /properties/count/group-by-CRAWL_SOURCES?active=true&published=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_count_group_by_group_by_get_with_http_info(group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: CountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'terms_size', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_count_group_by_group_by_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params) or (params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `properties_count_group_by_group_by_get`")
        # verify the required parameter 'terms_size' is set
        if ('terms_size' not in params) or (params['terms_size'] is None):
            raise ValueError("Missing the required parameter `terms_size` when calling `properties_count_group_by_group_by_get`")

        if 'terms_size' in params and params['terms_size'] > 100:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_count_group_by_group_by_get`, must be a value less than or equal to `100`")
        if 'terms_size' in params and params['terms_size'] < 10:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_count_group_by_group_by_get`, must be a value greater than or equal to `10`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_count_group_by_group_by_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_group_by_group_by_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_count_group_by_group_by_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']

        query_params = []
        if 'terms_size' in params:
            query_params.append(('termsSize', params['terms_size']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/count/group-by-{groupBy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CountResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_distribution_get(self, field, percentiles, interval_field, **kwargs):
        """
        Disitribution des biens
        Permet de construire un graphique de distribution des biens selon plusieurs critères. # Exemples   ## Distribution des durées de publication des biens en vente entre 2016 et 2017 à Levallois-Perret     /properties/distribution?field=DURATION_DAYS&intervalField=DURATION_DAYS&marketingTypes=SALE&active=false&published=true&zipCodes=92300&publicationDateMin=2016-01-01T00%3A00%3A00.00&publicationDateMax=2017-01-01T00%3A00%3A00.00
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_distribution_get(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Histogram
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_distribution_get_with_http_info(field, percentiles, interval_field, **kwargs)
        else:
            (data) = self.properties_distribution_get_with_http_info(field, percentiles, interval_field, **kwargs)
            return data

    def properties_distribution_get_with_http_info(self, field, percentiles, interval_field, **kwargs):
        """
        Disitribution des biens
        Permet de construire un graphique de distribution des biens selon plusieurs critères. # Exemples   ## Distribution des durées de publication des biens en vente entre 2016 et 2017 à Levallois-Perret     /properties/distribution?field=DURATION_DAYS&intervalField=DURATION_DAYS&marketingTypes=SALE&active=false&published=true&zipCodes=92300&publicationDateMin=2016-01-01T00%3A00%3A00.00&publicationDateMax=2017-01-01T00%3A00%3A00.00
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_distribution_get_with_http_info(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Histogram
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'percentiles', 'interval_field', 'interval', 'extended_bound_min', 'extended_bound_max', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_distribution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_distribution_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `properties_distribution_get`")
        # verify the required parameter 'interval_field' is set
        if ('interval_field' not in params) or (params['interval_field'] is None):
            raise ValueError("Missing the required parameter `interval_field` when calling `properties_distribution_get`")

        if 'interval' in params and params['interval'] < 1:
            raise ValueError("Invalid value for parameter `interval` when calling `properties_distribution_get`, must be a value greater than or equal to `1`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_distribution_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_distribution_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_distribution_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'
        if 'interval_field' in params:
            query_params.append(('intervalField', params['interval_field']))
        if 'interval' in params:
            query_params.append(('interval', params['interval']))
        if 'extended_bound_min' in params:
            query_params.append(('extendedBoundMin', params['extended_bound_min']))
        if 'extended_bound_max' in params:
            query_params.append(('extendedBoundMax', params['extended_bound_max']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/distribution', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Histogram',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_evolution_get(self, field, percentiles, interval_field, **kwargs):
        """
        Evolution des biens dans le temps
        Permet de constuire une courbe d'évolution du nombre de biens selon plusieurs critères. # Exemples   ##Evolution des prix des biens en vente entre 2016 et 2017 à Levallois-Perret     /properties/evolution?field=PRICE&intervalField=DELETE_DATE&interval=1&intervalUnit=MONTHS&marketingTypes=SALE&active=false&published=true&zipCodes=92300&publicationDateMin=2016-01-01T00:00:00.00&publicationDateMax=2017-01-01T00:00:00.00
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_evolution_get(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param str interval_unit: Unité de temps de l'intervalle
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: DateHistogram
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_evolution_get_with_http_info(field, percentiles, interval_field, **kwargs)
        else:
            (data) = self.properties_evolution_get_with_http_info(field, percentiles, interval_field, **kwargs)
            return data

    def properties_evolution_get_with_http_info(self, field, percentiles, interval_field, **kwargs):
        """
        Evolution des biens dans le temps
        Permet de constuire une courbe d'évolution du nombre de biens selon plusieurs critères. # Exemples   ##Evolution des prix des biens en vente entre 2016 et 2017 à Levallois-Perret     /properties/evolution?field=PRICE&intervalField=DELETE_DATE&interval=1&intervalUnit=MONTHS&marketingTypes=SALE&active=false&published=true&zipCodes=92300&publicationDateMin=2016-01-01T00:00:00.00&publicationDateMax=2017-01-01T00:00:00.00
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_evolution_get_with_http_info(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param str interval_unit: Unité de temps de l'intervalle
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: DateHistogram
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'percentiles', 'interval_field', 'interval', 'interval_unit', 'extended_bound_min', 'extended_bound_max', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_evolution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_evolution_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `properties_evolution_get`")
        # verify the required parameter 'interval_field' is set
        if ('interval_field' not in params) or (params['interval_field'] is None):
            raise ValueError("Missing the required parameter `interval_field` when calling `properties_evolution_get`")

        if 'interval' in params and params['interval'] < 1:
            raise ValueError("Invalid value for parameter `interval` when calling `properties_evolution_get`, must be a value greater than or equal to `1`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_evolution_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_evolution_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_evolution_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'
        if 'interval_field' in params:
            query_params.append(('intervalField', params['interval_field']))
        if 'interval' in params:
            query_params.append(('interval', params['interval']))
        if 'interval_unit' in params:
            query_params.append(('intervalUnit', params['interval_unit']))
        if 'extended_bound_min' in params:
            query_params.append(('extendedBoundMin', params['extended_bound_min']))
        if 'extended_bound_max' in params:
            query_params.append(('extendedBoundMax', params['extended_bound_max']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/evolution', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='DateHistogram',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_get(self, **kwargs):
        """
        Rechercher des biens
        Rechercher les biens actifs ou expirés selon plusieurs critères (prix, surface, ville, ...)  La recherche plein-texte est disponible sur le titre et la description via le query param `q` _(voir notre [FAQ](https://yanporthelp.zendesk.com/hc/fr/articles/208456909-Comment-affiner-ma-recherche-avec-des-mots-cl%C3%A9s-) concernant la syntaxe)_  Par défaut les résultats sont paginés, pour parcourir l'ensemble des biens les paramètres `from` et `size` doivent être renseignés. Le paramètre `from` définit le début du set de données et `size` le nombre d'éléments à récupérer. Le nombre `total` d'éléments est renvoyé dans la réponse.  Concernant le tri le paramètre `sort` à pour syntaxe `field:asc|desc` en remplaçant `field` par le nom du champ sur lequel appliqué le tri. # Exemples   ## Les biens en cours de publication sur Levallois-Perret entre 120 et 130m²     /properties?active=true&published=true&zipCodes=92300&surfaceMin=120&surfaceMax=130   ## Les biens en cours de publication dans le 17ème arrondissement de Paris avec balcon     /properties?active=true&published=true&zipCodes=75017&q=balcon   ## Les dernièrs biens de particulier publiés en Corse sur LeBonCoin et PAP     /properties?active=true&published=true&crawlSources=LE_BON_COIN&crawlSources=PAP&departments=2B&sort=marketing.publicationStartDate:asc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_get_with_http_info(**kwargs)
        else:
            (data) = self.properties_get_with_http_info(**kwargs)
            return data

    def properties_get_with_http_info(self, **kwargs):
        """
        Rechercher des biens
        Rechercher les biens actifs ou expirés selon plusieurs critères (prix, surface, ville, ...)  La recherche plein-texte est disponible sur le titre et la description via le query param `q` _(voir notre [FAQ](https://yanporthelp.zendesk.com/hc/fr/articles/208456909-Comment-affiner-ma-recherche-avec-des-mots-cl%C3%A9s-) concernant la syntaxe)_  Par défaut les résultats sont paginés, pour parcourir l'ensemble des biens les paramètres `from` et `size` doivent être renseignés. Le paramètre `from` définit le début du set de données et `size` le nombre d'éléments à récupérer. Le nombre `total` d'éléments est renvoyé dans la réponse.  Concernant le tri le paramètre `sort` à pour syntaxe `field:asc|desc` en remplaçant `field` par le nom du champ sur lequel appliqué le tri. # Exemples   ## Les biens en cours de publication sur Levallois-Perret entre 120 et 130m²     /properties?active=true&published=true&zipCodes=92300&surfaceMin=120&surfaceMax=130   ## Les biens en cours de publication dans le 17ème arrondissement de Paris avec balcon     /properties?active=true&published=true&zipCodes=75017&q=balcon   ## Les dernièrs biens de particulier publiés en Corse sur LeBonCoin et PAP     /properties?active=true&published=true&crawlSources=LE_BON_COIN&crawlSources=PAP&departments=2B&sort=marketing.publicationStartDate:asc
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_get" % key
                )
            params[key] = val
        del params['kwargs']

        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse2002',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_id_get(self, id, **kwargs):
        """
        Récupérer un bien (ID)
        Récupérer un bien par son identifiant
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_id_get_with_http_info(id, **kwargs)
        else:
            (data) = self.properties_id_get_with_http_info(id, **kwargs)
            return data

    def properties_id_get_with_http_info(self, id, **kwargs):
        """
        Récupérer un bien (ID)
        Récupérer un bien par son identifiant
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_id_get_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: (required)
        :return: ModelProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `properties_id_get`")


        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/{id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModelProperty',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_ids_get(self, ids, **kwargs):
        """
        Récupérer des biens (ID)
        Récupérer des biens par leur identifiant
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_ids_get(ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] ids: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_ids_get_with_http_info(ids, **kwargs)
        else:
            (data) = self.properties_ids_get_with_http_info(ids, **kwargs)
            return data

    def properties_ids_get_with_http_info(self, ids, **kwargs):
        """
        Récupérer des biens (ID)
        Récupérer des biens par leur identifiant
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_ids_get_with_http_info(ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] ids: (required)
        :return: list[ModelProperty]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_ids_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ids' is set
        if ('ids' not in params) or (params['ids'] is None):
            raise ValueError("Missing the required parameter `ids` when calling `properties_ids_get`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ids' in params:
            query_params.append(('ids', params['ids']))
            collection_formats['ids'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/ids', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ModelProperty]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_percentiles_get(self, field, percentiles, **kwargs):
        """
        Indicateurs de références
        Permet de récupérer les indicateurs de références sur les biens selon plusieurs critères. # Exemples   ## PrixM2 median des biens en cours de publication en vente à Levallois-Perret     /properties/percentiles?field=PRICE&percentiles=50&marketingTypes=SALE&active=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_percentiles_get(field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Percentiles
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_percentiles_get_with_http_info(field, percentiles, **kwargs)
        else:
            (data) = self.properties_percentiles_get_with_http_info(field, percentiles, **kwargs)
            return data

    def properties_percentiles_get_with_http_info(self, field, percentiles, **kwargs):
        """
        Indicateurs de références
        Permet de récupérer les indicateurs de références sur les biens selon plusieurs critères. # Exemples   ## PrixM2 median des biens en cours de publication en vente à Levallois-Perret     /properties/percentiles?field=PRICE&percentiles=50&marketingTypes=SALE&active=true&zipCodes=92300
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_percentiles_get_with_http_info(field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Percentiles
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'percentiles', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_percentiles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_percentiles_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `properties_percentiles_get`")

        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_percentiles_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_percentiles_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_percentiles_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/percentiles', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Percentiles',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_percentiles_group_by_group_by_get(self, group_by, terms_size, field, percentiles, **kwargs):
        """
        Indicateurs de réferences
        Permet de récupérer les indicateurs de références regroupé selon 1 critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_percentiles_group_by_group_by_get(group_by, terms_size, field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_percentiles_group_by_group_by_get_with_http_info(group_by, terms_size, field, percentiles, **kwargs)
        else:
            (data) = self.properties_percentiles_group_by_group_by_get_with_http_info(group_by, terms_size, field, percentiles, **kwargs)
            return data

    def properties_percentiles_group_by_group_by_get_with_http_info(self, group_by, terms_size, field, percentiles, **kwargs):
        """
        Indicateurs de réferences
        Permet de récupérer les indicateurs de références regroupé selon 1 critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_percentiles_group_by_group_by_get_with_http_info(group_by, terms_size, field, percentiles, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'terms_size', 'field', 'percentiles', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_percentiles_group_by_group_by_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params) or (params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `properties_percentiles_group_by_group_by_get`")
        # verify the required parameter 'terms_size' is set
        if ('terms_size' not in params) or (params['terms_size'] is None):
            raise ValueError("Missing the required parameter `terms_size` when calling `properties_percentiles_group_by_group_by_get`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_percentiles_group_by_group_by_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `properties_percentiles_group_by_group_by_get`")

        if 'terms_size' in params and params['terms_size'] > 100:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_percentiles_group_by_group_by_get`, must be a value less than or equal to `100`")
        if 'terms_size' in params and params['terms_size'] < 10:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_percentiles_group_by_group_by_get`, must be a value greater than or equal to `10`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_percentiles_group_by_group_by_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_percentiles_group_by_group_by_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_percentiles_group_by_group_by_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']

        query_params = []
        if 'terms_size' in params:
            query_params.append(('termsSize', params['terms_size']))
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/percentiles/group-by-{groupBy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_stats_get(self, field, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques des biens selon plusieurs critères.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_get(field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_stats_get_with_http_info(field, **kwargs)
        else:
            (data) = self.properties_stats_get_with_http_info(field, **kwargs)
            return data

    def properties_stats_get_with_http_info(self, field, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques des biens selon plusieurs critères.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_get_with_http_info(field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: Stats
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_stats_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_stats_get`")

        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_stats_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/stats', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Stats',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_stats_group_by_group_by_and_sub_group_by_get(self, field, group_by, sub_group_by, terms_size, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques basiques des biens regroupé selon 1 critère et 1 sous-critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_group_by_group_by_and_sub_group_by_get(field, group_by, sub_group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param str group_by: Grouper par (required)
        :param str sub_group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_stats_group_by_group_by_and_sub_group_by_get_with_http_info(field, group_by, sub_group_by, terms_size, **kwargs)
        else:
            (data) = self.properties_stats_group_by_group_by_and_sub_group_by_get_with_http_info(field, group_by, sub_group_by, terms_size, **kwargs)
            return data

    def properties_stats_group_by_group_by_and_sub_group_by_get_with_http_info(self, field, group_by, sub_group_by, terms_size, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques basiques des biens regroupé selon 1 critère et 1 sous-critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_group_by_group_by_and_sub_group_by_get_with_http_info(field, group_by, sub_group_by, terms_size, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param str group_by: Grouper par (required)
        :param str sub_group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'group_by', 'sub_group_by', 'terms_size', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_stats_group_by_group_by_and_sub_group_by_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`")
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params) or (params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`")
        # verify the required parameter 'sub_group_by' is set
        if ('sub_group_by' not in params) or (params['sub_group_by'] is None):
            raise ValueError("Missing the required parameter `sub_group_by` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`")
        # verify the required parameter 'terms_size' is set
        if ('terms_size' not in params) or (params['terms_size'] is None):
            raise ValueError("Missing the required parameter `terms_size` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`")

        if 'terms_size' in params and params['terms_size'] > 100:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`, must be a value less than or equal to `100`")
        if 'terms_size' in params and params['terms_size'] < 10:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `10`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_group_by_group_by_and_sub_group_by_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']
        if 'sub_group_by' in params:
            path_params['subGroupBy'] = params['sub_group_by']

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'terms_size' in params:
            query_params.append(('termsSize', params['terms_size']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/stats/group-by-{groupBy}-and-{subGroupBy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_stats_group_by_group_by_get(self, group_by, terms_size, field, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques basiques des biens regroupé selon 1 critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_group_by_group_by_get(group_by, terms_size, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_stats_group_by_group_by_get_with_http_info(group_by, terms_size, field, **kwargs)
        else:
            (data) = self.properties_stats_group_by_group_by_get_with_http_info(group_by, terms_size, field, **kwargs)
            return data

    def properties_stats_group_by_group_by_get_with_http_info(self, group_by, terms_size, field, **kwargs):
        """
        Statistiques sur les biens
        Permet de récupérer les statistiques basiques des biens regroupé selon 1 critère.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stats_group_by_group_by_get_with_http_info(group_by, terms_size, field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str group_by: Grouper par (required)
        :param int terms_size: Précision des résultats (required)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_by', 'terms_size', 'field', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_stats_group_by_group_by_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_by' is set
        if ('group_by' not in params) or (params['group_by'] is None):
            raise ValueError("Missing the required parameter `group_by` when calling `properties_stats_group_by_group_by_get`")
        # verify the required parameter 'terms_size' is set
        if ('terms_size' not in params) or (params['terms_size'] is None):
            raise ValueError("Missing the required parameter `terms_size` when calling `properties_stats_group_by_group_by_get`")
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_stats_group_by_group_by_get`")

        if 'terms_size' in params and params['terms_size'] > 100:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_stats_group_by_group_by_get`, must be a value less than or equal to `100`")
        if 'terms_size' in params and params['terms_size'] < 10:
            raise ValueError("Invalid value for parameter `terms_size` when calling `properties_stats_group_by_group_by_get`, must be a value greater than or equal to `10`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_stats_group_by_group_by_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_group_by_group_by_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stats_group_by_group_by_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}
        if 'group_by' in params:
            path_params['groupBy'] = params['group_by']

        query_params = []
        if 'terms_size' in params:
            query_params.append(('termsSize', params['terms_size']))
        if 'field' in params:
            query_params.append(('field', params['field']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/stats/group-by-{groupBy}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def properties_stock_evolution_get(self, field, percentiles, interval_field, **kwargs):
        """
        L'évolution du stock de biens
        Permet de constuire une courbe représentant l'évolution du stock de biens selon plusieurs critères.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stock_evolution_get(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param str interval_unit: Unité de temps de l'intervalle
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: StockEvolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.properties_stock_evolution_get_with_http_info(field, percentiles, interval_field, **kwargs)
        else:
            (data) = self.properties_stock_evolution_get_with_http_info(field, percentiles, interval_field, **kwargs)
            return data

    def properties_stock_evolution_get_with_http_info(self, field, percentiles, interval_field, **kwargs):
        """
        L'évolution du stock de biens
        Permet de constuire une courbe représentant l'évolution du stock de biens selon plusieurs critères.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.properties_stock_evolution_get_with_http_info(field, percentiles, interval_field, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str field: Champ sur lequel sont calculés les statistiques (required)
        :param list[float] percentiles: Les percentiles (ex: 10.0, 50.0, 90.0) (required)
        :param str interval_field: Champ sur lequel sont calculés les statistiques (required)
        :param int interval: Valeur de l'intervalle de l'histogramme
        :param str interval_unit: Unité de temps de l'intervalle
        :param int extended_bound_min: Garantit un intervalle minimale
        :param int extended_bound_max: Garantit un intervalle maximale
        :param int _from: Début de la pagination
        :param int size: Nombre de résultats
        :param str sort: Trier par
        :param str q: Recherche plein-texte
        :param list[str] marketing_types: Types de marché (vente, location, vente en viager)
        :param list[str] crawl_sources: Portails immobiliers
        :param bool active: Statut de l'annonce (expirée ou pas)
        :param bool published: Le bien est-il annoncé en ligne ou pas
        :param list[str] dealer_types: Types de vendeur (agence, mandataire..)
        :param list[str] dealer_names: Liste de noms de vendeurs
        :param bool exclusive_mandate: Mandat Exclusif
        :param list[int] dealer_ids: Liste d'identifiants de vendeurs
        :param list[int] excluded_dealer_ids: Liste d'identifiants de vendeurs à exclure
        :param list[str] property_ids: Liste d'identifiants de biens
        :param list[str] property_types: Types de bien
        :param list[int] room_counts: Nombre de pièces
        :param list[str] departments: Liste de départements
        :param list[str] zip_codes: Liste de codes postaux
        :param list[int] city_ids: Liste d'identifiants de villes
        :param datetime publication_date_min: Date minimale de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime publication_date_max: Date limite de publication (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_min: Date minimale de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime ad_publication_date_max: Date limite de publication de l'annonce (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_min: Date minimale de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime last_price_decrease_date_max: Date limite de la dernière baisse de prix (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_min: Date minimale de suppression (YYYY-mm-ddTHH:mm:ss)
        :param datetime delete_date_max: Date limite de suppression (YYYY-mm-ddTHH:mm:ss)
        :param int duration_days_min: Durée minimale en jours
        :param int duration_days_max: Durée maximale en jours
        :param int surface_min: Surface minimale
        :param int surface_max: Surface maximale
        :param int price_min: Prix minimum
        :param int price_max: Prix maximum
        :param int price_m2_min: Prix au mètre carré minimum
        :param int price_m2_max: Prix au mètre carré maximum
        :param int price_hc_min: Prix hors charges minimum
        :param int price_hc_max: Prix hors charges maximum
        :param int price_m2_hc_min: Prix au mètres carré hors charges minimum
        :param int price_m2_hc_max: Prix au mètres carré hors charges maximum
        :param int price_cc_min: Prix charges comprises minimum
        :param int price_cc_max: Prix charges comprises maximum
        :param int fees_min: Honoraires minimales
        :param int fees_max: Honoraires maximales
        :param int deposit_min: Caution minimale
        :param int deposit_max: Caution maximale
        :param bool furnished: Meublé
        :param bool new_build: Nouvelle construction
        :param list[str] missing_fields: Attributs manquants
        :param list[str] existing_fields: Attributs existants
        :param list[str] excluded_ids: Identifiants à exclure
        :param list[str] external_ids: Identifiants externes
        :param list[str] organization_ids: Identifiants d'organisations
        :return: StockEvolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['field', 'percentiles', 'interval_field', 'interval', 'interval_unit', 'extended_bound_min', 'extended_bound_max', '_from', 'size', 'sort', 'q', 'marketing_types', 'crawl_sources', 'active', 'published', 'dealer_types', 'dealer_names', 'exclusive_mandate', 'dealer_ids', 'excluded_dealer_ids', 'property_ids', 'property_types', 'room_counts', 'departments', 'zip_codes', 'city_ids', 'publication_date_min', 'publication_date_max', 'ad_publication_date_min', 'ad_publication_date_max', 'last_price_decrease_date_min', 'last_price_decrease_date_max', 'delete_date_min', 'delete_date_max', 'duration_days_min', 'duration_days_max', 'surface_min', 'surface_max', 'price_min', 'price_max', 'price_m2_min', 'price_m2_max', 'price_hc_min', 'price_hc_max', 'price_m2_hc_min', 'price_m2_hc_max', 'price_cc_min', 'price_cc_max', 'fees_min', 'fees_max', 'deposit_min', 'deposit_max', 'furnished', 'new_build', 'missing_fields', 'existing_fields', 'excluded_ids', 'external_ids', 'organization_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method properties_stock_evolution_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'field' is set
        if ('field' not in params) or (params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `properties_stock_evolution_get`")
        # verify the required parameter 'percentiles' is set
        if ('percentiles' not in params) or (params['percentiles'] is None):
            raise ValueError("Missing the required parameter `percentiles` when calling `properties_stock_evolution_get`")
        # verify the required parameter 'interval_field' is set
        if ('interval_field' not in params) or (params['interval_field'] is None):
            raise ValueError("Missing the required parameter `interval_field` when calling `properties_stock_evolution_get`")

        if 'interval' in params and params['interval'] < 1:
            raise ValueError("Invalid value for parameter `interval` when calling `properties_stock_evolution_get`, must be a value greater than or equal to `1`")
        if '_from' in params and params['_from'] < 0:
            raise ValueError("Invalid value for parameter `_from` when calling `properties_stock_evolution_get`, must be a value greater than or equal to `0`")
        if 'size' in params and params['size'] > 1000:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stock_evolution_get`, must be a value less than or equal to `1000`")
        if 'size' in params and params['size'] < 0:
            raise ValueError("Invalid value for parameter `size` when calling `properties_stock_evolution_get`, must be a value greater than or equal to `0`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'field' in params:
            query_params.append(('field', params['field']))
        if 'percentiles' in params:
            query_params.append(('percentiles', params['percentiles']))
            collection_formats['percentiles'] = 'multi'
        if 'interval_field' in params:
            query_params.append(('intervalField', params['interval_field']))
        if 'interval' in params:
            query_params.append(('interval', params['interval']))
        if 'interval_unit' in params:
            query_params.append(('intervalUnit', params['interval_unit']))
        if 'extended_bound_min' in params:
            query_params.append(('extendedBoundMin', params['extended_bound_min']))
        if 'extended_bound_max' in params:
            query_params.append(('extendedBoundMax', params['extended_bound_max']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'size' in params:
            query_params.append(('size', params['size']))
        if 'sort' in params:
            query_params.append(('sort', params['sort']))
        if 'q' in params:
            query_params.append(('q', params['q']))
        if 'marketing_types' in params:
            query_params.append(('marketingTypes', params['marketing_types']))
            collection_formats['marketingTypes'] = 'multi'
        if 'crawl_sources' in params:
            query_params.append(('crawlSources', params['crawl_sources']))
            collection_formats['crawlSources'] = 'multi'
        if 'active' in params:
            query_params.append(('active', params['active']))
        if 'published' in params:
            query_params.append(('published', params['published']))
        if 'dealer_types' in params:
            query_params.append(('dealerTypes', params['dealer_types']))
            collection_formats['dealerTypes'] = 'multi'
        if 'dealer_names' in params:
            query_params.append(('dealerNames', params['dealer_names']))
            collection_formats['dealerNames'] = 'multi'
        if 'exclusive_mandate' in params:
            query_params.append(('exclusiveMandate', params['exclusive_mandate']))
        if 'dealer_ids' in params:
            query_params.append(('dealerIds', params['dealer_ids']))
            collection_formats['dealerIds'] = 'multi'
        if 'excluded_dealer_ids' in params:
            query_params.append(('excludedDealerIds', params['excluded_dealer_ids']))
            collection_formats['excludedDealerIds'] = 'multi'
        if 'property_ids' in params:
            query_params.append(('propertyIds', params['property_ids']))
            collection_formats['propertyIds'] = 'multi'
        if 'property_types' in params:
            query_params.append(('propertyTypes', params['property_types']))
            collection_formats['propertyTypes'] = 'multi'
        if 'room_counts' in params:
            query_params.append(('roomCounts', params['room_counts']))
            collection_formats['roomCounts'] = 'multi'
        if 'departments' in params:
            query_params.append(('departments', params['departments']))
            collection_formats['departments'] = 'multi'
        if 'zip_codes' in params:
            query_params.append(('zipCodes', params['zip_codes']))
            collection_formats['zipCodes'] = 'multi'
        if 'city_ids' in params:
            query_params.append(('cityIds', params['city_ids']))
            collection_formats['cityIds'] = 'multi'
        if 'publication_date_min' in params:
            query_params.append(('publicationDateMin', params['publication_date_min']))
        if 'publication_date_max' in params:
            query_params.append(('publicationDateMax', params['publication_date_max']))
        if 'ad_publication_date_min' in params:
            query_params.append(('adPublicationDateMin', params['ad_publication_date_min']))
        if 'ad_publication_date_max' in params:
            query_params.append(('adPublicationDateMax', params['ad_publication_date_max']))
        if 'last_price_decrease_date_min' in params:
            query_params.append(('lastPriceDecreaseDateMin', params['last_price_decrease_date_min']))
        if 'last_price_decrease_date_max' in params:
            query_params.append(('lastPriceDecreaseDateMax', params['last_price_decrease_date_max']))
        if 'delete_date_min' in params:
            query_params.append(('deleteDateMin', params['delete_date_min']))
        if 'delete_date_max' in params:
            query_params.append(('deleteDateMax', params['delete_date_max']))
        if 'duration_days_min' in params:
            query_params.append(('durationDaysMin', params['duration_days_min']))
        if 'duration_days_max' in params:
            query_params.append(('durationDaysMax', params['duration_days_max']))
        if 'surface_min' in params:
            query_params.append(('surfaceMin', params['surface_min']))
        if 'surface_max' in params:
            query_params.append(('surfaceMax', params['surface_max']))
        if 'price_min' in params:
            query_params.append(('priceMin', params['price_min']))
        if 'price_max' in params:
            query_params.append(('priceMax', params['price_max']))
        if 'price_m2_min' in params:
            query_params.append(('priceM2Min', params['price_m2_min']))
        if 'price_m2_max' in params:
            query_params.append(('priceM2Max', params['price_m2_max']))
        if 'price_hc_min' in params:
            query_params.append(('priceHCMin', params['price_hc_min']))
        if 'price_hc_max' in params:
            query_params.append(('priceHCMax', params['price_hc_max']))
        if 'price_m2_hc_min' in params:
            query_params.append(('priceM2HCMin', params['price_m2_hc_min']))
        if 'price_m2_hc_max' in params:
            query_params.append(('priceM2HCMax', params['price_m2_hc_max']))
        if 'price_cc_min' in params:
            query_params.append(('priceCCMin', params['price_cc_min']))
        if 'price_cc_max' in params:
            query_params.append(('priceCCMax', params['price_cc_max']))
        if 'fees_min' in params:
            query_params.append(('feesMin', params['fees_min']))
        if 'fees_max' in params:
            query_params.append(('feesMax', params['fees_max']))
        if 'deposit_min' in params:
            query_params.append(('depositMin', params['deposit_min']))
        if 'deposit_max' in params:
            query_params.append(('depositMax', params['deposit_max']))
        if 'furnished' in params:
            query_params.append(('furnished', params['furnished']))
        if 'new_build' in params:
            query_params.append(('newBuild', params['new_build']))
        if 'missing_fields' in params:
            query_params.append(('missingFields', params['missing_fields']))
            collection_formats['missingFields'] = 'csv'
        if 'existing_fields' in params:
            query_params.append(('existingFields', params['existing_fields']))
            collection_formats['existingFields'] = 'csv'
        if 'excluded_ids' in params:
            query_params.append(('excludedIds', params['excluded_ids']))
            collection_formats['excludedIds'] = 'csv'
        if 'external_ids' in params:
            query_params.append(('externalIds', params['external_ids']))
            collection_formats['externalIds'] = 'csv'
        if 'organization_ids' in params:
            query_params.append(('organizationIds', params['organization_ids']))
            collection_formats['organizationIds'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['jwt']

        return self.api_client.call_api('/properties/stock-evolution', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StockEvolution',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
