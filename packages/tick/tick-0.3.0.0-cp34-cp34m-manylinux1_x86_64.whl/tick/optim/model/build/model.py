# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_model')
    _model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_model', [dirname(__file__)])
        except ImportError:
            import _model
            return _model
        try:
            _mod = imp.load_module('_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _model = swig_import_helper()
    del swig_import_helper
else:
    import _model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _model.SHARED_PTR_DISOWN
import tick.base
import tick.base.array.build.array
class Model(object):
    """Proxy of C++ Model class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Model self) -> Model"""
        this = _model.new_Model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _model.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _model.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _model.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _model.Model_is_sparse(self)

    __swig_destroy__ = _model.delete_Model
    __del__ = lambda self: None
Model_swigregister = _model.Model_swigregister
Model_swigregister(Model)

class ModelLabelsFeatures(Model):
    """Proxy of C++ ModelLabelsFeatures class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const'):
        """__init__(ModelLabelsFeatures self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels) -> ModelLabelsFeatures"""
        this = _model.new_ModelLabelsFeatures(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeatures self) -> unsigned long"""
        return _model.ModelLabelsFeatures_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeatures self) -> unsigned long"""
        return _model.ModelLabelsFeatures_get_n_features(self)

    __swig_destroy__ = _model.delete_ModelLabelsFeatures
    __del__ = lambda self: None
ModelLabelsFeatures_swigregister = _model.ModelLabelsFeatures_swigregister
ModelLabelsFeatures_swigregister(ModelLabelsFeatures)

class ModelLipschitz(Model):
    """Proxy of C++ ModelLipschitz class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ModelLipschitz self) -> ModelLipschitz"""
        this = _model.new_ModelLipschitz()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _model.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _model.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _model.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _model.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelGeneralizedLinear(ModelLabelsFeatures):
    """Proxy of C++ ModelGeneralizedLinear class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinear
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinear
        """
        this = _model.new_ModelGeneralizedLinear(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinear self) -> unsigned long"""
        return _model.ModelGeneralizedLinear_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinear self, bool fit_intercept)"""
        return _model.ModelGeneralizedLinear_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinear self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _model.ModelGeneralizedLinear_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _model.delete_ModelGeneralizedLinear
    __del__ = lambda self: None
ModelGeneralizedLinear_swigregister = _model.ModelGeneralizedLinear_swigregister
ModelGeneralizedLinear_swigregister(ModelGeneralizedLinear)

class ModelGeneralizedLinearWithIntercepts(ModelGeneralizedLinear):
    """Proxy of C++ ModelGeneralizedLinearWithIntercepts class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithIntercepts
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearWithIntercepts
        """
        this = _model.new_ModelGeneralizedLinearWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelGeneralizedLinearWithIntercepts
    __del__ = lambda self: None
ModelGeneralizedLinearWithIntercepts_swigregister = _model.ModelGeneralizedLinearWithIntercepts_swigregister
ModelGeneralizedLinearWithIntercepts_swigregister(ModelGeneralizedLinearWithIntercepts)

class ModelHawkesFixedExpKernLeastSq(Model):
    """Proxy of C++ ModelHawkesFixedExpKernLeastSq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'SArrayDouble2dPtr const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedExpKernLeastSq
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesFixedExpKernLeastSq
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays) -> ModelHawkesFixedExpKernLeastSq
        """
        this = _model.new_ModelHawkesFixedExpKernLeastSq(decays, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedExpKernLeastSq self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _model.ModelHawkesFixedExpKernLeastSq_set_data(self, timestamps, end_time)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays)"""
        return _model.ModelHawkesFixedExpKernLeastSq_set_decays(self, decays)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedExpKernLeastSq self)"""
        return _model.ModelHawkesFixedExpKernLeastSq_compute_weights(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedExpKernLeastSq self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _model.ModelHawkesFixedExpKernLeastSq_loss_and_grad(self, coeffs, out)


    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLeastSq self, ArrayDouble & out)"""
        return _model.ModelHawkesFixedExpKernLeastSq_hessian(self, out)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLeastSq_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLeastSq_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLeastSq_get_n_nodes(self)

    __swig_destroy__ = _model.delete_ModelHawkesFixedExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesFixedExpKernLeastSq_swigregister = _model.ModelHawkesFixedExpKernLeastSq_swigregister
ModelHawkesFixedExpKernLeastSq_swigregister(ModelHawkesFixedExpKernLeastSq)

class ModelHawkesFixedSumExpKernLeastSq(Model):
    """Proxy of C++ ModelHawkesFixedSumExpKernLeastSq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', n_baselines: 'ulong const', period_length: 'double const', max_n_threads: 'unsigned int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedSumExpKernLeastSq
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLeastSq
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesFixedSumExpKernLeastSq
        """
        this = _model.new_ModelHawkesFixedSumExpKernLeastSq(decays, n_baselines, period_length, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedSumExpKernLeastSq self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedSumExpKernLeastSq self)"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_compute_weights(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_loss_and_grad(self, coeffs, out)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_get_n_nodes(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesFixedSumExpKernLeastSq self) -> double"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesFixedSumExpKernLeastSq self, ulong n_baselines)"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesFixedSumExpKernLeastSq self, double period_length)"""
        return _model.ModelHawkesFixedSumExpKernLeastSq_set_period_length(self, period_length)

    __swig_destroy__ = _model.delete_ModelHawkesFixedSumExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLeastSq_swigregister = _model.ModelHawkesFixedSumExpKernLeastSq_swigregister
ModelHawkesFixedSumExpKernLeastSq_swigregister(ModelHawkesFixedSumExpKernLeastSq)

class ModelHawkesFixedExpKernLogLik(Model):
    """Proxy of C++ ModelHawkesFixedExpKernLogLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', n_cores: 'unsigned int const'=1):
        """
        __init__(ModelHawkesFixedExpKernLogLik self, double const decay, unsigned int const n_cores=1) -> ModelHawkesFixedExpKernLogLik
        __init__(ModelHawkesFixedExpKernLogLik self, double const decay) -> ModelHawkesFixedExpKernLogLik
        """
        this = _model.new_ModelHawkesFixedExpKernLogLik(decay, n_cores)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedExpKernLogLik self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _model.ModelHawkesFixedExpKernLogLik_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedExpKernLogLik self)"""
        return _model.ModelHawkesFixedExpKernLogLik_compute_weights(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelHawkesFixedExpKernLogLik self) -> unsigned long"""
        return _model.ModelHawkesFixedExpKernLogLik_get_rand_max(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out_grad: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out_grad) -> double"""
        return _model.ModelHawkesFixedExpKernLogLik_loss_and_grad(self, coeffs, out_grad)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _model.ModelHawkesFixedExpKernLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _model.ModelHawkesFixedExpKernLogLik_hessian(self, coeffs, out)


    def get_decay(self) -> "double":
        """get_decay(ModelHawkesFixedExpKernLogLik self) -> double"""
        return _model.ModelHawkesFixedExpKernLogLik_get_decay(self)


    def set_decay(self, decay: 'double') -> "void":
        """set_decay(ModelHawkesFixedExpKernLogLik self, double decay)"""
        return _model.ModelHawkesFixedExpKernLogLik_set_decay(self, decay)


    def get_n_threads(self) -> "unsigned int":
        """get_n_threads(ModelHawkesFixedExpKernLogLik self) -> unsigned int"""
        return _model.ModelHawkesFixedExpKernLogLik_get_n_threads(self)


    def set_n_threads(self, n_threads: 'unsigned int') -> "void":
        """set_n_threads(ModelHawkesFixedExpKernLogLik self, unsigned int n_threads)"""
        return _model.ModelHawkesFixedExpKernLogLik_set_n_threads(self, n_threads)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLogLik_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLogLik_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedExpKernLogLik_get_n_nodes(self)

    __swig_destroy__ = _model.delete_ModelHawkesFixedExpKernLogLik
    __del__ = lambda self: None
ModelHawkesFixedExpKernLogLik_swigregister = _model.ModelHawkesFixedExpKernLogLik_swigregister
ModelHawkesFixedExpKernLogLik_swigregister(ModelHawkesFixedExpKernLogLik)

class ModelHawkesFixedSumExpKernLogLik(Model):
    """Proxy of C++ ModelHawkesFixedSumExpKernLogLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', n_cores: 'unsigned int const'=1):
        """
        __init__(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & decays, unsigned int const n_cores=1) -> ModelHawkesFixedSumExpKernLogLik
        __init__(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & decays) -> ModelHawkesFixedSumExpKernLogLik
        """
        this = _model.new_ModelHawkesFixedSumExpKernLogLik(decays, n_cores)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedSumExpKernLogLik self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _model.ModelHawkesFixedSumExpKernLogLik_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedSumExpKernLogLik self)"""
        return _model.ModelHawkesFixedSumExpKernLogLik_compute_weights(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelHawkesFixedSumExpKernLogLik self) -> unsigned long"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_rand_max(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out_grad: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out_grad) -> double"""
        return _model.ModelHawkesFixedSumExpKernLogLik_loss_and_grad(self, coeffs, out_grad)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _model.ModelHawkesFixedSumExpKernLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _model.ModelHawkesFixedSumExpKernLogLik_hessian(self, coeffs, out)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesFixedSumExpKernLogLik self) -> SArrayDoublePtr"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_decays(self)


    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble & decays)"""
        return _model.ModelHawkesFixedSumExpKernLogLik_set_decays(self, decays)


    def get_n_threads(self) -> "unsigned int":
        """get_n_threads(ModelHawkesFixedSumExpKernLogLik self) -> unsigned int"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_n_threads(self)


    def set_n_threads(self, n_threads: 'unsigned int') -> "void":
        """set_n_threads(ModelHawkesFixedSumExpKernLogLik self, unsigned int n_threads)"""
        return _model.ModelHawkesFixedSumExpKernLogLik_set_n_threads(self, n_threads)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLogLik_get_n_nodes(self)

    __swig_destroy__ = _model.delete_ModelHawkesFixedSumExpKernLogLik
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLogLik_swigregister = _model.ModelHawkesFixedSumExpKernLogLik_swigregister
ModelHawkesFixedSumExpKernLogLik_swigregister(ModelHawkesFixedSumExpKernLogLik)

class ModelHawkesList(Model):
    """Proxy of C++ ModelHawkesList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesList
        __init__(ModelHawkesList self, int const max_n_threads=1) -> ModelHawkesList
        __init__(ModelHawkesList self) -> ModelHawkesList
        """
        this = _model.new_ModelHawkesList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps_list: 'SArrayDoublePtrList2D const &', end_time: 'VArrayDoublePtr const') -> "void":
        """set_data(ModelHawkesList self, SArrayDoublePtrList2D const & timestamps_list, VArrayDoublePtr const end_time)"""
        return _model.ModelHawkesList_set_data(self, timestamps_list, end_time)


    def get_end_times(self) -> "VArrayDoublePtr":
        """get_end_times(ModelHawkesList self) -> VArrayDoublePtr"""
        return _model.ModelHawkesList_get_end_times(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesList self) -> ulong"""
        return _model.ModelHawkesList_get_n_coeffs(self)


    def get_n_threads(self) -> "ulong":
        """get_n_threads(ModelHawkesList self) -> ulong"""
        return _model.ModelHawkesList_get_n_threads(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesList self) -> ulong"""
        return _model.ModelHawkesList_get_n_nodes(self)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesList self) -> ulong"""
        return _model.ModelHawkesList_get_n_total_jumps(self)


    def get_n_jumps_per_node(self) -> "SArrayULongPtr":
        """get_n_jumps_per_node(ModelHawkesList self) -> SArrayULongPtr"""
        return _model.ModelHawkesList_get_n_jumps_per_node(self)


    def get_n_jumps_per_realization(self) -> "SArrayULongPtr":
        """get_n_jumps_per_realization(ModelHawkesList self) -> SArrayULongPtr"""
        return _model.ModelHawkesList_get_n_jumps_per_realization(self)


    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkesList self, int const max_n_threads)"""
        return _model.ModelHawkesList_set_n_threads(self, max_n_threads)

    __swig_destroy__ = _model.delete_ModelHawkesList
    __del__ = lambda self: None
ModelHawkesList_swigregister = _model.ModelHawkesList_swigregister
ModelHawkesList_swigregister(ModelHawkesList)

class ModelHawkesLeastSqList(ModelHawkesList):
    """Proxy of C++ ModelHawkesLeastSqList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesLeastSqList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesLeastSqList
        __init__(ModelHawkesLeastSqList self, int const max_n_threads=1) -> ModelHawkesLeastSqList
        __init__(ModelHawkesLeastSqList self) -> ModelHawkesLeastSqList
        """
        this = _model.new_ModelHawkesLeastSqList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLeastSqList self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _model.ModelHawkesLeastSqList_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLeastSqList self)"""
        return _model.ModelHawkesLeastSqList_compute_weights(self)

    __swig_destroy__ = _model.delete_ModelHawkesLeastSqList
    __del__ = lambda self: None
ModelHawkesLeastSqList_swigregister = _model.ModelHawkesLeastSqList_swigregister
ModelHawkesLeastSqList_swigregister(ModelHawkesLeastSqList)

class ModelHawkesFixedKernLogLikList(ModelHawkesList):
    """Proxy of C++ ModelHawkesFixedKernLogLikList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedKernLogLikList self, int const max_n_threads=1) -> ModelHawkesFixedKernLogLikList
        __init__(ModelHawkesFixedKernLogLikList self) -> ModelHawkesFixedKernLogLikList
        """
        this = _model.new_ModelHawkesFixedKernLogLikList(max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _model.ModelHawkesFixedKernLogLikList_loss_and_grad(self, coeffs, out)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _model.ModelHawkesFixedKernLogLikList_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _model.ModelHawkesFixedKernLogLikList_hessian(self, coeffs, out)


    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesFixedKernLogLikList self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _model.ModelHawkesFixedKernLogLikList_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedKernLogLikList self)"""
        return _model.ModelHawkesFixedKernLogLikList_compute_weights(self)

    __swig_destroy__ = _model.delete_ModelHawkesFixedKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedKernLogLikList_swigregister = _model.ModelHawkesFixedKernLogLikList_swigregister
ModelHawkesFixedKernLogLikList_swigregister(ModelHawkesFixedKernLogLikList)

class ModelHawkesFixedExpKernLeastSqList(ModelHawkesLeastSqList):
    """Proxy of C++ ModelHawkesFixedExpKernLeastSqList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesFixedExpKernLeastSqList self) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays) -> ModelHawkesFixedExpKernLeastSqList
        """
        this = _model.new_ModelHawkesFixedExpKernLeastSqList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLeastSqList self, ArrayDouble & out)"""
        return _model.ModelHawkesFixedExpKernLeastSqList_hessian(self, out)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays)"""
        return _model.ModelHawkesFixedExpKernLeastSqList_set_decays(self, decays)


    def __getstate__(self): return ModelHawkesFixedExpKernLeastSqListSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesFixedExpKernLeastSqListDeserialize(self, s)

    __swig_destroy__ = _model.delete_ModelHawkesFixedExpKernLeastSqList
    __del__ = lambda self: None
ModelHawkesFixedExpKernLeastSqList_swigregister = _model.ModelHawkesFixedExpKernLeastSqList_swigregister
ModelHawkesFixedExpKernLeastSqList_swigregister(ModelHawkesFixedExpKernLeastSqList)


def ModelHawkesFixedExpKernLeastSqListDeserialize(ptr: 'ModelHawkesFixedExpKernLeastSqList', data: 'std::string const &') -> "void":
    """ModelHawkesFixedExpKernLeastSqListDeserialize(ModelHawkesFixedExpKernLeastSqList ptr, std::string const & data)"""
    return _model.ModelHawkesFixedExpKernLeastSqListDeserialize(ptr, data)

def ModelHawkesFixedExpKernLeastSqListSerialize(ptr: 'ModelHawkesFixedExpKernLeastSqList') -> "std::string":
    """ModelHawkesFixedExpKernLeastSqListSerialize(ModelHawkesFixedExpKernLeastSqList ptr) -> std::string"""
    return _model.ModelHawkesFixedExpKernLeastSqListSerialize(ptr)
class ModelHawkesFixedSumExpKernLeastSqList(ModelHawkesLeastSqList):
    """Proxy of C++ ModelHawkesFixedSumExpKernLeastSqList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesFixedSumExpKernLeastSqList self) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesFixedSumExpKernLeastSqList
        """
        this = _model.new_ModelHawkesFixedSumExpKernLeastSqList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble const &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays)"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_set_decays(self, decays)


    def get_n_decays(self) -> "ulong":
        """get_n_decays(ModelHawkesFixedSumExpKernLeastSqList self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_get_n_decays(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesFixedSumExpKernLeastSqList self) -> ulong"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesFixedSumExpKernLeastSqList self) -> double"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesFixedSumExpKernLeastSqList self, ulong n_baselines)"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesFixedSumExpKernLeastSqList self, double period_length)"""
        return _model.ModelHawkesFixedSumExpKernLeastSqList_set_period_length(self, period_length)


    def __getstate__(self): return ModelHawkesFixedSumExpKernLeastSqListSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesFixedSumExpKernLeastSqListDeserialize(self, s)

    __swig_destroy__ = _model.delete_ModelHawkesFixedSumExpKernLeastSqList
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLeastSqList_swigregister = _model.ModelHawkesFixedSumExpKernLeastSqList_swigregister
ModelHawkesFixedSumExpKernLeastSqList_swigregister(ModelHawkesFixedSumExpKernLeastSqList)


def ModelHawkesFixedSumExpKernLeastSqListDeserialize(ptr: 'ModelHawkesFixedSumExpKernLeastSqList', data: 'std::string const &') -> "void":
    """ModelHawkesFixedSumExpKernLeastSqListDeserialize(ModelHawkesFixedSumExpKernLeastSqList ptr, std::string const & data)"""
    return _model.ModelHawkesFixedSumExpKernLeastSqListDeserialize(ptr, data)

def ModelHawkesFixedSumExpKernLeastSqListSerialize(ptr: 'ModelHawkesFixedSumExpKernLeastSqList') -> "std::string":
    """ModelHawkesFixedSumExpKernLeastSqListSerialize(ModelHawkesFixedSumExpKernLeastSqList ptr) -> std::string"""
    return _model.ModelHawkesFixedSumExpKernLeastSqListSerialize(ptr)
class ModelHawkesFixedExpKernLogLikList(ModelHawkesFixedKernLogLikList):
    """Proxy of C++ ModelHawkesFixedExpKernLogLikList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedExpKernLogLikList self, double const decay, int const max_n_threads=1) -> ModelHawkesFixedExpKernLogLikList
        __init__(ModelHawkesFixedExpKernLogLikList self, double const decay) -> ModelHawkesFixedExpKernLogLikList
        """
        this = _model.new_ModelHawkesFixedExpKernLogLikList(decay, max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(ModelHawkesFixedExpKernLogLikList self, double const decay)"""
        return _model.ModelHawkesFixedExpKernLogLikList_set_decay(self, decay)

    __swig_destroy__ = _model.delete_ModelHawkesFixedExpKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedExpKernLogLikList_swigregister = _model.ModelHawkesFixedExpKernLogLikList_swigregister
ModelHawkesFixedExpKernLogLikList_swigregister(ModelHawkesFixedExpKernLogLikList)

class ModelHawkesFixedSumExpKernLogLikList(ModelHawkesFixedKernLogLikList):
    """Proxy of C++ ModelHawkesFixedSumExpKernLogLikList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble const & decays, int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLogLikList
        __init__(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble const & decays) -> ModelHawkesFixedSumExpKernLogLikList
        """
        this = _model.new_ModelHawkesFixedSumExpKernLogLikList(decays, max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble & decays)"""
        return _model.ModelHawkesFixedSumExpKernLogLikList_set_decays(self, decays)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesFixedSumExpKernLogLikList self) -> SArrayDoublePtr"""
        return _model.ModelHawkesFixedSumExpKernLogLikList_get_decays(self)

    __swig_destroy__ = _model.delete_ModelHawkesFixedSumExpKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLogLikList_swigregister = _model.ModelHawkesFixedSumExpKernLogLikList_swigregister
ModelHawkesFixedSumExpKernLogLikList_swigregister(ModelHawkesFixedSumExpKernLogLikList)

class ModelEpsilonInsensitive(ModelGeneralizedLinear):
    """Proxy of C++ ModelEpsilonInsensitive class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelEpsilonInsensitive self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelEpsilonInsensitive"""
        this = _model.new_ModelEpsilonInsensitive(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelEpsilonInsensitive self) -> double"""
        return _model.ModelEpsilonInsensitive_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelEpsilonInsensitive self, double const threshold)"""
        return _model.ModelEpsilonInsensitive_set_threshold(self, threshold)

    __swig_destroy__ = _model.delete_ModelEpsilonInsensitive
    __del__ = lambda self: None
ModelEpsilonInsensitive_swigregister = _model.ModelEpsilonInsensitive_swigregister
ModelEpsilonInsensitive_swigregister(ModelEpsilonInsensitive)

class ModelHinge(ModelGeneralizedLinear):
    """Proxy of C++ ModelHinge class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelHinge"""
        this = _model.new_ModelHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelHinge
    __del__ = lambda self: None
ModelHinge_swigregister = _model.ModelHinge_swigregister
ModelHinge_swigregister(ModelHinge)

class ModelHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelHuber class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelHuber"""
        this = _model.new_ModelHuber(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelHuber self) -> double"""
        return _model.ModelHuber_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelHuber self, double const threshold)"""
        return _model.ModelHuber_set_threshold(self, threshold)

    __swig_destroy__ = _model.delete_ModelHuber
    __del__ = lambda self: None
ModelHuber_swigregister = _model.ModelHuber_swigregister
ModelHuber_swigregister(ModelHuber)

class ModelModifiedHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelModifiedHuber class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelModifiedHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelModifiedHuber"""
        this = _model.new_ModelModifiedHuber(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelModifiedHuber
    __del__ = lambda self: None
ModelModifiedHuber_swigregister = _model.ModelModifiedHuber_swigregister
ModelModifiedHuber_swigregister(ModelModifiedHuber)

class ModelQuadraticHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelQuadraticHinge class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelQuadraticHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelQuadraticHinge"""
        this = _model.new_ModelQuadraticHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelQuadraticHinge
    __del__ = lambda self: None
ModelQuadraticHinge_swigregister = _model.ModelQuadraticHinge_swigregister
ModelQuadraticHinge_swigregister(ModelQuadraticHinge)

class ModelSmoothedHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelSmoothedHinge class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', smoothness: 'double const', n_threads: 'int const'):
        """__init__(ModelSmoothedHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness, int const n_threads) -> ModelSmoothedHinge"""
        this = _model.new_ModelSmoothedHinge(features, labels, fit_intercept, smoothness, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_smoothness(self) -> "double":
        """get_smoothness(ModelSmoothedHinge self) -> double"""
        return _model.ModelSmoothedHinge_get_smoothness(self)


    def set_smoothness(self, smoothness: 'double') -> "void":
        """set_smoothness(ModelSmoothedHinge self, double smoothness)"""
        return _model.ModelSmoothedHinge_set_smoothness(self, smoothness)

    __swig_destroy__ = _model.delete_ModelSmoothedHinge
    __del__ = lambda self: None
ModelSmoothedHinge_swigregister = _model.ModelSmoothedHinge_swigregister
ModelSmoothedHinge_swigregister(ModelSmoothedHinge)

class ModelAbsoluteRegression(ModelGeneralizedLinear):
    """Proxy of C++ ModelAbsoluteRegression class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegression
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelAbsoluteRegression
        """
        this = _model.new_ModelAbsoluteRegression(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelAbsoluteRegression
    __del__ = lambda self: None
ModelAbsoluteRegression_swigregister = _model.ModelAbsoluteRegression_swigregister
ModelAbsoluteRegression_swigregister(ModelAbsoluteRegression)

class ModelLinReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLinReg class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinReg"""
        this = _model.new_ModelLinReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelLinReg
    __del__ = lambda self: None
ModelLinReg_swigregister = _model.ModelLinReg_swigregister
ModelLinReg_swigregister(ModelLinReg)

class ModelLinRegWithIntercepts(ModelGeneralizedLinearWithIntercepts, ModelLinReg):
    """Proxy of C++ ModelLinRegWithIntercepts class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinRegWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinRegWithIntercepts"""
        this = _model.new_ModelLinRegWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelLinRegWithIntercepts
    __del__ = lambda self: None
ModelLinRegWithIntercepts_swigregister = _model.ModelLinRegWithIntercepts_swigregister
ModelLinRegWithIntercepts_swigregister(ModelLinRegWithIntercepts)

class ModelLogReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLogReg class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLogReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogReg"""
        this = _model.new_ModelLogReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _model.ModelLogReg_sigmoid(x, out)

    sigmoid = staticmethod(sigmoid)

    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _model.ModelLogReg_logistic(x, out)

    logistic = staticmethod(logistic)
    __swig_destroy__ = _model.delete_ModelLogReg
    __del__ = lambda self: None
ModelLogReg_swigregister = _model.ModelLogReg_swigregister
ModelLogReg_swigregister(ModelLogReg)

def ModelLogReg_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _model.ModelLogReg_sigmoid(x, out)

def ModelLogReg_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _model.ModelLogReg_logistic(x, out)

LinkType_identity = _model.LinkType_identity
LinkType_exponential = _model.LinkType_exponential
class ModelPoisReg(ModelGeneralizedLinear):
    """Proxy of C++ ModelPoisReg class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', link_type: 'LinkType const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelPoisReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads) -> ModelPoisReg"""
        this = _model.new_ModelPoisReg(features, labels, link_type, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_link_type(self, link_type: 'LinkType') -> "void":
        """set_link_type(ModelPoisReg self, LinkType link_type)"""
        return _model.ModelPoisReg_set_link_type(self, link_type)

    __swig_destroy__ = _model.delete_ModelPoisReg
    __del__ = lambda self: None
ModelPoisReg_swigregister = _model.ModelPoisReg_swigregister
ModelPoisReg_swigregister(ModelPoisReg)

class ModelCoxRegPartialLik(Model):
    """Proxy of C++ ModelCoxRegPartialLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', times: 'SArrayDoublePtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(ModelCoxRegPartialLik self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLik"""
        this = _model.new_ModelCoxRegPartialLik(features, times, censoring)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _model.delete_ModelCoxRegPartialLik
    __del__ = lambda self: None
ModelCoxRegPartialLik_swigregister = _model.ModelCoxRegPartialLik_swigregister
ModelCoxRegPartialLik_swigregister(ModelCoxRegPartialLik)

class ModelSCCS(Model):
    """Proxy of C++ ModelSCCS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', labels: 'SArrayIntPtrList1D const &', censoring: 'SBaseArrayULongPtr const', n_lags: 'ulong'):
        """__init__(ModelSCCS self, SBaseArrayDouble2dPtrList1D const & features, SArrayIntPtrList1D const & labels, SBaseArrayULongPtr const censoring, ulong n_lags) -> ModelSCCS"""
        this = _model.new_ModelSCCS(features, labels, censoring, n_lags)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def loss(self, coeffs: 'ArrayDouble &') -> "double":
        """loss(ModelSCCS self, ArrayDouble & coeffs) -> double"""
        return _model.ModelSCCS_loss(self, coeffs)


    def grad(self, coeffs: 'ArrayDouble &', out: 'ArrayDouble &') -> "void":
        """grad(ModelSCCS self, ArrayDouble & coeffs, ArrayDouble & out)"""
        return _model.ModelSCCS_grad(self, coeffs, out)


    def compute_lip_consts(self) -> "void":
        """compute_lip_consts(ModelSCCS self)"""
        return _model.ModelSCCS_compute_lip_consts(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelSCCS self) -> unsigned long"""
        return _model.ModelSCCS_get_rand_max(self)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelSCCS self) -> unsigned long"""
        return _model.ModelSCCS_get_epoch_size(self)


    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelSCCS self) -> unsigned long"""
        return _model.ModelSCCS_get_n_coeffs(self)


    def get_lip_max(self) -> "double":
        """get_lip_max(ModelSCCS self) -> double"""
        return _model.ModelSCCS_get_lip_max(self)

    __swig_destroy__ = _model.delete_ModelSCCS
    __del__ = lambda self: None
ModelSCCS_swigregister = _model.ModelSCCS_swigregister
ModelSCCS_swigregister(ModelSCCS)



