# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_inference', [dirname(__file__)])
        except ImportError:
            import _inference
            return _inference
        if fp is not None:
            try:
                _mod = imp.load_module('_inference', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _inference = swig_import_helper()
    del swig_import_helper
else:
    import _inference
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import tick.base
import tick.base.array.build.array

_inference.SHARED_PTR_DISOWN_swigconstant(_inference)
SHARED_PTR_DISOWN = _inference.SHARED_PTR_DISOWN
class Model(object):
    """Proxy of C++ Model class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Model self) -> Model"""
        this = _inference.new_Model()
        try:
            self.this.append(this)
        except:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _inference.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _inference.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _inference.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _inference.Model_is_sparse(self)

    __swig_destroy__ = _inference.delete_Model
    __del__ = lambda self: None
Model_swigregister = _inference.Model_swigregister
Model_swigregister(Model)

class ModelLabelsFeatures(Model):
    """Proxy of C++ ModelLabelsFeatures class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const'):
        """__init__(ModelLabelsFeatures self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels) -> ModelLabelsFeatures"""
        this = _inference.new_ModelLabelsFeatures(features, labels)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeatures self) -> unsigned long"""
        return _inference.ModelLabelsFeatures_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeatures self) -> unsigned long"""
        return _inference.ModelLabelsFeatures_get_n_features(self)

    __swig_destroy__ = _inference.delete_ModelLabelsFeatures
    __del__ = lambda self: None
ModelLabelsFeatures_swigregister = _inference.ModelLabelsFeatures_swigregister
ModelLabelsFeatures_swigregister(ModelLabelsFeatures)

class ModelLipschitz(Model):
    """Proxy of C++ ModelLipschitz class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(ModelLipschitz self) -> ModelLipschitz"""
        this = _inference.new_ModelLipschitz()
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _inference.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _inference.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _inference.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _inference.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelGeneralizedLinear(ModelLabelsFeatures):
    """Proxy of C++ ModelGeneralizedLinear class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinear
        __init__(ModelGeneralizedLinear self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinear
        """
        this = _inference.new_ModelGeneralizedLinear(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinear self) -> unsigned long"""
        return _inference.ModelGeneralizedLinear_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinear self, bool fit_intercept)"""
        return _inference.ModelGeneralizedLinear_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinear self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _inference.ModelGeneralizedLinear_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _inference.delete_ModelGeneralizedLinear
    __del__ = lambda self: None
ModelGeneralizedLinear_swigregister = _inference.ModelGeneralizedLinear_swigregister
ModelGeneralizedLinear_swigregister(ModelGeneralizedLinear)

class ModelGeneralizedLinearWithIntercepts(ModelGeneralizedLinear):
    """Proxy of C++ ModelGeneralizedLinearWithIntercepts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearWithIntercepts
        __init__(ModelGeneralizedLinearWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearWithIntercepts
        """
        this = _inference.new_ModelGeneralizedLinearWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelGeneralizedLinearWithIntercepts
    __del__ = lambda self: None
ModelGeneralizedLinearWithIntercepts_swigregister = _inference.ModelGeneralizedLinearWithIntercepts_swigregister
ModelGeneralizedLinearWithIntercepts_swigregister(ModelGeneralizedLinearWithIntercepts)

class ModelHawkesFixedExpKernLeastSq(Model):
    """Proxy of C++ ModelHawkesFixedExpKernLeastSq class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'SArrayDouble2dPtr const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedExpKernLeastSq
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesFixedExpKernLeastSq
        __init__(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays) -> ModelHawkesFixedExpKernLeastSq
        """
        this = _inference.new_ModelHawkesFixedExpKernLeastSq(decays, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedExpKernLeastSq self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _inference.ModelHawkesFixedExpKernLeastSq_set_data(self, timestamps, end_time)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesFixedExpKernLeastSq self, SArrayDouble2dPtr const decays)"""
        return _inference.ModelHawkesFixedExpKernLeastSq_set_decays(self, decays)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedExpKernLeastSq self)"""
        return _inference.ModelHawkesFixedExpKernLeastSq_compute_weights(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedExpKernLeastSq self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _inference.ModelHawkesFixedExpKernLeastSq_loss_and_grad(self, coeffs, out)


    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLeastSq self, ArrayDouble & out)"""
        return _inference.ModelHawkesFixedExpKernLeastSq_hessian(self, out)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLeastSq_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLeastSq_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLeastSq_get_n_nodes(self)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesFixedExpKernLeastSq_swigregister = _inference.ModelHawkesFixedExpKernLeastSq_swigregister
ModelHawkesFixedExpKernLeastSq_swigregister(ModelHawkesFixedExpKernLeastSq)

class ModelHawkesFixedSumExpKernLeastSq(Model):
    """Proxy of C++ ModelHawkesFixedSumExpKernLeastSq class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', n_baselines: 'ulong const', period_length: 'double const', max_n_threads: 'unsigned int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedSumExpKernLeastSq
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLeastSq
        __init__(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesFixedSumExpKernLeastSq
        """
        this = _inference.new_ModelHawkesFixedSumExpKernLeastSq(decays, n_baselines, period_length, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedSumExpKernLeastSq self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedSumExpKernLeastSq self)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_compute_weights(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedSumExpKernLeastSq self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_loss_and_grad(self, coeffs, out)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_get_n_nodes(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesFixedSumExpKernLeastSq self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesFixedSumExpKernLeastSq self) -> double"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesFixedSumExpKernLeastSq self, ulong n_baselines)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesFixedSumExpKernLeastSq self, double period_length)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSq_set_period_length(self, period_length)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedSumExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLeastSq_swigregister = _inference.ModelHawkesFixedSumExpKernLeastSq_swigregister
ModelHawkesFixedSumExpKernLeastSq_swigregister(ModelHawkesFixedSumExpKernLeastSq)

class ModelHawkesFixedExpKernLogLik(Model):
    """Proxy of C++ ModelHawkesFixedExpKernLogLik class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', n_cores: 'unsigned int const'=1):
        """
        __init__(ModelHawkesFixedExpKernLogLik self, double const decay, unsigned int const n_cores=1) -> ModelHawkesFixedExpKernLogLik
        __init__(ModelHawkesFixedExpKernLogLik self, double const decay) -> ModelHawkesFixedExpKernLogLik
        """
        this = _inference.new_ModelHawkesFixedExpKernLogLik(decay, n_cores)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedExpKernLogLik self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _inference.ModelHawkesFixedExpKernLogLik_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedExpKernLogLik self)"""
        return _inference.ModelHawkesFixedExpKernLogLik_compute_weights(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelHawkesFixedExpKernLogLik self) -> unsigned long"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_rand_max(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out_grad: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out_grad) -> double"""
        return _inference.ModelHawkesFixedExpKernLogLik_loss_and_grad(self, coeffs, out_grad)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _inference.ModelHawkesFixedExpKernLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _inference.ModelHawkesFixedExpKernLogLik_hessian(self, coeffs, out)


    def get_decay(self) -> "double":
        """get_decay(ModelHawkesFixedExpKernLogLik self) -> double"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_decay(self)


    def set_decay(self, decay: 'double') -> "void":
        """set_decay(ModelHawkesFixedExpKernLogLik self, double decay)"""
        return _inference.ModelHawkesFixedExpKernLogLik_set_decay(self, decay)


    def get_n_threads(self) -> "unsigned int":
        """get_n_threads(ModelHawkesFixedExpKernLogLik self) -> unsigned int"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_n_threads(self)


    def set_n_threads(self, n_threads: 'unsigned int') -> "void":
        """set_n_threads(ModelHawkesFixedExpKernLogLik self, unsigned int n_threads)"""
        return _inference.ModelHawkesFixedExpKernLogLik_set_n_threads(self, n_threads)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedExpKernLogLik_get_n_nodes(self)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedExpKernLogLik
    __del__ = lambda self: None
ModelHawkesFixedExpKernLogLik_swigregister = _inference.ModelHawkesFixedExpKernLogLik_swigregister
ModelHawkesFixedExpKernLogLik_swigregister(ModelHawkesFixedExpKernLogLik)

class ModelHawkesFixedSumExpKernLogLik(Model):
    """Proxy of C++ ModelHawkesFixedSumExpKernLogLik class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', n_cores: 'unsigned int const'=1):
        """
        __init__(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & decays, unsigned int const n_cores=1) -> ModelHawkesFixedSumExpKernLogLik
        __init__(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & decays) -> ModelHawkesFixedSumExpKernLogLik
        """
        this = _inference.new_ModelHawkesFixedSumExpKernLogLik(decays, n_cores)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double const') -> "void":
        """set_data(ModelHawkesFixedSumExpKernLogLik self, SArrayDoublePtrList1D const & timestamps, double const end_time)"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedSumExpKernLogLik self)"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_compute_weights(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelHawkesFixedSumExpKernLogLik self) -> unsigned long"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_rand_max(self)


    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out_grad: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out_grad) -> double"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_loss_and_grad(self, coeffs, out_grad)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_hessian(self, coeffs, out)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesFixedSumExpKernLogLik self) -> SArrayDoublePtr"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_decays(self)


    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLogLik self, ArrayDouble & decays)"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_set_decays(self, decays)


    def get_n_threads(self) -> "unsigned int":
        """get_n_threads(ModelHawkesFixedSumExpKernLogLik self) -> unsigned int"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_n_threads(self)


    def set_n_threads(self, n_threads: 'unsigned int') -> "void":
        """set_n_threads(ModelHawkesFixedSumExpKernLogLik self, unsigned int n_threads)"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_set_n_threads(self, n_threads)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_n_total_jumps(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_n_coeffs(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesFixedSumExpKernLogLik self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLogLik_get_n_nodes(self)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedSumExpKernLogLik
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLogLik_swigregister = _inference.ModelHawkesFixedSumExpKernLogLik_swigregister
ModelHawkesFixedSumExpKernLogLik_swigregister(ModelHawkesFixedSumExpKernLogLik)

class ModelHawkesList(Model):
    """Proxy of C++ ModelHawkesList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesList
        __init__(ModelHawkesList self, int const max_n_threads=1) -> ModelHawkesList
        __init__(ModelHawkesList self) -> ModelHawkesList
        """
        this = _inference.new_ModelHawkesList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_data(self, timestamps_list: 'SArrayDoublePtrList2D const &', end_time: 'VArrayDoublePtr const') -> "void":
        """set_data(ModelHawkesList self, SArrayDoublePtrList2D const & timestamps_list, VArrayDoublePtr const end_time)"""
        return _inference.ModelHawkesList_set_data(self, timestamps_list, end_time)


    def get_end_times(self) -> "VArrayDoublePtr":
        """get_end_times(ModelHawkesList self) -> VArrayDoublePtr"""
        return _inference.ModelHawkesList_get_end_times(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesList self) -> ulong"""
        return _inference.ModelHawkesList_get_n_coeffs(self)


    def get_n_threads(self) -> "ulong":
        """get_n_threads(ModelHawkesList self) -> ulong"""
        return _inference.ModelHawkesList_get_n_threads(self)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkesList self) -> ulong"""
        return _inference.ModelHawkesList_get_n_nodes(self)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkesList self) -> ulong"""
        return _inference.ModelHawkesList_get_n_total_jumps(self)


    def get_n_jumps_per_node(self) -> "SArrayULongPtr":
        """get_n_jumps_per_node(ModelHawkesList self) -> SArrayULongPtr"""
        return _inference.ModelHawkesList_get_n_jumps_per_node(self)


    def get_n_jumps_per_realization(self) -> "SArrayULongPtr":
        """get_n_jumps_per_realization(ModelHawkesList self) -> SArrayULongPtr"""
        return _inference.ModelHawkesList_get_n_jumps_per_realization(self)


    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkesList self, int const max_n_threads)"""
        return _inference.ModelHawkesList_set_n_threads(self, max_n_threads)

    __swig_destroy__ = _inference.delete_ModelHawkesList
    __del__ = lambda self: None
ModelHawkesList_swigregister = _inference.ModelHawkesList_swigregister
ModelHawkesList_swigregister(ModelHawkesList)

class ModelHawkesLeastSqList(ModelHawkesList):
    """Proxy of C++ ModelHawkesLeastSqList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesLeastSqList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesLeastSqList
        __init__(ModelHawkesLeastSqList self, int const max_n_threads=1) -> ModelHawkesLeastSqList
        __init__(ModelHawkesLeastSqList self) -> ModelHawkesLeastSqList
        """
        this = _inference.new_ModelHawkesLeastSqList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLeastSqList self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _inference.ModelHawkesLeastSqList_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLeastSqList self)"""
        return _inference.ModelHawkesLeastSqList_compute_weights(self)

    __swig_destroy__ = _inference.delete_ModelHawkesLeastSqList
    __del__ = lambda self: None
ModelHawkesLeastSqList_swigregister = _inference.ModelHawkesLeastSqList_swigregister
ModelHawkesLeastSqList_swigregister(ModelHawkesLeastSqList)

class ModelHawkesFixedKernLogLikList(ModelHawkesList):
    """Proxy of C++ ModelHawkesFixedKernLogLikList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedKernLogLikList self, int const max_n_threads=1) -> ModelHawkesFixedKernLogLikList
        __init__(ModelHawkesFixedKernLogLikList self) -> ModelHawkesFixedKernLogLikList
        """
        this = _inference.new_ModelHawkesFixedKernLogLikList(max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _inference.ModelHawkesFixedKernLogLikList_loss_and_grad(self, coeffs, out)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _inference.ModelHawkesFixedKernLogLikList_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedKernLogLikList self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _inference.ModelHawkesFixedKernLogLikList_hessian(self, coeffs, out)


    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesFixedKernLogLikList self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _inference.ModelHawkesFixedKernLogLikList_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesFixedKernLogLikList self)"""
        return _inference.ModelHawkesFixedKernLogLikList_compute_weights(self)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedKernLogLikList_swigregister = _inference.ModelHawkesFixedKernLogLikList_swigregister
ModelHawkesFixedKernLogLikList_swigregister(ModelHawkesFixedKernLogLikList)

class ModelHawkesFixedExpKernLeastSqList(ModelHawkesLeastSqList):
    """Proxy of C++ ModelHawkesFixedExpKernLeastSqList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesFixedExpKernLeastSqList self) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesFixedExpKernLeastSqList
        __init__(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays) -> ModelHawkesFixedExpKernLeastSqList
        """
        this = _inference.new_ModelHawkesFixedExpKernLeastSqList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesFixedExpKernLeastSqList self, ArrayDouble & out)"""
        return _inference.ModelHawkesFixedExpKernLeastSqList_hessian(self, out)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesFixedExpKernLeastSqList self, SArrayDouble2dPtr const decays)"""
        return _inference.ModelHawkesFixedExpKernLeastSqList_set_decays(self, decays)


    def __getstate__(self): return ModelHawkesFixedExpKernLeastSqListSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesFixedExpKernLeastSqListDeserialize(self, s)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedExpKernLeastSqList
    __del__ = lambda self: None
ModelHawkesFixedExpKernLeastSqList_swigregister = _inference.ModelHawkesFixedExpKernLeastSqList_swigregister
ModelHawkesFixedExpKernLeastSqList_swigregister(ModelHawkesFixedExpKernLeastSqList)


def ModelHawkesFixedExpKernLeastSqListDeserialize(ptr: 'ModelHawkesFixedExpKernLeastSqList', data: 'std::string const &') -> "void":
    """ModelHawkesFixedExpKernLeastSqListDeserialize(ModelHawkesFixedExpKernLeastSqList ptr, std::string const & data)"""
    return _inference.ModelHawkesFixedExpKernLeastSqListDeserialize(ptr, data)

def ModelHawkesFixedExpKernLeastSqListSerialize(ptr: 'ModelHawkesFixedExpKernLeastSqList') -> "std::string":
    """ModelHawkesFixedExpKernLeastSqListSerialize(ModelHawkesFixedExpKernLeastSqList ptr) -> std::string"""
    return _inference.ModelHawkesFixedExpKernLeastSqListSerialize(ptr)
class ModelHawkesFixedSumExpKernLeastSqList(ModelHawkesLeastSqList):
    """Proxy of C++ ModelHawkesFixedSumExpKernLeastSqList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesFixedSumExpKernLeastSqList self) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLeastSqList
        __init__(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesFixedSumExpKernLeastSqList
        """
        this = _inference.new_ModelHawkesFixedSumExpKernLeastSqList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble const &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLeastSqList self, ArrayDouble const & decays)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_set_decays(self, decays)


    def get_n_decays(self) -> "ulong":
        """get_n_decays(ModelHawkesFixedSumExpKernLeastSqList self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_get_n_decays(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesFixedSumExpKernLeastSqList self) -> ulong"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesFixedSumExpKernLeastSqList self) -> double"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesFixedSumExpKernLeastSqList self, ulong n_baselines)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesFixedSumExpKernLeastSqList self, double period_length)"""
        return _inference.ModelHawkesFixedSumExpKernLeastSqList_set_period_length(self, period_length)


    def __getstate__(self): return ModelHawkesFixedSumExpKernLeastSqListSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesFixedSumExpKernLeastSqListDeserialize(self, s)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedSumExpKernLeastSqList
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLeastSqList_swigregister = _inference.ModelHawkesFixedSumExpKernLeastSqList_swigregister
ModelHawkesFixedSumExpKernLeastSqList_swigregister(ModelHawkesFixedSumExpKernLeastSqList)


def ModelHawkesFixedSumExpKernLeastSqListDeserialize(ptr: 'ModelHawkesFixedSumExpKernLeastSqList', data: 'std::string const &') -> "void":
    """ModelHawkesFixedSumExpKernLeastSqListDeserialize(ModelHawkesFixedSumExpKernLeastSqList ptr, std::string const & data)"""
    return _inference.ModelHawkesFixedSumExpKernLeastSqListDeserialize(ptr, data)

def ModelHawkesFixedSumExpKernLeastSqListSerialize(ptr: 'ModelHawkesFixedSumExpKernLeastSqList') -> "std::string":
    """ModelHawkesFixedSumExpKernLeastSqListSerialize(ModelHawkesFixedSumExpKernLeastSqList ptr) -> std::string"""
    return _inference.ModelHawkesFixedSumExpKernLeastSqListSerialize(ptr)
class ModelHawkesFixedExpKernLogLikList(ModelHawkesFixedKernLogLikList):
    """Proxy of C++ ModelHawkesFixedExpKernLogLikList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedExpKernLogLikList self, double const decay, int const max_n_threads=1) -> ModelHawkesFixedExpKernLogLikList
        __init__(ModelHawkesFixedExpKernLogLikList self, double const decay) -> ModelHawkesFixedExpKernLogLikList
        """
        this = _inference.new_ModelHawkesFixedExpKernLogLikList(decay, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(ModelHawkesFixedExpKernLogLikList self, double const decay)"""
        return _inference.ModelHawkesFixedExpKernLogLikList_set_decay(self, decay)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedExpKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedExpKernLogLikList_swigregister = _inference.ModelHawkesFixedExpKernLogLikList_swigregister
ModelHawkesFixedExpKernLogLikList_swigregister(ModelHawkesFixedExpKernLogLikList)

class ModelHawkesFixedSumExpKernLogLikList(ModelHawkesFixedKernLogLikList):
    """Proxy of C++ ModelHawkesFixedSumExpKernLogLikList class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble const & decays, int const max_n_threads=1) -> ModelHawkesFixedSumExpKernLogLikList
        __init__(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble const & decays) -> ModelHawkesFixedSumExpKernLogLikList
        """
        this = _inference.new_ModelHawkesFixedSumExpKernLogLikList(decays, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesFixedSumExpKernLogLikList self, ArrayDouble & decays)"""
        return _inference.ModelHawkesFixedSumExpKernLogLikList_set_decays(self, decays)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesFixedSumExpKernLogLikList self) -> SArrayDoublePtr"""
        return _inference.ModelHawkesFixedSumExpKernLogLikList_get_decays(self)

    __swig_destroy__ = _inference.delete_ModelHawkesFixedSumExpKernLogLikList
    __del__ = lambda self: None
ModelHawkesFixedSumExpKernLogLikList_swigregister = _inference.ModelHawkesFixedSumExpKernLogLikList_swigregister
ModelHawkesFixedSumExpKernLogLikList_swigregister(ModelHawkesFixedSumExpKernLogLikList)

class ModelEpsilonInsensitive(ModelGeneralizedLinear):
    """Proxy of C++ ModelEpsilonInsensitive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelEpsilonInsensitive self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelEpsilonInsensitive"""
        this = _inference.new_ModelEpsilonInsensitive(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelEpsilonInsensitive self) -> double"""
        return _inference.ModelEpsilonInsensitive_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelEpsilonInsensitive self, double const threshold)"""
        return _inference.ModelEpsilonInsensitive_set_threshold(self, threshold)

    __swig_destroy__ = _inference.delete_ModelEpsilonInsensitive
    __del__ = lambda self: None
ModelEpsilonInsensitive_swigregister = _inference.ModelEpsilonInsensitive_swigregister
ModelEpsilonInsensitive_swigregister(ModelEpsilonInsensitive)

class ModelHinge(ModelGeneralizedLinear):
    """Proxy of C++ ModelHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelHinge"""
        this = _inference.new_ModelHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelHinge
    __del__ = lambda self: None
ModelHinge_swigregister = _inference.ModelHinge_swigregister
ModelHinge_swigregister(ModelHinge)

class ModelHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelHuber class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', threshold: 'double const', n_threads: 'int const'):
        """__init__(ModelHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const threshold, int const n_threads) -> ModelHuber"""
        this = _inference.new_ModelHuber(features, labels, fit_intercept, threshold, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_threshold(self) -> "double":
        """get_threshold(ModelHuber self) -> double"""
        return _inference.ModelHuber_get_threshold(self)


    def set_threshold(self, threshold: 'double const') -> "void":
        """set_threshold(ModelHuber self, double const threshold)"""
        return _inference.ModelHuber_set_threshold(self, threshold)

    __swig_destroy__ = _inference.delete_ModelHuber
    __del__ = lambda self: None
ModelHuber_swigregister = _inference.ModelHuber_swigregister
ModelHuber_swigregister(ModelHuber)

class ModelModifiedHuber(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelModifiedHuber class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelModifiedHuber self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelModifiedHuber"""
        this = _inference.new_ModelModifiedHuber(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelModifiedHuber
    __del__ = lambda self: None
ModelModifiedHuber_swigregister = _inference.ModelModifiedHuber_swigregister
ModelModifiedHuber_swigregister(ModelModifiedHuber)

class ModelQuadraticHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelQuadraticHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelQuadraticHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelQuadraticHinge"""
        this = _inference.new_ModelQuadraticHinge(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelQuadraticHinge
    __del__ = lambda self: None
ModelQuadraticHinge_swigregister = _inference.ModelQuadraticHinge_swigregister
ModelQuadraticHinge_swigregister(ModelQuadraticHinge)

class ModelSmoothedHinge(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelSmoothedHinge class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', smoothness: 'double const', n_threads: 'int const'):
        """__init__(ModelSmoothedHinge self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, double const smoothness, int const n_threads) -> ModelSmoothedHinge"""
        this = _inference.new_ModelSmoothedHinge(features, labels, fit_intercept, smoothness, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get_smoothness(self) -> "double":
        """get_smoothness(ModelSmoothedHinge self) -> double"""
        return _inference.ModelSmoothedHinge_get_smoothness(self)


    def set_smoothness(self, smoothness: 'double') -> "void":
        """set_smoothness(ModelSmoothedHinge self, double smoothness)"""
        return _inference.ModelSmoothedHinge_set_smoothness(self, smoothness)

    __swig_destroy__ = _inference.delete_ModelSmoothedHinge
    __del__ = lambda self: None
ModelSmoothedHinge_swigregister = _inference.ModelSmoothedHinge_swigregister
ModelSmoothedHinge_swigregister(ModelSmoothedHinge)

class ModelAbsoluteRegression(ModelGeneralizedLinear):
    """Proxy of C++ ModelAbsoluteRegression class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelAbsoluteRegression
        __init__(ModelAbsoluteRegression self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelAbsoluteRegression
        """
        this = _inference.new_ModelAbsoluteRegression(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelAbsoluteRegression
    __del__ = lambda self: None
ModelAbsoluteRegression_swigregister = _inference.ModelAbsoluteRegression_swigregister
ModelAbsoluteRegression_swigregister(ModelAbsoluteRegression)

class ModelLinReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLinReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinReg"""
        this = _inference.new_ModelLinReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelLinReg
    __del__ = lambda self: None
ModelLinReg_swigregister = _inference.ModelLinReg_swigregister
ModelLinReg_swigregister(ModelLinReg)

class ModelLinRegWithIntercepts(ModelGeneralizedLinearWithIntercepts, ModelLinReg):
    """Proxy of C++ ModelLinRegWithIntercepts class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLinRegWithIntercepts self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLinRegWithIntercepts"""
        this = _inference.new_ModelLinRegWithIntercepts(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelLinRegWithIntercepts
    __del__ = lambda self: None
ModelLinRegWithIntercepts_swigregister = _inference.ModelLinRegWithIntercepts_swigregister
ModelLinRegWithIntercepts_swigregister(ModelLinRegWithIntercepts)

class ModelLogReg(ModelGeneralizedLinear, ModelLipschitz):
    """Proxy of C++ ModelLogReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelLogReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads) -> ModelLogReg"""
        this = _inference.new_ModelLogReg(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
        return _inference.ModelLogReg_sigmoid(x, out)

    sigmoid = staticmethod(sigmoid)

    def logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """logistic(ArrayDouble const & x, ArrayDouble & out)"""
        return _inference.ModelLogReg_logistic(x, out)

    logistic = staticmethod(logistic)
    __swig_destroy__ = _inference.delete_ModelLogReg
    __del__ = lambda self: None
ModelLogReg_swigregister = _inference.ModelLogReg_swigregister
ModelLogReg_swigregister(ModelLogReg)

def ModelLogReg_sigmoid(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_sigmoid(ArrayDouble const & x, ArrayDouble & out)"""
    return _inference.ModelLogReg_sigmoid(x, out)

def ModelLogReg_logistic(x: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
    """ModelLogReg_logistic(ArrayDouble const & x, ArrayDouble & out)"""
    return _inference.ModelLogReg_logistic(x, out)


_inference.LinkType_identity_swigconstant(_inference)
LinkType_identity = _inference.LinkType_identity

_inference.LinkType_exponential_swigconstant(_inference)
LinkType_exponential = _inference.LinkType_exponential
class ModelPoisReg(ModelGeneralizedLinear):
    """Proxy of C++ ModelPoisReg class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', link_type: 'LinkType const', fit_intercept: 'bool const', n_threads: 'int const'):
        """__init__(ModelPoisReg self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, LinkType const link_type, bool const fit_intercept, int const n_threads) -> ModelPoisReg"""
        this = _inference.new_ModelPoisReg(features, labels, link_type, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_link_type(self, link_type: 'LinkType') -> "void":
        """set_link_type(ModelPoisReg self, LinkType link_type)"""
        return _inference.ModelPoisReg_set_link_type(self, link_type)

    __swig_destroy__ = _inference.delete_ModelPoisReg
    __del__ = lambda self: None
ModelPoisReg_swigregister = _inference.ModelPoisReg_swigregister
ModelPoisReg_swigregister(ModelPoisReg)

class ModelCoxRegPartialLik(Model):
    """Proxy of C++ ModelCoxRegPartialLik class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', times: 'SArrayDoublePtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(ModelCoxRegPartialLik self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLik"""
        this = _inference.new_ModelCoxRegPartialLik(features, times, censoring)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _inference.delete_ModelCoxRegPartialLik
    __del__ = lambda self: None
ModelCoxRegPartialLik_swigregister = _inference.ModelCoxRegPartialLik_swigregister
ModelCoxRegPartialLik_swigregister(ModelCoxRegPartialLik)

class ModelSCCS(Model):
    """Proxy of C++ ModelSCCS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', labels: 'SArrayIntPtrList1D const &', censoring: 'SBaseArrayULongPtr const', n_lags: 'ulong'):
        """__init__(ModelSCCS self, SBaseArrayDouble2dPtrList1D const & features, SArrayIntPtrList1D const & labels, SBaseArrayULongPtr const censoring, ulong n_lags) -> ModelSCCS"""
        this = _inference.new_ModelSCCS(features, labels, censoring, n_lags)
        try:
            self.this.append(this)
        except:
            self.this = this

    def loss(self, coeffs: 'ArrayDouble &') -> "double":
        """loss(ModelSCCS self, ArrayDouble & coeffs) -> double"""
        return _inference.ModelSCCS_loss(self, coeffs)


    def grad(self, coeffs: 'ArrayDouble &', out: 'ArrayDouble &') -> "void":
        """grad(ModelSCCS self, ArrayDouble & coeffs, ArrayDouble & out)"""
        return _inference.ModelSCCS_grad(self, coeffs, out)


    def compute_lip_consts(self) -> "void":
        """compute_lip_consts(ModelSCCS self)"""
        return _inference.ModelSCCS_compute_lip_consts(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelSCCS self) -> unsigned long"""
        return _inference.ModelSCCS_get_rand_max(self)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelSCCS self) -> unsigned long"""
        return _inference.ModelSCCS_get_epoch_size(self)


    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelSCCS self) -> unsigned long"""
        return _inference.ModelSCCS_get_n_coeffs(self)


    def get_lip_max(self) -> "double":
        """get_lip_max(ModelSCCS self) -> double"""
        return _inference.ModelSCCS_get_lip_max(self)

    __swig_destroy__ = _inference.delete_ModelSCCS
    __del__ = lambda self: None
ModelSCCS_swigregister = _inference.ModelSCCS_swigregister
ModelSCCS_swigregister(ModelSCCS)


def PointProcessCondLaw(y_time: 'ArrayDouble &', z_time: 'ArrayDouble &', z_mark: 'ArrayDouble &', lags: 'ArrayDouble &', zmin: 'double', zmax: 'double', y_T: 'double', y_lambda: 'double', res_X: 'ArrayDouble &', res_Y: 'ArrayDouble &') -> "void":
    """PointProcessCondLaw(ArrayDouble & y_time, ArrayDouble & z_time, ArrayDouble & z_mark, ArrayDouble & lags, double zmin, double zmax, double y_T, double y_lambda, ArrayDouble & res_X, ArrayDouble & res_Y)"""
    return _inference.PointProcessCondLaw(y_time, z_time, z_mark, lags, zmin, zmax, y_T, y_lambda, res_X, res_Y)
class HawkesEM(ModelHawkesList):
    """Proxy of C++ HawkesEM class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HawkesEM self, double const kernel_support, ulong const kernel_size, int const max_n_threads=1) -> HawkesEM
        __init__(HawkesEM self, double const kernel_support, ulong const kernel_size) -> HawkesEM
        __init__(HawkesEM self, SArrayDoublePtr const kernel_discretization, int const max_n_threads=1) -> HawkesEM
        __init__(HawkesEM self, SArrayDoublePtr const kernel_discretization) -> HawkesEM
        """
        this = _inference.new_HawkesEM(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def allocate_weights(self) -> "void":
        """allocate_weights(HawkesEM self)"""
        return _inference.HawkesEM_allocate_weights(self)


    def solve(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "void":
        """solve(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels)"""
        return _inference.HawkesEM_solve(self, mu, kernels)


    def get_kernel_norms(self, kernels: 'ArrayDouble2d &') -> "SArrayDouble2dPtr":
        """get_kernel_norms(HawkesEM self, ArrayDouble2d & kernels) -> SArrayDouble2dPtr"""
        return _inference.HawkesEM_get_kernel_norms(self, kernels)


    def loglikelihood(self, mu: 'ArrayDouble &', kernels: 'ArrayDouble2d &') -> "double":
        """loglikelihood(HawkesEM self, ArrayDouble & mu, ArrayDouble2d & kernels) -> double"""
        return _inference.HawkesEM_loglikelihood(self, mu, kernels)


    def get_kernel_support(self) -> "double":
        """get_kernel_support(HawkesEM self) -> double"""
        return _inference.HawkesEM_get_kernel_support(self)


    def get_kernel_size(self) -> "ulong":
        """get_kernel_size(HawkesEM self) -> ulong"""
        return _inference.HawkesEM_get_kernel_size(self)


    def get_kernel_fixed_dt(self) -> "double":
        """get_kernel_fixed_dt(HawkesEM self) -> double"""
        return _inference.HawkesEM_get_kernel_fixed_dt(self)


    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        """get_kernel_discretization(HawkesEM self) -> SArrayDoublePtr"""
        return _inference.HawkesEM_get_kernel_discretization(self)


    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        """set_kernel_support(HawkesEM self, double const kernel_support)"""
        return _inference.HawkesEM_set_kernel_support(self, kernel_support)


    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        """set_kernel_size(HawkesEM self, ulong const kernel_size)"""
        return _inference.HawkesEM_set_kernel_size(self, kernel_size)


    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        """set_kernel_dt(HawkesEM self, double const kernel_dt)"""
        return _inference.HawkesEM_set_kernel_dt(self, kernel_dt)


    def set_kernel_discretization(self, kernel_discretization: 'SArrayDoublePtr const') -> "void":
        """set_kernel_discretization(HawkesEM self, SArrayDoublePtr const kernel_discretization)"""
        return _inference.HawkesEM_set_kernel_discretization(self, kernel_discretization)

    __swig_destroy__ = _inference.delete_HawkesEM
    __del__ = lambda self: None
HawkesEM_swigregister = _inference.HawkesEM_swigregister
HawkesEM_swigregister(HawkesEM)

class HawkesADM4(ModelHawkesList):
    """Proxy of C++ HawkesADM4 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', rho: 'double const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(HawkesADM4 self, double const decay, double const rho, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesADM4
        __init__(HawkesADM4 self, double const decay, double const rho, int const max_n_threads=1) -> HawkesADM4
        __init__(HawkesADM4 self, double const decay, double const rho) -> HawkesADM4
        """
        this = _inference.new_HawkesADM4(decay, rho, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def solve(self, mu: 'ArrayDouble &', auv: 'ArrayDouble2d &', z1uv: 'ArrayDouble2d &', z2uv: 'ArrayDouble2d &', u1uv: 'ArrayDouble2d &', u2uv: 'ArrayDouble2d &') -> "void":
        """solve(HawkesADM4 self, ArrayDouble & mu, ArrayDouble2d & auv, ArrayDouble2d & z1uv, ArrayDouble2d & z2uv, ArrayDouble2d & u1uv, ArrayDouble2d & u2uv)"""
        return _inference.HawkesADM4_solve(self, mu, auv, z1uv, z2uv, u1uv, u2uv)


    def compute_weights(self) -> "void":
        """compute_weights(HawkesADM4 self)"""
        return _inference.HawkesADM4_compute_weights(self)


    def get_decay(self) -> "double":
        """get_decay(HawkesADM4 self) -> double"""
        return _inference.HawkesADM4_get_decay(self)


    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(HawkesADM4 self, double const decay)"""
        return _inference.HawkesADM4_set_decay(self, decay)


    def get_rho(self) -> "double":
        """get_rho(HawkesADM4 self) -> double"""
        return _inference.HawkesADM4_get_rho(self)


    def set_rho(self, rho: 'double const') -> "void":
        """set_rho(HawkesADM4 self, double const rho)"""
        return _inference.HawkesADM4_set_rho(self, rho)

    __swig_destroy__ = _inference.delete_HawkesADM4
    __del__ = lambda self: None
HawkesADM4_swigregister = _inference.HawkesADM4_swigregister
HawkesADM4_swigregister(HawkesADM4)

class HawkesBasisKernels(ModelHawkesList):
    """Proxy of C++ HawkesBasisKernels class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, D: 'ulong const', kernel_dt: 'double const', kernel_tmax: 'double const', alpha: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(HawkesBasisKernels self, ulong const D, double const kernel_dt, double const kernel_tmax, double const alpha, int const max_n_threads=1) -> HawkesBasisKernels
        __init__(HawkesBasisKernels self, ulong const D, double const kernel_dt, double const kernel_tmax, double const alpha) -> HawkesBasisKernels
        """
        this = _inference.new_HawkesBasisKernels(D, kernel_dt, kernel_tmax, alpha, max_n_threads)
        try:
            self.this.append(this)
        except:
            self.this = this

    def solve(self, mu: 'ArrayDouble &', gdm: 'ArrayDouble2d &', auvd: 'ArrayDouble2d &', max_iter_gdm: 'ulong', max_tol_gdm: 'double') -> "double":
        """solve(HawkesBasisKernels self, ArrayDouble & mu, ArrayDouble2d & gdm, ArrayDouble2d & auvd, ulong max_iter_gdm, double max_tol_gdm) -> double"""
        return _inference.HawkesBasisKernels_solve(self, mu, gdm, auvd, max_iter_gdm, max_tol_gdm)


    def get_kernel_support(self) -> "double":
        """get_kernel_support(HawkesBasisKernels self) -> double"""
        return _inference.HawkesBasisKernels_get_kernel_support(self)


    def get_kernel_size(self) -> "ulong":
        """get_kernel_size(HawkesBasisKernels self) -> ulong"""
        return _inference.HawkesBasisKernels_get_kernel_size(self)


    def get_kernel_dt(self) -> "double":
        """get_kernel_dt(HawkesBasisKernels self) -> double"""
        return _inference.HawkesBasisKernels_get_kernel_dt(self)


    def get_n_basis(self) -> "ulong":
        """get_n_basis(HawkesBasisKernels self) -> ulong"""
        return _inference.HawkesBasisKernels_get_n_basis(self)


    def get_alpha(self) -> "double":
        """get_alpha(HawkesBasisKernels self) -> double"""
        return _inference.HawkesBasisKernels_get_alpha(self)


    def get_kernel_discretization(self) -> "SArrayDoublePtr":
        """get_kernel_discretization(HawkesBasisKernels self) -> SArrayDoublePtr"""
        return _inference.HawkesBasisKernels_get_kernel_discretization(self)


    def set_kernel_support(self, kernel_support: 'double const') -> "void":
        """set_kernel_support(HawkesBasisKernels self, double const kernel_support)"""
        return _inference.HawkesBasisKernels_set_kernel_support(self, kernel_support)


    def set_kernel_size(self, kernel_size: 'ulong const') -> "void":
        """set_kernel_size(HawkesBasisKernels self, ulong const kernel_size)"""
        return _inference.HawkesBasisKernels_set_kernel_size(self, kernel_size)


    def set_kernel_dt(self, kernel_dt: 'double const') -> "void":
        """set_kernel_dt(HawkesBasisKernels self, double const kernel_dt)"""
        return _inference.HawkesBasisKernels_set_kernel_dt(self, kernel_dt)


    def set_n_basis(self, n_basis: 'ulong const') -> "void":
        """set_n_basis(HawkesBasisKernels self, ulong const n_basis)"""
        return _inference.HawkesBasisKernels_set_n_basis(self, n_basis)


    def set_alpha(self, alpha: 'double const') -> "void":
        """set_alpha(HawkesBasisKernels self, double const alpha)"""
        return _inference.HawkesBasisKernels_set_alpha(self, alpha)

    __swig_destroy__ = _inference.delete_HawkesBasisKernels
    __del__ = lambda self: None
HawkesBasisKernels_swigregister = _inference.HawkesBasisKernels_swigregister
HawkesBasisKernels_swigregister(HawkesBasisKernels)

class HawkesSumGaussians(ModelHawkesList):
    """Proxy of C++ HawkesSumGaussians class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, n_gaussians: 'ulong const', max_mean_gaussian: 'double const', step_size: 'double const', strength_lasso: 'double const', strength_grouplasso: 'double const', em_max_iter: 'ulong const', max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter, int const max_n_threads=1, unsigned int const optimization_level=0) -> HawkesSumGaussians
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter, int const max_n_threads=1) -> HawkesSumGaussians
        __init__(HawkesSumGaussians self, ulong const n_gaussians, double const max_mean_gaussian, double const step_size, double const strength_lasso, double const strength_grouplasso, ulong const em_max_iter) -> HawkesSumGaussians
        """
        this = _inference.new_HawkesSumGaussians(n_gaussians, max_mean_gaussian, step_size, strength_lasso, strength_grouplasso, em_max_iter, max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except:
            self.this = this

    def compute_weights(self) -> "void":
        """compute_weights(HawkesSumGaussians self)"""
        return _inference.HawkesSumGaussians_compute_weights(self)


    def solve(self, mu: 'ArrayDouble &', amplitudes: 'ArrayDouble2d &') -> "void":
        """solve(HawkesSumGaussians self, ArrayDouble & mu, ArrayDouble2d & amplitudes)"""
        return _inference.HawkesSumGaussians_solve(self, mu, amplitudes)


    def get_n_gaussians(self) -> "ulong":
        """get_n_gaussians(HawkesSumGaussians self) -> ulong"""
        return _inference.HawkesSumGaussians_get_n_gaussians(self)


    def set_n_gaussians(self, n_gaussians: 'ulong const') -> "void":
        """set_n_gaussians(HawkesSumGaussians self, ulong const n_gaussians)"""
        return _inference.HawkesSumGaussians_set_n_gaussians(self, n_gaussians)


    def get_em_max_iter(self) -> "ulong":
        """get_em_max_iter(HawkesSumGaussians self) -> ulong"""
        return _inference.HawkesSumGaussians_get_em_max_iter(self)


    def set_em_max_iter(self, em_max_iter: 'ulong const') -> "void":
        """set_em_max_iter(HawkesSumGaussians self, ulong const em_max_iter)"""
        return _inference.HawkesSumGaussians_set_em_max_iter(self, em_max_iter)


    def get_max_mean_gaussian(self) -> "double":
        """get_max_mean_gaussian(HawkesSumGaussians self) -> double"""
        return _inference.HawkesSumGaussians_get_max_mean_gaussian(self)


    def set_max_mean_gaussian(self, max_mean_gaussian: 'double const') -> "void":
        """set_max_mean_gaussian(HawkesSumGaussians self, double const max_mean_gaussian)"""
        return _inference.HawkesSumGaussians_set_max_mean_gaussian(self, max_mean_gaussian)


    def get_step_size(self) -> "double":
        """get_step_size(HawkesSumGaussians self) -> double"""
        return _inference.HawkesSumGaussians_get_step_size(self)


    def set_step_size(self, step_size: 'double const') -> "void":
        """set_step_size(HawkesSumGaussians self, double const step_size)"""
        return _inference.HawkesSumGaussians_set_step_size(self, step_size)


    def get_strength_lasso(self) -> "double":
        """get_strength_lasso(HawkesSumGaussians self) -> double"""
        return _inference.HawkesSumGaussians_get_strength_lasso(self)


    def set_strength_lasso(self, strength_lasso: 'double const') -> "void":
        """set_strength_lasso(HawkesSumGaussians self, double const strength_lasso)"""
        return _inference.HawkesSumGaussians_set_strength_lasso(self, strength_lasso)


    def get_strength_grouplasso(self) -> "double":
        """get_strength_grouplasso(HawkesSumGaussians self) -> double"""
        return _inference.HawkesSumGaussians_get_strength_grouplasso(self)


    def set_strength_grouplasso(self, strength_grouplasso: 'double const') -> "void":
        """set_strength_grouplasso(HawkesSumGaussians self, double const strength_grouplasso)"""
        return _inference.HawkesSumGaussians_set_strength_grouplasso(self, strength_grouplasso)

    __swig_destroy__ = _inference.delete_HawkesSumGaussians
    __del__ = lambda self: None
HawkesSumGaussians_swigregister = _inference.HawkesSumGaussians_swigregister
HawkesSumGaussians_swigregister(HawkesSumGaussians)



