'''
Created on 25.08.2010

@author: raidan
'''
from fw_patches.FwConst import DEFAULT_ENCODING, SYSOBJECTS_DIR, \
    INSTALL_SCRIPTS_DIR, SCHEMA_VERSION, SCHEMA_VERSION_TEMPLATE, VERSION, \
    SCHEMA_VERSION_PROJECT_TEMPLATE
import glob
import sys
import os
import getopt
import subprocess
from fw_patches.Prepare import PatchPrepare


class GenerateScript():
    def __init__(self, schemaVersion):
        print("Forward Installation system. V. {0}. Installing {1}".format(VERSION, schemaVersion))
        self.setScriptPrefix(INSTALL_SCRIPTS_DIR)
        self.setSourcePrefix(SYSOBJECTS_DIR)
        self.setSysScripts()
        self.setScripts()
        self.setTestScripts()
        self.setPostScripts()
        self.setMigrateScripts()
        
        self.system = schemaVersion
        self.generatedFiles = None
        
        self.prepare = PatchPrepare(settingsFile=None)

        
    def setIgnoreVerXXXXX(self, ignore):
        self.prepare.setIgnoreVerXXXXX(ignore)
        
    def autoInit(self):
        args = sys.argv[1:]
        print("Available args:", args)
        if len(args) < 6:
            print("Usage python3.1 script.py --dir=<root directory> --script=<script path> \
--database=<db name from tnsnames> --sys=<sys_login/sys_password> --schema=<schema name> \
--schema_passw=<schema_password> [--test] [--dbtype=<database type>] [--migrate] \
[--options=<opt1, opt2>] [--options-only] [--noSYS] [--onlySYS] [--notest]")
            return False
        try:
            optlist = getopt.getopt(args, '', ['dir=', 'script=', 'database=', 'sys=', 'schema=', \
                                              'schema_passw=', 'test', 'dbtype=', 'migrate', 'options=', \
                                              'options-only', 'noSYS', 'onlySYS', 'notest'])
        except Exception as e:
            print (e) # will print something like "option -a not recognized"
            sys.exit(2)

        optmap = dict(optlist[0])
        
        # dirName
        dirName = optmap.get('--dir')
        if dirName[:1] == '.':
            dirName = os.path.realpath(os.path.dirname(sys.argv[0]) + "/" + dirName)
        self.dirName = dirName + "/"

        self.schema = optmap.get('--schema')
        self.password = optmap.get('--schema_passw')
        database = optmap.get('--database')
        
        self.sysAccount = '"{0}"@{1} as sysdba'.format(optmap.get('--sys'), database)
        self.account = '{0}/{1}@{2}'.format(self.schema, self.password, database)
        self.hasTest = '--test' in optmap and not '--notest' in optmap
        self.noSYS = '--noSYS' in optmap
        self.onlySYS = '--onlySYS' in optmap
        self.type = None
        if '--dbtype' in optmap:
            tmp = optmap.get('--dbtype')
            if tmp != "":
                self.type = tmp
        
        self.typedScripts = None
        self.hasMigrate = False
        if '--migrate' in optmap:
            self.hasMigrate = True
        
        self.optionsMap = dict()
        self.optionsTestMap = dict()
        self.optionsVersionMap = dict()
        self.options = None
        if '--options' in optmap:
            tmp = optmap.get('--options')
            if tmp != "":
                self.options = tmp.split(',')
            
        self.optionsOnly = False
        if '--options-only' in optmap:
            self.optionsOnly = True
        
        self.stdout = sys.stdout
        if '--script' in optmap:
            logName = optmap.get('--script') + ".log"
            print("\n\n------------------------------\nExecuting script. See log in", logName)
            sys.stdout = open(logName, mode='w', encoding=DEFAULT_ENCODING)
         
        return True
    
    def setScriptPrefix(self, scriptPrefix):
        self.scriptPrefix = scriptPrefix
    
    def setSourcePrefix(self, sourcePrefix):
        self.sourcePrefix = sourcePrefix
        
    def setSysScripts(self, *sysScriptNames):
        self.sysScriptNames = sysScriptNames
        
    def setScripts(self, *scriptNames):
        self.scriptNames = scriptNames
        
    def setTestScripts(self, *testScriptNames):
        self.testScriptNames = testScriptNames
        
    def setPostScripts(self, *postScriptNames):
        self.postScriptNames = postScriptNames
        
    def setAutoGenerateDirs(self, *dirs):
        self.dirs = dirs
     
    def setAutoGenerateDirArray(self, dirs):
        self.dirs = dirs
        
    def setTypedScripts(self, type, *typedScripts):
        if self.type == type:
            print('Using typed {0}'.format(type), file=self.stdout)
            self.typedScripts = typedScripts
            
    def setMigrateScripts(self, *migrateScriptNames):
        self.migrateScriptNames = migrateScriptNames
        
    def addOptionScripts(self, optionName, *optionScriptNames):
        if self.options is None:
            return
        
        if optionName in self.options:
            print(' + option {0}'.format(optionName), file=self.stdout)
            self.optionsMap[optionName] = optionScriptNames
            
    def addOptionTestScripts(self, optionName, *optionScriptNames):
        if self.options is None:
            return
        
        if optionName in self.options:
            self.optionsTestMap[optionName] = optionScriptNames
            
    def addOptionVersionScript(self, optionName, versionScript):
        if self.options is None:
            return
        
        if optionName in self.options:
            self.optionsVersionMap[optionName] = versionScript
        
    def generate(self, readonly=False):
        try:
            self.createTemplatesImpl()
            
            if not self.optionsOnly and not self.noSYS and self.sysScriptNames:
                self.runScriptsImpl(readonly, self.sysAccount, 'SYS', self.sysScriptNames)
                
            if not self.onlySYS:
                if not self.optionsOnly and self.scriptNames:
                    self.runScriptsImpl(readonly, self.account, 'INIT', self.scriptNames)
                    
                if not self.optionsOnly and self.typedScripts:
                    self.runScriptsImpl(readonly, self.account, 'TYPED', self.typedScripts)
                   
                for k, v in self.optionsMap.items():
                    self.runScriptsImpl(readonly, self.account, 'OPTION "' + k + '"', v)
                
                if not self.optionsOnly and self.hasTest:
                    if self.testScriptNames:
                        self.runScriptsImpl(readonly, self.account, 'TEST', self.testScriptNames)
                    if self.optionsTestMap is not None:
                        for k, v in self.optionsTestMap.items():
                            self.runScriptsImpl(readonly, self.account, 'TEST OPTION "' + k + '"', v)
                
                if not self.optionsOnly and  self.hasMigrate and self.migrateScriptNames:
                    self.runScriptsImpl(readonly, self.account, 'MIGRATE', self.migrateScriptNames)
                    
                if self.postScriptNames:
                    self.runScriptsImpl(readonly, self.account, 'POST', self.postScriptNames)
        finally:
            self.removeTemplatesImpl()
        
    def runScriptsImpl(self, readonly, account, descr, list):
        if list is None:
            return
        
        for pos, file in enumerate(list):
            print("Executing '{3}' {0} of {1}: '{2}'".format(pos , len(list), file, descr), file=self.stdout)
            
            line = ('sqlplus -L {account} @' + self.scriptPrefix + file).format(account=account, \
                                                                             schema=self.schema, \
                                                                             password=self.password)
            print ("\n------\nExecute: {0}\n".format(line))
            if not readonly:
                proc = subprocess.Popen(line, bufsize=10, shell=True, stdin=subprocess.PIPE, stdout=sys.stdout)
                proc.communicate()
                ret = proc.wait()
                if ret != 0:
                    raise BaseException('Failed executing script {0}. Return error code: {1}'.format(line, ret))
                
                            
    def updateLastVersion(self):
        target = SYSOBJECTS_DIR + SCHEMA_VERSION
        with open(target, mode='w', encoding=DEFAULT_ENCODING) as file:
            ver, dest, required_file = self.prepare.get_current_version('re')
            print ("Using last version {0}, SYSTEM '{1}'".format(ver, self.system))
            file.write(SCHEMA_VERSION_TEMPLATE.format(self.system, ver))
            
        if self.options is not None:
            for option in self.options:
                self.updateLastVersionSingle(option)
            
    def updateLastVersionSingle(self, option):
        if not option in self.optionsVersionMap:
            return

        target = SYSOBJECTS_DIR + self.optionsVersionMap[option]
        with open(target, mode='w', encoding=DEFAULT_ENCODING) as file:
            self.prepare.setPatchesDir("option_" + option + "/patches/")
            ver, dest, required_file = self.prepare.get_current_version('re')
            projname = option.upper()
            print ("Using last version {0}, PROJECT '{1}'".format(ver, projname))
            file.write(SCHEMA_VERSION_PROJECT_TEMPLATE.format(projname, ver))

    
    def createTemplatesImpl(self):
        '''
        Start processing script
        '''
        print("Preparing auto generated scripts...", file=self.stdout)
        
        self.updateLastVersion()
        
        self.generatedFiles = []
        
        prefix = self.dirName + self.sourcePrefix
        
        for dir in self.dirs:
            parts = dir.split(":")
            target = prefix + parts[0]
            
            relDir = os.path.split(parts[0])[0] + "/"
            if relDir[0:3] == '../':
                relDir = relDir[3:]
            else:
                relDir = self.sourcePrefix + relDir
            
            topdir = os.path.dirname(target)
            topTargetName = os.path.realpath(target)[len(topdir) + 1:]
            print("Using top target name", topTargetName)
            
            
            if not os.path.exists(topdir):
                print ("Ignore dir", topdir)
                continue
            
            print ("=", target)
            with open(target, mode='w', encoding=DEFAULT_ENCODING) as file:
                file.write("")

            self.generatedFiles.append(target)
            
            refs = []
            excludes = []
            subdirs = parts[1].split(",")
            for sub in subdirs:
                sub = sub.lstrip()
                exclude = False
                toplevel = False
                if sub[:1] == '-':
                    sub = sub[1:]
                    exclude = True
                if sub[:1] == '!':
                    sub = sub[1:]
                    toplevel = True
                
                sub = prefix + sub
                dir, template = os.path.split(sub)
                print (" + ", sub, exclude)
                

                for dirpath, dirnames, filenames in os.walk(dir):
                    if toplevel and dirpath != dir:
                        print (" ++ !dirskip " + dirpath)
                        continue 
                    if dirpath.find('.svn') == -1:
                        for found in glob.glob(dirpath + "/" + template):
                            filename = found[len(topdir) + 1:]
                            if filename != topTargetName:
                                filename = relDir + filename
                                if exclude:
                                    print (" ++ exclude", filename)
                                    excludes.append(filename)
                                else:
                                    print (" ++ ref", filename)
                                    ## drop old and create new
                                    try:
                                        refs.remove(filename)
                                    except:
                                        None
                                    refs.append(filename)
            for e in excludes:
                if refs.count(e) > 0:
                    refs.remove(e)
            
                                
            with open(target, mode='a', encoding=DEFAULT_ENCODING) as file:
                for ref in refs:
                    file.write('@{0}\n'.format(ref))

    def removeTemplatesImpl(self):
        print("Removing generated files", file=self.stdout)
        if not self.generatedFiles is None:
            for target in self.generatedFiles:
                print("Removing file:", target)
                os.remove(target)
