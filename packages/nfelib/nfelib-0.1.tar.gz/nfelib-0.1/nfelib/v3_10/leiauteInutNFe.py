#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Nov  2 13:11:10 2017 by generateDS.py version 2.28b.
# Python 3.5.2 (default, Sep 14 2017, 22:51:06)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('-o', 'nfelib/v3_10/leiauteInutNFe.py')
#
# Command line arguments:
#   schemas/v3_10/leiauteInutNFe_v3.10.xsd
#
# Command line:
#   /home/rvalyi/DEV/generateds/generateDS.py -o "nfelib/v3_10/leiauteInutNFe.py" schemas/v3_10/leiauteInutNFe_v3.10.xsd
#
# Current working directory (os.getcwd()):
#   nfelib
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#


try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')

        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name

            def utcoffset(self, dt):
                return self.__offset

            def tzname(self, dt):
                return self.__name

            def dst(self, dt):
                return None

        def gds_format_string(self, input_data, input_name=''):
            return input_data

        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data

        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)

        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data

        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values

        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')

        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values

        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data

        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values

        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()

        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)

        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values

        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt

        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue

        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()

        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data

        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue

        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1

        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()

        def gds_str_lower(self, instring):
            return instring.lower()

        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')

        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)

        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1

        def gds_build_any(self, node, type_name=None):
            return None

        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))

        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring

        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result

        def __eq__(self, other):
            if not isinstance(self, type(other)):
                return False
            return self.__dict__ == other.__dict__

        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
# ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
# exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8

    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value

    def getCategory(self):
        return self.category

    def getContenttype(self, content_type):
        return self.content_type

    def getValue(self):
        return self.value

    def getName(self):
        return self.name

    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)

    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))

    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)

    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text

    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
                 optional=0, child_attrs=None, choice=None, complex=0, _help=""):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
        self.complex = complex
        self._help = _help

    def set_name(self, name): self.name = name

    def get_name(self): return self.name

    def set_data_type(self, data_type): self.data_type = data_type

    def get_data_type_chain(self): return self.data_type

    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def get_primary_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[0]
            else:
                return 'xs:string'
        else:
            return self.data_type

    def set_container(self, container): self.container = container

    def get_container(self): return self.container

    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs

    def get_child_attrs(self): return self.child_attrs

    def set_choice(self, choice): self.choice = choice

    def get_choice(self): return self.choice

    def set_optional(self, optional): self.optional = optional

    def get_optional(self): return self.optional

    def get_complex(self): return self.complex

    def get_help(self): return self._help


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


SimpleTypes = {
    "CNPJ": """Tipo Número do CNPJ""",
    "ano": """ Tipo ano""",
    "xServ": """Serviço Solicitado""",
    "DigestValue": """""",
    "nNFFin": """Tipo Número do Documento Fiscal""",
    "verAplic": """Tipo Versão do Aplicativo""",
    "mod": """Tipo Modelo Documento Fiscal""",
    "cStat": """Tipo Código da Mensagem enviada""",
    "nProt": """Tipo Número do Protocolo de Status""",
    "xMotivo": """Tipo Motivo""",
    "nNFIni": """Tipo Número do Documento Fiscal""",
    "tpAmb": """Tipo Ambiente""",
    "serie": """Tipo Série do Documento Fiscal """,
    "cUF": """Tipo Código da UF da tabela do IBGE""",
    "xJust": """Tipo Justificativa""",
    "dhRecbto": """Data e Hora, formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde TZD = +hh:mm ou -hh:mm)""",
}


STEnumerations = {
    "tpAmb": ['1', '2'],
    "cUF": ['11', '12', '13', '14', '15', '16', '17', '21', '22', '23', '24', '25', '26', '27', '28', '29', '31', '32', '33', '35', '41', '42', '43', '50', '51', '52', '53'],
    "xServ": ['INUTILIZAR'],
    "mod": ['55', '65'],
}


AutoMany2ones = {
    "Transform": "Transforms",
}


class TInutNFe(GeneratedsSuper):
    """Tipo Pedido de Inutilização de Numeração da Nota Fiscal Eletrônica"""
    subclass = None
    superclass = None

    def __init__(self, versao=None, infInut=None, Signature=None):
        self.original_tagname_ = None
        self.versao = _cast(None, versao)
        self.infInut = infInut
        self.Signature = Signature

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TInutNFe)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TInutNFe.subclass:
            return TInutNFe.subclass(*args_, **kwargs_)
        else:
            return TInutNFe(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_infInut(self): return self.infInut

    def set_infInut(self, infInut): self.infInut = infInut

    def get_Signature(self): return self.Signature

    def set_Signature(self, Signature): self.Signature = Signature

    def get_versao(self): return self.versao

    def set_versao(self, versao): self.versao = versao

    def validate_TVerInutNFe(self, value):
        # Validate type TVerInutNFe, a restriction on xs:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TVerInutNFe_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TVerInutNFe_patterns_, ))
    validate_TVerInutNFe_patterns_ = [['^3\\.10$']]

    def hasContent_(self):
        if (
            self.infInut is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='TInutNFe',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TInutNFe')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='TInutNFe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='TInutNFe',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level,
                         already_processed, namespace_='', name_='TInutNFe'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='TInutNFe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.infInut is not None:
            self.infInut.export(
                outfile,
                level,
                namespace_,
                name_='infInut',
                pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(
                outfile,
                level,
                namespace_='ds:',
                name_='Signature',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_TVerInutNFe(
                self.versao)    # validate type TVerInutNFe

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'infInut':
            obj_ = infInutType.factory()
            obj_.build(child_)
            self.infInut = obj_
            obj_.original_tagname_ = 'infInut'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class TInutNFe


class TRetInutNFe(GeneratedsSuper):
    """Tipo retorno do Pedido de Inutilização de Numeração da Nota Fiscal
    Eletrônica"""
    subclass = None
    superclass = None

    def __init__(self, versao=None, infInut=None, Signature=None):
        self.original_tagname_ = None
        self.versao = _cast(None, versao)
        self.infInut = infInut
        self.Signature = Signature

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRetInutNFe)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRetInutNFe.subclass:
            return TRetInutNFe.subclass(*args_, **kwargs_)
        else:
            return TRetInutNFe(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_infInut(self): return self.infInut

    def set_infInut(self, infInut): self.infInut = infInut

    def get_Signature(self): return self.Signature

    def set_Signature(self, Signature): self.Signature = Signature

    def get_versao(self): return self.versao

    def set_versao(self, versao): self.versao = versao

    def validate_TVerInutNFe(self, value):
        # Validate type TVerInutNFe, a restriction on xs:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TVerInutNFe_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TVerInutNFe_patterns_, ))
    validate_TVerInutNFe_patterns_ = [['^3\\.10$']]

    def hasContent_(self):
        if (
            self.infInut is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='TRetInutNFe',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRetInutNFe')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='TRetInutNFe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='TRetInutNFe',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='TRetInutNFe'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='TRetInutNFe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.infInut is not None:
            self.infInut.export(
                outfile,
                level,
                namespace_,
                name_='infInut',
                pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(
                outfile,
                level,
                namespace_='ds:',
                name_='Signature',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_TVerInutNFe(
                self.versao)    # validate type TVerInutNFe

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'infInut':
            obj_ = infInutType1.factory()
            obj_.build(child_)
            self.infInut = obj_
            obj_.original_tagname_ = 'infInut'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class TRetInutNFe


class TProcInutNFe(GeneratedsSuper):
    """Tipo Pedido de inutilzação de númeração de NF-e processado"""
    subclass = None
    superclass = None

    def __init__(self, versao=None, inutNFe=None, retInutNFe=None):
        self.original_tagname_ = None
        self.versao = _cast(None, versao)
        self.inutNFe = inutNFe
        self.retInutNFe = retInutNFe

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TProcInutNFe)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TProcInutNFe.subclass:
            return TProcInutNFe.subclass(*args_, **kwargs_)
        else:
            return TProcInutNFe(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_inutNFe(self): return self.inutNFe

    def set_inutNFe(self, inutNFe): self.inutNFe = inutNFe

    def get_retInutNFe(self): return self.retInutNFe

    def set_retInutNFe(self, retInutNFe): self.retInutNFe = retInutNFe

    def get_versao(self): return self.versao

    def set_versao(self, versao): self.versao = versao

    def validate_TVerInutNFe(self, value):
        # Validate type TVerInutNFe, a restriction on xs:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TVerInutNFe_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TVerInutNFe_patterns_, ))
    validate_TVerInutNFe_patterns_ = [['^3\\.10$']]

    def hasContent_(self):
        if (
            self.inutNFe is not None or
            self.retInutNFe is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='TProcInutNFe', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TProcInutNFe')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='TProcInutNFe')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='TProcInutNFe',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='TProcInutNFe'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='TProcInutNFe', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.inutNFe is not None:
            self.inutNFe.export(
                outfile,
                level,
                namespace_,
                name_='inutNFe',
                pretty_print=pretty_print)
        if self.retInutNFe is not None:
            self.retInutNFe.export(
                outfile,
                level,
                namespace_,
                name_='retInutNFe',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_TVerInutNFe(
                self.versao)    # validate type TVerInutNFe

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'inutNFe':
            obj_ = TInutNFe.factory()
            obj_.build(child_)
            self.inutNFe = obj_
            obj_.original_tagname_ = 'inutNFe'
        elif nodeName_ == 'retInutNFe':
            obj_ = TRetInutNFe.factory()
            obj_.build(child_)
            self.retInutNFe = obj_
            obj_.original_tagname_ = 'retInutNFe'
# end class TProcInutNFe


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, SignedInfo=None,
                 SignatureValue=None, KeyInfo=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_SignedInfo(self): return self.SignedInfo

    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo

    def get_SignatureValue(self): return self.SignatureValue

    def set_SignatureValue(
        self, SignatureValue): self.SignatureValue = SignatureValue

    def get_KeyInfo(self): return self.KeyInfo

    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='SignatureType',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='SignatureType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(
                outfile,
                level,
                namespace_,
                name_='SignedInfo',
                pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(
                outfile,
                level,
                namespace_,
                name_='SignatureValue',
                pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(
                outfile,
                level,
                namespace_,
                name_='KeyInfo',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, valueOf_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def get_valueOf_(self): return self.valueOf_

    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_

    def hasContent_(self):
        if (
            1 if type(self.valueOf_) in [int, float] else self.valueOf_
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='SignatureValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='SignatureValueType',
                pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, CanonicalizationMethod=None,
                 SignatureMethod=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        self.Reference = Reference

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod

    def set_CanonicalizationMethod(
        self,
        CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod

    def get_SignatureMethod(self): return self.SignatureMethod

    def set_SignatureMethod(
        self, SignatureMethod): self.SignatureMethod = SignatureMethod

    def get_Reference(self): return self.Reference

    def set_Reference(self, Reference): self.Reference = Reference

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='SignedInfoType',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='SignedInfoType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(
                outfile,
                level,
                namespace_,
                name_='CanonicalizationMethod',
                pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(
                outfile,
                level,
                namespace_,
                name_='SignatureMethod',
                pretty_print=pretty_print)
        if self.Reference is not None:
            self.Reference.export(
                outfile,
                level,
                namespace_,
                name_='Reference',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference = obj_
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, URI=None, Type=None,
                 Transforms=None, DigestMethod=None, DigestValue=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
        self.validate_DigestValueType(self.DigestValue)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Transforms(self): return self.Transforms

    def set_Transforms(self, Transforms): self.Transforms = Transforms

    def get_DigestMethod(self): return self.DigestMethod

    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod

    def get_DigestValue(self): return self.DigestValue

    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def get_URI(self): return self.URI

    def set_URI(self, URI): self.URI = URI

    def get_Type(self): return self.Type

    def set_Type(self, Type): self.Type = Type

    def validate_DigestValueType(self, value):
        # Validate type DigestValueType, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass

    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='ReferenceType',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='ReferenceType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(
                outfile,
                level,
                namespace_,
                name_='Transforms',
                pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(
                outfile,
                level,
                namespace_,
                name_='DigestMethod',
                pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sDigestValue>%s</%sDigestValue>%s' %
                (namespace_,
                 self.gds_format_base64(
                     self.DigestValue,
                     input_name='DigestValue'),
                    namespace_,
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(
                        child_,
                        'requires base64 encoded string: %s' %
                        exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
            # validate type DigestValueType
            self.validate_DigestValueType(self.DigestValue)
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Transform=None):
        self.original_tagname_ = None
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Transform(self): return self.Transform

    def set_Transform(self, Transform): self.Transform = Transform

    def add_Transform(self, value): self.Transform.append(value)

    def insert_Transform_at(
        self,
        index,
        value): self.Transform.insert(
        index,
        value)

    def replace_Transform_at(self, index, value): self.Transform[index] = value

    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='TransformsType',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='TransformsType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='TransformsType'):
        pass

    def exportChildren(self, outfile, level, namespace_='',
                       name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(
                outfile,
                level,
                namespace_,
                name_='Transform',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Algorithm=None, XPath=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_XPath(self): return self.XPath

    def set_XPath(self, XPath): self.XPath = XPath

    def add_XPath(self, value): self.XPath.append(value)

    def insert_XPath_at(self, index, value): self.XPath.insert(index, value)

    def replace_XPath_at(self, index, value): self.XPath[index] = value

    def get_Algorithm(self): return self.Algorithm

    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm

    def hasContent_(self):
        if (
            self.XPath
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='TransformType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='TransformType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='TransformType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for XPath_ in self.XPath:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sXPath>%s</%sXPath>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(XPath_),
            input_name='XPath')),
                    namespace_,
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'XPath':
            XPath_ = child_.text
            XPath_ = self.gds_validate_string(XPath_, node, 'XPath')
            self.XPath.append(XPath_)
# end class TransformType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, X509Data=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.X509Data = X509Data

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_X509Data(self): return self.X509Data

    def set_X509Data(self, X509Data): self.X509Data = X509Data

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def hasContent_(self):
        if (
            self.X509Data is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='', name_='KeyInfoType',
               namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='KeyInfoType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509Data is not None:
            self.X509Data.export(
                outfile,
                level,
                namespace_,
                name_='X509Data',
                pretty_print=pretty_print)

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            self.X509Data = obj_
            obj_.original_tagname_ = 'X509Data'
# end class KeyInfoType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, X509Certificate=None):
        self.original_tagname_ = None
        self.X509Certificate = X509Certificate

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_X509Certificate(self): return self.X509Certificate

    def set_X509Certificate(
        self, X509Certificate): self.X509Certificate = X509Certificate

    def hasContent_(self):
        if (
            self.X509Certificate is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='X509DataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='X509DataType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='X509DataType'):
        pass

    def exportChildren(self, outfile, level, namespace_='',
                       name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509Certificate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sX509Certificate>%s</%sX509Certificate>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.X509Certificate),
            input_name='X509Certificate')),
                    namespace_,
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        pass

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(
                X509Certificate_, node, 'X509Certificate')
            self.X509Certificate = X509Certificate_
# end class X509DataType


class infInutType(GeneratedsSuper):
    """Dados do Pedido de Inutilização de Numeração da Nota Fiscal Eletrônica"""
    subclass = None
    superclass = None

    def __init__(self, Id=None, tpAmb=None, xServ=None, cUF=None, ano=None,
                 CNPJ=None, mod=None, serie=None, nNFIni=None, nNFFin=None, xJust=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.tpAmb = tpAmb
        self.validate_TAmb(self.tpAmb)
        self.xServ = xServ
        self.validate_xServType(self.xServ)
        self.cUF = cUF
        self.validate_TCodUfIBGE(self.cUF)
        self.ano = ano
        self.validate_Tano(self.ano)
        self.CNPJ = CNPJ
        self.validate_TCnpj(self.CNPJ)
        self.mod = mod
        self.validate_TMod(self.mod)
        self.serie = serie
        self.validate_TSerie(self.serie)
        self.nNFIni = nNFIni
        self.validate_TNF(self.nNFIni)
        self.nNFFin = nNFFin
        self.validate_TNF(self.nNFFin)
        self.xJust = xJust
        self.validate_TJust(self.xJust)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infInutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infInutType.subclass:
            return infInutType.subclass(*args_, **kwargs_)
        else:
            return infInutType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_tpAmb(self): return self.tpAmb

    def set_tpAmb(self, tpAmb): self.tpAmb = tpAmb

    def get_xServ(self): return self.xServ

    def set_xServ(self, xServ): self.xServ = xServ

    def get_cUF(self): return self.cUF

    def set_cUF(self, cUF): self.cUF = cUF

    def get_ano(self): return self.ano

    def set_ano(self, ano): self.ano = ano

    def get_CNPJ(self): return self.CNPJ

    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ

    def get_mod(self): return self.mod

    def set_mod(self, mod): self.mod = mod

    def get_serie(self): return self.serie

    def set_serie(self, serie): self.serie = serie

    def get_nNFIni(self): return self.nNFIni

    def set_nNFIni(self, nNFIni): self.nNFIni = nNFIni

    def get_nNFFin(self): return self.nNFFin

    def set_nNFFin(self, nNFFin): self.nNFFin = nNFFin

    def get_xJust(self): return self.xJust

    def set_xJust(self, xJust): self.xJust = xJust

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def validate_TAmb(self, value):
        # Validate type TAmb, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TAmb' % {
        "value": value.encode("utf-8")})

    def validate_xServType(self, value):
        # Validate type xServType, a restriction on TServ.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['INUTILIZAR']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on xServType' % {
        "value": value.encode("utf-8")})
            if not self.gds_validate_simple_patterns(
                    self.validate_xServType_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_xServType_patterns_, ))
    validate_xServType_patterns_ = [['^[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}$|^[!-ÿ]{1}$']]

    def validate_TCodUfIBGE(self, value):
        # Validate type TCodUfIBGE, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = [
                '11',
                '12',
                '13',
                '14',
                '15',
                '16',
                '17',
                '21',
                '22',
                '23',
                '24',
                '25',
                '26',
                '27',
                '28',
                '29',
                '31',
                '32',
                '33',
                '35',
                '41',
                '42',
                '43',
                '50',
                '51',
                '52',
                '53']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TCodUfIBGE' % {
        "value": value.encode("utf-8")})

    def validate_Tano(self, value):
        # Validate type Tano, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Tano_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_Tano_patterns_, ))
    validate_Tano_patterns_ = [['^[0-9]{2}$']]

    def validate_TCnpj(self, value):
        # Validate type TCnpj, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TCnpj' % {
        "value": value.encode("utf-8")})
            if not self.gds_validate_simple_patterns(
                    self.validate_TCnpj_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TCnpj_patterns_, ))
    validate_TCnpj_patterns_ = [['^[0-9]{14}$']]

    def validate_TMod(self, value):
        # Validate type TMod, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['55', '65']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TMod' % {
        "value": value.encode("utf-8")})

    def validate_TSerie(self, value):
        # Validate type TSerie, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TSerie_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TSerie_patterns_, ))
    validate_TSerie_patterns_ = [['^0$|^[1-9]{1}[0-9]{0,2}$']]

    def validate_TNF(self, value):
        # Validate type TNF, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TNF_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TNF_patterns_, ))
    validate_TNF_patterns_ = [['^[1-9]{1}[0-9]{0,8}$']]

    def validate_TJust(self, value):
        # Validate type TJust, a restriction on nfe:TString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 255:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TJust' % {
        "value": value})
            if len(str(value)) < 15:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on TJust' % {
        "value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_TJust_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TJust_patterns_, ))
    validate_TJust_patterns_ = [['^[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}$|^[!-ÿ]{1}$']]

    def hasContent_(self):
        if (
            self.tpAmb is not None or
            self.xServ is not None or
            self.cUF is not None or
            self.ano is not None or
            self.CNPJ is not None or
            self.mod is not None or
            self.serie is not None or
            self.nNFIni is not None or
            self.nNFFin is not None or
            self.xJust is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='infInutType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infInutType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='infInutType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='infInutType',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='infInutType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(
                ' Id=%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_attrib(
                self.Id),
                        input_name='Id')),
                ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='infInutType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%stpAmb>%s</%stpAmb>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.tpAmb),
            input_name='tpAmb')),
                    namespace_,
                    eol_))
        if self.xServ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sxServ>%s</%sxServ>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.xServ),
            input_name='xServ')),
                    namespace_,
                    eol_))
        if self.cUF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%scUF>%s</%scUF>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.cUF),
            input_name='cUF')),
                    namespace_,
                    eol_))
        if self.ano is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sano>%s</%sano>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.ano),
            input_name='ano')),
                    namespace_,
                    eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sCNPJ>%s</%sCNPJ>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.CNPJ),
            input_name='CNPJ')),
                    namespace_,
                    eol_))
        if self.mod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%smod>%s</%smod>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.mod),
            input_name='mod')),
                    namespace_,
                    eol_))
        if self.serie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sserie>%s</%sserie>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.serie),
            input_name='serie')),
                    namespace_,
                    eol_))
        if self.nNFIni is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%snNFIni>%s</%snNFIni>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.nNFIni),
            input_name='nNFIni')),
                    namespace_,
                    eol_))
        if self.nNFFin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%snNFFin>%s</%snNFFin>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.nNFFin),
            input_name='nNFFin')),
                    namespace_,
                    eol_))
        if self.xJust is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sxJust>%s</%sxJust>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.xJust),
            input_name='xJust')),
                    namespace_,
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpAmb':
            tpAmb_ = child_.text
            tpAmb_ = self.gds_validate_string(tpAmb_, node, 'tpAmb')
            self.tpAmb = tpAmb_
            # validate type TAmb
            self.validate_TAmb(self.tpAmb)
        elif nodeName_ == 'xServ':
            xServ_ = child_.text
            xServ_ = self.gds_validate_string(xServ_, node, 'xServ')
            self.xServ = xServ_
            # validate type xServType
            self.validate_xServType(self.xServ)
        elif nodeName_ == 'cUF':
            cUF_ = child_.text
            cUF_ = self.gds_validate_string(cUF_, node, 'cUF')
            self.cUF = cUF_
            # validate type TCodUfIBGE
            self.validate_TCodUfIBGE(self.cUF)
        elif nodeName_ == 'ano':
            ano_ = child_.text
            ano_ = self.gds_validate_string(ano_, node, 'ano')
            self.ano = ano_
            # validate type Tano
            self.validate_Tano(self.ano)
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
            # validate type TCnpj
            self.validate_TCnpj(self.CNPJ)
        elif nodeName_ == 'mod':
            mod_ = child_.text
            mod_ = self.gds_validate_string(mod_, node, 'mod')
            self.mod = mod_
            # validate type TMod
            self.validate_TMod(self.mod)
        elif nodeName_ == 'serie':
            serie_ = child_.text
            serie_ = self.gds_validate_string(serie_, node, 'serie')
            self.serie = serie_
            # validate type TSerie
            self.validate_TSerie(self.serie)
        elif nodeName_ == 'nNFIni':
            nNFIni_ = child_.text
            nNFIni_ = self.gds_validate_string(nNFIni_, node, 'nNFIni')
            self.nNFIni = nNFIni_
            # validate type TNF
            self.validate_TNF(self.nNFIni)
        elif nodeName_ == 'nNFFin':
            nNFFin_ = child_.text
            nNFFin_ = self.gds_validate_string(nNFFin_, node, 'nNFFin')
            self.nNFFin = nNFFin_
            # validate type TNF
            self.validate_TNF(self.nNFFin)
        elif nodeName_ == 'xJust':
            xJust_ = child_.text
            xJust_ = self.gds_validate_string(xJust_, node, 'xJust')
            self.xJust = xJust_
            # validate type TJust
            self.validate_TJust(self.xJust)
# end class infInutType


class infInutType1(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Id=None, tpAmb=None, verAplic=None, cStat=None, xMotivo=None, cUF=None, ano=None,
                 CNPJ=None, mod=None, serie=None, nNFIni=None, nNFFin=None, dhRecbto=None, nProt=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.tpAmb = tpAmb
        self.validate_TAmb(self.tpAmb)
        self.verAplic = verAplic
        self.validate_TVerAplic(self.verAplic)
        self.cStat = cStat
        self.validate_TStat(self.cStat)
        self.xMotivo = xMotivo
        self.validate_TMotivo(self.xMotivo)
        self.cUF = cUF
        self.validate_TCodUfIBGE(self.cUF)
        self.ano = ano
        self.validate_Tano(self.ano)
        self.CNPJ = CNPJ
        self.validate_TCnpj(self.CNPJ)
        self.mod = mod
        self.validate_TMod(self.mod)
        self.serie = serie
        self.validate_TSerie(self.serie)
        self.nNFIni = nNFIni
        self.validate_TNF(self.nNFIni)
        self.nNFFin = nNFFin
        self.validate_TNF(self.nNFFin)
        self.dhRecbto = dhRecbto
        self.validate_TDateTimeUTC(self.dhRecbto)
        self.nProt = nProt
        self.validate_TProt(self.nProt)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infInutType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infInutType1.subclass:
            return infInutType1.subclass(*args_, **kwargs_)
        else:
            return infInutType1(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_tpAmb(self): return self.tpAmb

    def set_tpAmb(self, tpAmb): self.tpAmb = tpAmb

    def get_verAplic(self): return self.verAplic

    def set_verAplic(self, verAplic): self.verAplic = verAplic

    def get_cStat(self): return self.cStat

    def set_cStat(self, cStat): self.cStat = cStat

    def get_xMotivo(self): return self.xMotivo

    def set_xMotivo(self, xMotivo): self.xMotivo = xMotivo

    def get_cUF(self): return self.cUF

    def set_cUF(self, cUF): self.cUF = cUF

    def get_ano(self): return self.ano

    def set_ano(self, ano): self.ano = ano

    def get_CNPJ(self): return self.CNPJ

    def set_CNPJ(self, CNPJ): self.CNPJ = CNPJ

    def get_mod(self): return self.mod

    def set_mod(self, mod): self.mod = mod

    def get_serie(self): return self.serie

    def set_serie(self, serie): self.serie = serie

    def get_nNFIni(self): return self.nNFIni

    def set_nNFIni(self, nNFIni): self.nNFIni = nNFIni

    def get_nNFFin(self): return self.nNFFin

    def set_nNFFin(self, nNFFin): self.nNFFin = nNFFin

    def get_dhRecbto(self): return self.dhRecbto

    def set_dhRecbto(self, dhRecbto): self.dhRecbto = dhRecbto

    def get_nProt(self): return self.nProt

    def set_nProt(self, nProt): self.nProt = nProt

    def get_Id(self): return self.Id

    def set_Id(self, Id): self.Id = Id

    def validate_TAmb(self, value):
        # Validate type TAmb, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['1', '2']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TAmb' % {
        "value": value.encode("utf-8")})

    def validate_TVerAplic(self, value):
        # Validate type TVerAplic, a restriction on nfe:TString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 20:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TVerAplic' % {
        "value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on TVerAplic' % {
        "value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_TVerAplic_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TVerAplic_patterns_, ))
    validate_TVerAplic_patterns_ = [['^[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}$|^[!-ÿ]{1}$']]

    def validate_TStat(self, value):
        # Validate type TStat, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 3:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TStat' % {
        "value": value.encode("utf-8")})
            if not self.gds_validate_simple_patterns(
                    self.validate_TStat_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TStat_patterns_, ))
    validate_TStat_patterns_ = [['^[0-9]{3}$']]

    def validate_TMotivo(self, value):
        # Validate type TMotivo, a restriction on nfe:TString.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 255:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TMotivo' % {
        "value": value})
            if len(str(value)) < 1:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd minLength restriction on TMotivo' % {
        "value": value})
            if not self.gds_validate_simple_patterns(
                    self.validate_TMotivo_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TMotivo_patterns_, ))
    validate_TMotivo_patterns_ = [['^[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}$|^[!-ÿ]{1}$']]

    def validate_TCodUfIBGE(self, value):
        # Validate type TCodUfIBGE, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = [
                '11',
                '12',
                '13',
                '14',
                '15',
                '16',
                '17',
                '21',
                '22',
                '23',
                '24',
                '25',
                '26',
                '27',
                '28',
                '29',
                '31',
                '32',
                '33',
                '35',
                '41',
                '42',
                '43',
                '50',
                '51',
                '52',
                '53']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TCodUfIBGE' % {
        "value": value.encode("utf-8")})

    def validate_Tano(self, value):
        # Validate type Tano, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_Tano_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_Tano_patterns_, ))
    validate_Tano_patterns_ = [['^[0-9]{2}$']]

    def validate_TCnpj(self, value):
        # Validate type TCnpj, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TCnpj' % {
        "value": value.encode("utf-8")})
            if not self.gds_validate_simple_patterns(
                    self.validate_TCnpj_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TCnpj_patterns_, ))
    validate_TCnpj_patterns_ = [['^[0-9]{14}$']]

    def validate_TMod(self, value):
        # Validate type TMod, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['55', '65']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd enumeration restriction on TMod' % {
        "value": value.encode("utf-8")})

    def validate_TSerie(self, value):
        # Validate type TSerie, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TSerie_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TSerie_patterns_, ))
    validate_TSerie_patterns_ = [['^0$|^[1-9]{1}[0-9]{0,2}$']]

    def validate_TNF(self, value):
        # Validate type TNF, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TNF_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TNF_patterns_, ))
    validate_TNF_patterns_ = [['^[1-9]{1}[0-9]{0,8}$']]

    def validate_TDateTimeUTC(self, value):
        # Validate type TDateTimeUTC, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_TDateTimeUTC_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TDateTimeUTC_patterns_, ))
    validate_TDateTimeUTC_patterns_ = [
        ['^(((20(([02468][048])$|^([13579][26]))-02-29))$|^(20[0-9][0-9])-((((0[1-9])$|^(1[0-2]))-((0[1-9])$|^(1\\d)$|^(2[0-8])))$|^((((0[13578])$|^(1[02]))-31)$|^(((0[1,3-9])$|^(1[0-2]))-(29$|^30)))))T(20$|^21$|^22$|^23$|^[0-1]\\d):[0-5]\\d:[0-5]\\d([\\-,\\+](0[0-9]$|^10$|^11):00$|^([\\+](12):00))$']]

    def validate_TProt(self, value):
        # Validate type TProt, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn(
                    'Value "%(value)s" does not match xsd maxLength restriction on TProt' % {
        "value": value.encode("utf-8")})
            if not self.gds_validate_simple_patterns(
                    self.validate_TProt_patterns_, value):
                warnings_.warn(
                    'Value "%s" does not match xsd pattern restrictions: %s' %
                    (value.encode('utf-8'), self.validate_TProt_patterns_, ))
    validate_TProt_patterns_ = [['^[0-9]{15}$']]

    def hasContent_(self):
        if (
            self.tpAmb is not None or
            self.verAplic is not None or
            self.cStat is not None or
            self.xMotivo is not None or
            self.cUF is not None or
            self.ano is not None or
            self.CNPJ is not None or
            self.mod is not None or
            self.serie is not None or
            self.nNFIni is not None or
            self.nNFFin is not None or
            self.dhRecbto is not None or
            self.nProt is not None
        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='infInutType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infInutType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='infInutType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='infInutType1',
                pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='infInutType1'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(
                ' Id=%s' %
                (self.gds_encode(
                    self.gds_format_string(
                        quote_attrib(
                self.Id),
                        input_name='Id')),
                ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='infInutType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%stpAmb>%s</%stpAmb>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.tpAmb),
            input_name='tpAmb')),
                    namespace_,
                    eol_))
        if self.verAplic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sverAplic>%s</%sverAplic>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.verAplic),
            input_name='verAplic')),
                    namespace_,
                    eol_))
        if self.cStat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%scStat>%s</%scStat>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.cStat),
            input_name='cStat')),
                    namespace_,
                    eol_))
        if self.xMotivo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sxMotivo>%s</%sxMotivo>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.xMotivo),
            input_name='xMotivo')),
                    namespace_,
                    eol_))
        if self.cUF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%scUF>%s</%scUF>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.cUF),
            input_name='cUF')),
                    namespace_,
                    eol_))
        if self.ano is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sano>%s</%sano>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.ano),
            input_name='ano')),
                    namespace_,
                    eol_))
        if self.CNPJ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sCNPJ>%s</%sCNPJ>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.CNPJ),
            input_name='CNPJ')),
                    namespace_,
                    eol_))
        if self.mod is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%smod>%s</%smod>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.mod),
            input_name='mod')),
                    namespace_,
                    eol_))
        if self.serie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sserie>%s</%sserie>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.serie),
            input_name='serie')),
                    namespace_,
                    eol_))
        if self.nNFIni is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%snNFIni>%s</%snNFIni>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.nNFIni),
            input_name='nNFIni')),
                    namespace_,
                    eol_))
        if self.nNFFin is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%snNFFin>%s</%snNFFin>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.nNFFin),
            input_name='nNFFin')),
                    namespace_,
                    eol_))
        if self.dhRecbto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%sdhRecbto>%s</%sdhRecbto>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.dhRecbto),
            input_name='dhRecbto')),
                    namespace_,
                    eol_))
        if self.nProt is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write(
                '<%snProt>%s</%snProt>%s' %
                (namespace_,
                 self.gds_encode(
                     self.gds_format_string(
             quote_xml(
                self.nProt),
            input_name='nProt')),
                    namespace_,
                    eol_))

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpAmb':
            tpAmb_ = child_.text
            tpAmb_ = self.gds_validate_string(tpAmb_, node, 'tpAmb')
            self.tpAmb = tpAmb_
            # validate type TAmb
            self.validate_TAmb(self.tpAmb)
        elif nodeName_ == 'verAplic':
            verAplic_ = child_.text
            verAplic_ = self.gds_validate_string(verAplic_, node, 'verAplic')
            self.verAplic = verAplic_
            # validate type TVerAplic
            self.validate_TVerAplic(self.verAplic)
        elif nodeName_ == 'cStat':
            cStat_ = child_.text
            cStat_ = self.gds_validate_string(cStat_, node, 'cStat')
            self.cStat = cStat_
            # validate type TStat
            self.validate_TStat(self.cStat)
        elif nodeName_ == 'xMotivo':
            xMotivo_ = child_.text
            xMotivo_ = self.gds_validate_string(xMotivo_, node, 'xMotivo')
            self.xMotivo = xMotivo_
            # validate type TMotivo
            self.validate_TMotivo(self.xMotivo)
        elif nodeName_ == 'cUF':
            cUF_ = child_.text
            cUF_ = self.gds_validate_string(cUF_, node, 'cUF')
            self.cUF = cUF_
            # validate type TCodUfIBGE
            self.validate_TCodUfIBGE(self.cUF)
        elif nodeName_ == 'ano':
            ano_ = child_.text
            ano_ = self.gds_validate_string(ano_, node, 'ano')
            self.ano = ano_
            # validate type Tano
            self.validate_Tano(self.ano)
        elif nodeName_ == 'CNPJ':
            CNPJ_ = child_.text
            CNPJ_ = self.gds_validate_string(CNPJ_, node, 'CNPJ')
            self.CNPJ = CNPJ_
            # validate type TCnpj
            self.validate_TCnpj(self.CNPJ)
        elif nodeName_ == 'mod':
            mod_ = child_.text
            mod_ = self.gds_validate_string(mod_, node, 'mod')
            self.mod = mod_
            # validate type TMod
            self.validate_TMod(self.mod)
        elif nodeName_ == 'serie':
            serie_ = child_.text
            serie_ = self.gds_validate_string(serie_, node, 'serie')
            self.serie = serie_
            # validate type TSerie
            self.validate_TSerie(self.serie)
        elif nodeName_ == 'nNFIni':
            nNFIni_ = child_.text
            nNFIni_ = self.gds_validate_string(nNFIni_, node, 'nNFIni')
            self.nNFIni = nNFIni_
            # validate type TNF
            self.validate_TNF(self.nNFIni)
        elif nodeName_ == 'nNFFin':
            nNFFin_ = child_.text
            nNFFin_ = self.gds_validate_string(nNFFin_, node, 'nNFFin')
            self.nNFFin = nNFFin_
            # validate type TNF
            self.validate_TNF(self.nNFFin)
        elif nodeName_ == 'dhRecbto':
            dhRecbto_ = child_.text
            dhRecbto_ = self.gds_validate_string(dhRecbto_, node, 'dhRecbto')
            self.dhRecbto = dhRecbto_
            # validate type TDateTimeUTC
            self.validate_TDateTimeUTC(self.dhRecbto)
        elif nodeName_ == 'nProt':
            nProt_ = child_.text
            nProt_ = self.gds_validate_string(nProt_, node, 'nProt')
            self.nProt = nProt_
            # validate type TProt
            self.validate_TProt(self.nProt)
# end class infInutType1


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Algorithm=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Algorithm(self): return self.Algorithm

    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='CanonicalizationMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get(
            'CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='CanonicalizationMethodType',
                pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Algorithm=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Algorithm(self): return self.Algorithm

    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='SignatureMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='SignatureMethodType',
                pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureMethodType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None

    def __init__(self, Algorithm=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)

    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)

    def get_Algorithm(self): return self.Algorithm

    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm

    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False

    def export(self, outfile, level, namespace_='',
               name_='DigestMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write(
            '<%s%s%s' %
            (namespace_,
             name_,
             namespacedef_ and ' ' +
             namespacedef_ or '',
             ))
        already_processed = set()
        self.exportAttributes(
            outfile,
            level,
            already_processed,
            namespace_,
            name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(
                outfile,
                level + 1,
                namespace_='',
                name_='DigestMethodType',
                pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))

    def exportAttributes(self, outfile, level, already_processed,
                         namespace_='', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))

    def exportChildren(self, outfile, level, namespace_='',
                       name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        pass

    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self

    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value

    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DigestMethodType


GDSClassesMapping = {
    'CanonicalizationMethod': CanonicalizationMethodType,
    'DigestMethod': DigestMethodType,
    'KeyInfo': KeyInfoType,
    'Reference': ReferenceType,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'X509Data': X509DataType,
    'infInut': infInutType1,
    'inutNFe': TInutNFe,
    'retInutNFe': TRetInutNFe,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TInutNFe'
        rootClass = TInutNFe
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TInutNFe'
        rootClass = TInutNFe
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TInutNFe'
        rootClass = TInutNFe
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'TInutNFe'
        rootClass = TInutNFe
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from leiauteInutNFe import *\n\n')
        sys.stdout.write('import leiauteInutNFe as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CanonicalizationMethodType",
    "DigestMethodType",
    "KeyInfoType",
    "ReferenceType",
    "SignatureMethodType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TInutNFe",
    "TProcInutNFe",
    "TRetInutNFe",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "infInutType",
    "infInutType1"
]
