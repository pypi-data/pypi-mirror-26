#--------------------------
# Indico configuration file
#--------------------------
#
# This file is only read when the application is initialized.
# If you change any value you will need to restart your WSGI server for
# the config file to be re-read.
#
# The file is executed as Python code so you can use anything that's allowed in PYthon.

#------------------------------------------------------------------------------
# SQLAlchemy DB
#------------------------------------------------------------------------------

SQLALCHEMY_DATABASE_URI = 'postgresql:///indico'

# Size of the connection pool (default = 5)
# SQLALCHEMY_POOL_SIZE = 5

# Connection timeout
# SQLALCHEMY_POOL_TIMEOUT = 10

# Number of seconds after which a connection is automatically
# recycled (default = 120)
# SQLALCHEMY_POOL_RECYCLE = 120

# Number of connections that can be breated after pool is at maximum
# size (default = 3)
# SQLALCHEMY_MAX_OVERFLOW = 3

#------------------------------------------------------------------------------
# SECURITY
#------------------------------------------------------------------------------
# To sign data such as activation tokens used in emails, Indico needs a secret
# key.  It should be a random string; the preferred way to generate it is using
# `import os; os.urandom(32)` in a Python shell.
SECRET_KEY = ''

#------------------------------------------------------------------------------
# Development
#------------------------------------------------------------------------------
# Enable debug mode to get unminified assets, verbose error messages in the
# browser and various other things that are useful when developing indico or
# tracking down errors but should not be enabled for production systems.
#DEBUG = False
#
# If you want to see all queries sent to the database in real-time, enable
# sqlalchemy logging and run the `bin/utils/db_log.py` script in a separate
# terminal window.
#DB_LOG = False
#
# During development it is often more convenient to not have to run celery
# and still receive emails. To do so, you can disable celery usage for emails.
# Note that this is not suitable for a production setup, as it may result
# in emails not being sent if the mail server is unavailable or sending e.g.
# a reminder email fails for some reason.
#SMTP_USE_CELERY = True

#------------------------------------------------------------------------------
# URLs
#------------------------------------------------------------------------------
# BaseURL is the url where Indico will be accessed.
# Except for development systems this should be a https URL and your web server
# should be configured to redirect all HTTP requests to HTTPS.
BASE_URL = 'https://indico.yourdomain.tld'

# If you upgraded from an older Indico version (pre-2.0) and want to preserve
# older URLs you should enable this option to avoid breaking links in search
# engines and other websites.
#ROUTE_OLD_URLS = False


#------------------------------------------------------------------------------
# DIRECTORIES
#------------------------------------------------------------------------------
LOG_DIR    = '/opt/indico/log'
TEMP_DIR   = '/opt/indico/tmp'
ASSETS_DIR = '/opt/indico/assets'
CACHE_DIR  = '/opt/indico/cache'
# You can use 'redis', 'memcached' or 'files'. The files backend caches objects in
# CacheDir while the Memcached backend uses one or more memcached servers.
#CACHE_BACKEND         = 'files'
# When using memcached, provide a tuple containing 'ip:port' entries for the
# memcached servers. Do not forget to firewall those servers as memcached has no
# authentication at all!
#MEMCACHED_SERVERS     = ('127.0.0.1:11211',)
# When using redis, provide a redis connection string for the Redis server.
#REDIS_CACHE_URL = 'redis://unused:password@localhost:6379/1'

#------------------------------------------------------------------------------
# SMTP
#------------------------------------------------------------------------------
SMTP_SERVER = ('localhost', 8025)
SMTP_LOGIN = ''
SMTP_PASSWORD = ''
SMTP_USE_TLS = False

#------------------------------------------------------------------------------
# EMAIL ADDRESSES
#------------------------------------------------------------------------------
# SupportEmail is the email address where all automatically generated
# application errors will be sent to.

SUPPORT_EMAIL = "root@localhost"


# PublicSupportEmail is an email address that will be shown in Indico and where
# users are expected to find help when they have using the website.

PUBLIC_SUPPORT_EMAIL = "root@localhost"

# NoReplyEmail is the email address showed when we do not want the users to answer
# an automatically generated email.

NO_REPLY_EMAIL = "noreply-root@localhost"


#------------------------------------------------------------------------------
# FILE UPLOAD
#------------------------------------------------------------------------------
# Here you can limit the maximum size of all the uploaded files (in MB) in a
# request. This is a hard limit that is enforced on the server side.
# default: 0 (unlimited)

MAX_UPLOAD_FILES_TOTAL_SIZE = 0

# Here you can limit the maximum size of an uploaded file (in MB)
# default: 0 (unlimited)
# Please note that this limit is only enforced on the client side!
# For a hard limit see MaxUploadFilesTotalSize

MAX_UPLOAD_FILE_SIZE = 0


#------------------------------------------------------------------------------
# AUTOMATIC MAINTENANCE
#------------------------------------------------------------------------------
# Indico can automatically delete events older than a specified number of days.
# This is set on a per-category basis:
#
# CATEGORY_CLEANUP = {
#   '2': 30  # delete events in category '2' that have been created more than 30 days ago
# }

#------------------------------------------------------------------------------
# STATIC FILE DELIVERY
#------------------------------------------------------------------------------
# Indico supports the use of the X-Sendfile and X-Accel-Redirect headers:
#
# http://blog.lighttpd.net/articles/2006/07/02/x-sendfile
# http://wiki.nginx.org/X-accel
#
# If your webserver supports this feature and you want to activate it,
# you should enable it here
#
# X-Sendfile (apache with mod_xsendfile, lighttpd):
# STATIC_FILE_METHOD = 'xsendfile'
#
# X-Accel-Redirect (nginx):
# STATIC_FILE_METHOD = ('xaccelredirect', {
#     '/opt/indico/archive': '/.xsf/archive',
#     '/opt/indico/cache': '/.xsf/cache',
#     '/opt/indico/htdocs': '/.xsf/htdocs'
# })
# Because of the way nginx works (using URLs instead of paths) you also need to map the .xsf urls to
# the paths in your nginx config (for each entry in the dict above):
# location /.xsf/archive/ {
#     internal;
#     alias /opt/indico/archive/;
# }
# DO NOT forget the "internal;" statement - it prevents users from accessing those URLs directly.

#STATIC_FILE_METHOD = None


# Sessions are only stored for a certain time. You can modify the duration here. By setting
# the lifetime to 0 the cookie will expire when the browser is closed.
#SESSION_LIFETIME = 86400 * 31

# If indico is behind a proxy, the user's IP needs to be retrieved from the
# HTTP_X_FORWARDED_FOR header. To enable this behavior, set UseProxy to True.
# Note that this MUST NOT be enabled if the machine is accessible directly or
# users will be able to spoof their IP address!
#USE_PROXY = False


#------------------------------------------------------------------------------
# LOGGING
#------------------------------------------------------------------------------
# If the LoggingConfigFile is not an absolute path, it is relative to the
# location of this file.
#
# LOGGING_CONFIG_FILE = 'logging.yaml'
#
# To use Sentry (https://sentry.io), simply set the SENTRY_DSN:
# SENTRY_DSN = 'http://user:password@logger.example.com/n'
# SENTRY_LOGGING_LEVEL = 'ERROR'  # default: 'WARNING'


#------------------------------------------------------------------------------
# LATEX/PDF GENERATION
#------------------------------------------------------------------------------
# Set the full path to xelatex if it's not within PATH:
# XELATEX_PATH = 'xelatex'
#
# In strict mode, a non-zero status code is considered failure. This is
# disabled by default since LaTeX is rather generous when it comes to using
# a non-zero exit code. For example, having an oversized image in an abstract
# is enough to cause one.  It is generally not advised to enable strict mode.
# STRICT_LATEX = False

#------------------------------------------------------------------------------
# ACTIVE PLUGINS
#------------------------------------------------------------------------------

# List of plugins to be loaded on server start.
#
# PLUGINS = {'example'}

#------------------------------------------------------------------------------
# AUTHENTICATION
#------------------------------------------------------------------------------
# If you do not need integration with an existing authentication infrastructure
# such as LDAP, OAuth or a SSO system like Shibboleth, you do not have to set
# anything here. Having local identities enabled is sufficient:
# LOCAL_IDENTITIES = True

# If you do not want people to register Indico accounts on their own you can
# disable that here.  Administrators can still create new indico accounts.
# LOCAL_REGISTRATION = True

# If you want to allow people to register themselves, but approve them before
# their account is actually created, you can enable moderation.
# LOCAL_MODERATION = False

# When `LOCAL_IDENTITIES` is set to False, a link to an external registration
# page can be configured here:
# EXTERNAL_REGISTRATION_URL = ''

# For advanced authentication and user information retrieval, Indico uses the
# Flask-Multipass library, so you can use any registered multipass auth/identity
# provider in Indico.  Using such providers requires additional configuration.
# Please note that the name of an identity provider MUST NOT be changed once
# it has been used, as it is referenced internally. Changing the title is fine
# though.
#
# For documentation on the providers and their config options see the
# documentation of multipass on the following site:
# https://flask-multipass.readthedocs.org/en/latest/
#
# In addition to the settings handled by multipass, you may use the following
# settings:
#
# Auth providers:
# - `default`
#    This must be set to `True` for exactly one form-based authentication
#    provide in case you have more than one form-based provider.  If omitted,
#    the default login form will be for local indico accounts (if enabled).
#
# Identity providers:
# - `default_group_provider`
#   If you have any identity providers which provide groups, it is highly
#   recommended to enable this for exactly one of these providers.  This
#   is extremely important if you migrated an old database and have ACLs
#   which don't contain provider references yet.
# - `trusted_email`
#   If all emails received from the provider are trustworthy, i.e. it is
#   guaranteed that the emails actually belong to the user.  This should
#   be enabled e.g. for corporate SSO systems so people do not have to go
#   through an email verification step the first time they login/signup.
# - `moderated`
#   If set to True, account creation after logging in through this provider
#   requires approval by an Indico administrator.  This results in the same
#   workflow as the `LocalModeration` setting for local identities.
# - `synced_fields`
#   This may be set in no more than one identity provider and enables user
#   data synchronization. Its value should be a set of user attributes that
#   can be synchronized. The following attributes are supported:
#   'first_name', 'last_name', 'affiliation', 'phone', 'address'
#
# Indico uses the following identity info keys from multipass, so you need
# to configure the mappings in your identity providers accordingly:
# 'first_name', 'last_name', 'email', 'affiliation', 'phone', 'address'
# All keys are optional, so if a provider does not contain data for a field,
# you can override `identity_info_keys` and only specify the keys you want.
# However, if a provider does not have at least  'email', external users
# returned by this provider will never show up in search results. Likewise,
# an external user with no email will not appear in search results.
#
# Auth and identity providers with the same name are linked automatically
# unless PROVIDER_MAP is specified.  If specified it should be a dictionary
# suitable for the MULTIPASS_PROVIDER_MAP setting of multipass.
#AUTH_PROVIDERS = {}
#IDENTITY_PROVIDERS = {}
#PROVIDER_MAP = {}

#------------------------------------------------------------------------------
# GLOBAL DEFAULTS
#------------------------------------------------------------------------------

# The timezone that is used by default. This also affects the timezone used by
# periodic tasks.
#DEFAULT_TIMEZONE = 'UTC'
#
# The locale that is used by default for i18n.
#DEFAULT_LOCALE = 'en_GB'


#------------------------------------------------------------------------------
# CELERY
#------------------------------------------------------------------------------

# Indico uses Celery to run time-consuming background tasks and periodic jobs.
# You must configure a Celery "broker" which is used to  communicate between
# Indico and the worker(s).
# We recommend Redis as it is very easy to set up. For details, see the Celery
# documentation:
# http://celery.readthedocs.org/en/latest/getting-started/brokers/redis.html
#CELERY_BROKER = 'redis://unused:password@localhost:6379/0'
#
# By default, task results are stored in the broker backend, but you can
# override it.
#CELERY_RESULT_BACKEND = None
#
# By default, all periodic tasks are enabled and use a schedule that is
# considered appropriate by the Indico developers.  You can override this
# for specific tasks using the `ScheduledTaskOverride` dict.  The key is the
# name of the task and the value can be one of the following:
# - `None` or `False`: Disables the task completely
# - A dictionary, as described in the Celery documentation
#   http://celery.readthedocs.org/en/latest/userguide/periodic-tasks.html#available-fields
#   The `task` key is not necessary in this case, as it is set automatically.
# - A `timedelta` or `crontab` object which will just override the schedule
#   and not touch any other options of the task.
#SCHEDULED_TASK_OVERRIDE = {}
#
# You can use the `CeleryConfig` settings to specify/override any config option
# supported by Celery. For the full list of options, see the Celery docs at
# http://celery.readthedocs.org/en/latest/configuration.html
#CELERY_CONFIG = {}
#
# Your Celery workers can be monitored using Flower.  To use it, simply start it
# using `indico celery flower`; by default it will listen on the same host as
# specified in BaseURL (non-SSL) on port 5555.  Authentication is done using
# OAuth so only indico administrators can access flower.  You need to configure
# the allowed auth callback URLs in the Indico administration area; otherwise
# authentication will fail with an OAuth error.
# To get a link to Flower in the administration menu, set `FlowerURL` to the URL
# under which your Flower instance is accessible:
#FLOWER_URL = None


# ------------------------------------------------------------------------------
# Storage
# ------------------------------------------------------------------------------

# Indico needs to store various files such as event attachments somewhere. You
# need to configure the storage backends here.  By default only a filesystem
# based storage backend is available, but plugins could add additional backends.
# You can define multiple backends, but once a backend has been used, you MUST
# NOT remove it or all files stored in that backend will become unavailable.
# To define a filesystem-based backend, use the string `fs:/base/path`.
# Other backends may accept different options - see the documentation of these
# backends for details.
#STORAGE_BACKENDS = {'default': 'fs:/opt/indico/archive'}
#
# You need to set the storage backend used for event attachments to backend that
# has been defined in StorageBackends.  Note that this only affects new uploads.
# Existing files are taken from whatever backend was used when they have been
# uploaded.
#ATTACHMENT_STORAGE = 'default'
# Static sites can be stored in a different backend.  If not set, the attachment
# storage backend will be used.
#STATIC_SITE_STORAGE = None


# ------------------------------------------------------------------------------
# Customization
# ------------------------------------------------------------------------------

# It is possible to override specific templates and add CSS and JavaScript
# for advanced customizations.  When using this, be advised that depending on
# the modifications you perform things may break after an Indico update.  Make
# sure to test all your modifications whenever you update Indico!
#
# Set the base directory for customizations.
#CUSTOMIZATION_DIR = '/opt/indico/custom'
#
# By enabling customization debugging indico will log all customizable
# templates the first time they are accessed.
# The log message contains the path where you need to store the template. This
# path is relative to `<CustomizationDir>/templates/`.
# It will also log the full path of the original template in case you decide to
# copy it.
# However, instead of copying templates it is better to use Jinja inheritance
# where possible. To make this easier the log entry will also contain a
# "reference" path that can be used to reference the original template from the
# customized one.
#CUSTOMIZATION_DEBUG = False
#
# To include custom CSS and JavaScript, simply put *.scss and *.js files into
# `<CustomizationDir>/scss` / `<CustomizationDir>/js`.  If there are multiple
# files, they will be included in alphabetical order so prefixing them with
# a number (e.g. `00-base.scss`, `10-events.scss`) is a good idea.
#
# Static files may be added in `<CustomizationDir>/static`.  They can be
# referenced in templates through the `assets.custom` endpoint.
#
# If you have a custom logo, specify the URL to it here.  If unset, the default
# indico logo is used.
#LOGO_URL = ''
#
# If you have your own custom Indico documentation site, you can use this
# setting to override the "Help" link at the bottom of the page.
#HELP_URL = ''
