# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Node20GetNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Node20GetNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'identifier': 'str',
            'auto_discover': 'bool',
            'boot_settings': 'object',
            'identifiers': 'list[str]',
            'name': 'str',
            'obms': 'list[NodesPostObmById]',
            'relations': 'list[RelationsObj]',
            'tags': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'auto_discover': 'autoDiscover',
            'boot_settings': 'bootSettings',
            'identifiers': 'identifiers',
            'name': 'name',
            'obms': 'obms',
            'relations': 'relations',
            'tags': 'tags',
            'type': 'type'
        }

        self._identifier = None
        self._auto_discover = None
        self._boot_settings = None
        self._identifiers = None
        self._name = None
        self._obms = None
        self._relations = None
        self._tags = None
        self._type = None

    @property
    def identifier(self):
        """
        Gets the identifier of this Node20GetNode.


        :return: The identifier of this Node20GetNode.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Node20GetNode.


        :param identifier: The identifier of this Node20GetNode.
        :type: str
        """
        self._identifier = identifier

    @property
    def auto_discover(self):
        """
        Gets the auto_discover of this Node20GetNode.


        :return: The auto_discover of this Node20GetNode.
        :rtype: bool
        """
        return self._auto_discover

    @auto_discover.setter
    def auto_discover(self, auto_discover):
        """
        Sets the auto_discover of this Node20GetNode.


        :param auto_discover: The auto_discover of this Node20GetNode.
        :type: bool
        """
        self._auto_discover = auto_discover

    @property
    def boot_settings(self):
        """
        Gets the boot_settings of this Node20GetNode.


        :return: The boot_settings of this Node20GetNode.
        :rtype: object
        """
        return self._boot_settings

    @boot_settings.setter
    def boot_settings(self, boot_settings):
        """
        Sets the boot_settings of this Node20GetNode.


        :param boot_settings: The boot_settings of this Node20GetNode.
        :type: object
        """
        self._boot_settings = boot_settings

    @property
    def identifiers(self):
        """
        Gets the identifiers of this Node20GetNode.


        :return: The identifiers of this Node20GetNode.
        :rtype: list[str]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """
        Sets the identifiers of this Node20GetNode.


        :param identifiers: The identifiers of this Node20GetNode.
        :type: list[str]
        """
        self._identifiers = identifiers

    @property
    def name(self):
        """
        Gets the name of this Node20GetNode.
        Name of the node

        :return: The name of this Node20GetNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Node20GetNode.
        Name of the node

        :param name: The name of this Node20GetNode.
        :type: str
        """
        self._name = name

    @property
    def obms(self):
        """
        Gets the obms of this Node20GetNode.
        The list of obm settings

        :return: The obms of this Node20GetNode.
        :rtype: list[NodesPostObmById]
        """
        return self._obms

    @obms.setter
    def obms(self, obms):
        """
        Sets the obms of this Node20GetNode.
        The list of obm settings

        :param obms: The obms of this Node20GetNode.
        :type: list[NodesPostObmById]
        """
        self._obms = obms

    @property
    def relations(self):
        """
        Gets the relations of this Node20GetNode.


        :return: The relations of this Node20GetNode.
        :rtype: list[RelationsObj]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """
        Sets the relations of this Node20GetNode.


        :param relations: The relations of this Node20GetNode.
        :type: list[RelationsObj]
        """
        self._relations = relations

    @property
    def tags(self):
        """
        Gets the tags of this Node20GetNode.


        :return: The tags of this Node20GetNode.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this Node20GetNode.


        :param tags: The tags of this Node20GetNode.
        :type: str
        """
        self._tags = tags

    @property
    def type(self):
        """
        Gets the type of this Node20GetNode.
        Type of node

        :return: The type of this Node20GetNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Node20GetNode.
        Type of node

        :param type: The type of this Node20GetNode.
        :type: str
        """
        allowed_values = ["compute", "compute-container", "switch", "dae", "pdu", "mgmt", "enclosure", "rack"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

