# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RelationsObj(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RelationsObj - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'relation_type': 'str',
            'info': 'str',
            'targets': 'list[str]'
        }

        self.attribute_map = {
            'relation_type': 'relationType',
            'info': 'info',
            'targets': 'targets'
        }

        self._relation_type = None
        self._info = None
        self._targets = None

    @property
    def relation_type(self):
        """
        Gets the relation_type of this RelationsObj.
        Relation Type with the node.

        :return: The relation_type of this RelationsObj.
        :rtype: str
        """
        return self._relation_type

    @relation_type.setter
    def relation_type(self, relation_type):
        """
        Sets the relation_type of this RelationsObj.
        Relation Type with the node.

        :param relation_type: The relation_type of this RelationsObj.
        :type: str
        """
        self._relation_type = relation_type

    @property
    def info(self):
        """
        Gets the info of this RelationsObj.


        :return: The info of this RelationsObj.
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this RelationsObj.


        :param info: The info of this RelationsObj.
        :type: str
        """
        self._info = info

    @property
    def targets(self):
        """
        Gets the targets of this RelationsObj.
        Array of targets.

        :return: The targets of this RelationsObj.
        :rtype: list[str]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """
        Sets the targets of this RelationsObj.
        Array of targets.

        :param targets: The targets of this RelationsObj.
        :type: list[str]
        """
        self._targets = targets

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

