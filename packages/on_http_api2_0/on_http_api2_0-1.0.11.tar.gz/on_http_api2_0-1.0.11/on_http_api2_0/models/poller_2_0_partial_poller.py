# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Poller20PartialPoller(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Poller20PartialPoller - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'config': 'object',
            'paused': 'bool',
            'poll_interval': 'float',
            'type': 'str'
        }

        self.attribute_map = {
            'config': 'config',
            'paused': 'paused',
            'poll_interval': 'pollInterval',
            'type': 'type'
        }

        self._config = None
        self._paused = None
        self._poll_interval = None
        self._type = None

    @property
    def config(self):
        """
        Gets the config of this Poller20PartialPoller.
        Poller configuration object

        :return: The config of this Poller20PartialPoller.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Poller20PartialPoller.
        Poller configuration object

        :param config: The config of this Poller20PartialPoller.
        :type: object
        """
        self._config = config

    @property
    def paused(self):
        """
        Gets the paused of this Poller20PartialPoller.
        Asserted if poller is paused

        :return: The paused of this Poller20PartialPoller.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused):
        """
        Sets the paused of this Poller20PartialPoller.
        Asserted if poller is paused

        :param paused: The paused of this Poller20PartialPoller.
        :type: bool
        """
        self._paused = paused

    @property
    def poll_interval(self):
        """
        Gets the poll_interval of this Poller20PartialPoller.
        Interval at which poller will run

        :return: The poll_interval of this Poller20PartialPoller.
        :rtype: float
        """
        return self._poll_interval

    @poll_interval.setter
    def poll_interval(self, poll_interval):
        """
        Sets the poll_interval of this Poller20PartialPoller.
        Interval at which poller will run

        :param poll_interval: The poll_interval of this Poller20PartialPoller.
        :type: float
        """
        self._poll_interval = poll_interval

    @property
    def type(self):
        """
        Gets the type of this Poller20PartialPoller.
        Type of poller

        :return: The type of this Poller20PartialPoller.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Poller20PartialPoller.
        Type of poller

        :param type: The type of this Poller20PartialPoller.
        :type: str
        """
        allowed_values = ["ipmi", "snmp", "redfish", "wsman"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

