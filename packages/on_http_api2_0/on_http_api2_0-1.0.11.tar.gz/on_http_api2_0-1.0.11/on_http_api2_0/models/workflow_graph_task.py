# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class WorkflowGraphTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        WorkflowGraphTask - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ignore_failure': 'bool',
            'label': 'str',
            'task_name': 'str',
            'wait_on': 'object'
        }

        self.attribute_map = {
            'ignore_failure': 'ignoreFailure',
            'label': 'label',
            'task_name': 'taskName',
            'wait_on': 'waitOn'
        }

        self._ignore_failure = None
        self._label = None
        self._task_name = None
        self._wait_on = None

    @property
    def ignore_failure(self):
        """
        Gets the ignore_failure of this WorkflowGraphTask.


        :return: The ignore_failure of this WorkflowGraphTask.
        :rtype: bool
        """
        return self._ignore_failure

    @ignore_failure.setter
    def ignore_failure(self, ignore_failure):
        """
        Sets the ignore_failure of this WorkflowGraphTask.


        :param ignore_failure: The ignore_failure of this WorkflowGraphTask.
        :type: bool
        """
        self._ignore_failure = ignore_failure

    @property
    def label(self):
        """
        Gets the label of this WorkflowGraphTask.


        :return: The label of this WorkflowGraphTask.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this WorkflowGraphTask.


        :param label: The label of this WorkflowGraphTask.
        :type: str
        """
        self._label = label

    @property
    def task_name(self):
        """
        Gets the task_name of this WorkflowGraphTask.


        :return: The task_name of this WorkflowGraphTask.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """
        Sets the task_name of this WorkflowGraphTask.


        :param task_name: The task_name of this WorkflowGraphTask.
        :type: str
        """
        self._task_name = task_name

    @property
    def wait_on(self):
        """
        Gets the wait_on of this WorkflowGraphTask.


        :return: The wait_on of this WorkflowGraphTask.
        :rtype: object
        """
        return self._wait_on

    @wait_on.setter
    def wait_on(self, wait_on):
        """
        Sets the wait_on of this WorkflowGraphTask.


        :param wait_on: The wait_on of this WorkflowGraphTask.
        :type: object
        """
        self._wait_on = wait_on

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

