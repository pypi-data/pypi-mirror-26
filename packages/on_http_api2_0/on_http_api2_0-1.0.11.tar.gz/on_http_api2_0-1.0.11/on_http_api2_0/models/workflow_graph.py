# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class WorkflowGraph(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        WorkflowGraph - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'friendly_name': 'str',
            'injectable_name': 'str',
            'options': 'object',
            'tasks': 'list[WorkflowGraphTask]'
        }

        self.attribute_map = {
            'friendly_name': 'friendlyName',
            'injectable_name': 'injectableName',
            'options': 'options',
            'tasks': 'tasks'
        }

        self._friendly_name = None
        self._injectable_name = None
        self._options = None
        self._tasks = None

    @property
    def friendly_name(self):
        """
        Gets the friendly_name of this WorkflowGraph.


        :return: The friendly_name of this WorkflowGraph.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """
        Sets the friendly_name of this WorkflowGraph.


        :param friendly_name: The friendly_name of this WorkflowGraph.
        :type: str
        """
        self._friendly_name = friendly_name

    @property
    def injectable_name(self):
        """
        Gets the injectable_name of this WorkflowGraph.


        :return: The injectable_name of this WorkflowGraph.
        :rtype: str
        """
        return self._injectable_name

    @injectable_name.setter
    def injectable_name(self, injectable_name):
        """
        Sets the injectable_name of this WorkflowGraph.


        :param injectable_name: The injectable_name of this WorkflowGraph.
        :type: str
        """
        self._injectable_name = injectable_name

    @property
    def options(self):
        """
        Gets the options of this WorkflowGraph.


        :return: The options of this WorkflowGraph.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this WorkflowGraph.


        :param options: The options of this WorkflowGraph.
        :type: object
        """
        self._options = options

    @property
    def tasks(self):
        """
        Gets the tasks of this WorkflowGraph.


        :return: The tasks of this WorkflowGraph.
        :rtype: list[WorkflowGraphTask]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """
        Sets the tasks of this WorkflowGraph.


        :param tasks: The tasks of this WorkflowGraph.
        :type: list[WorkflowGraphTask]
        """
        self._tasks = tasks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

