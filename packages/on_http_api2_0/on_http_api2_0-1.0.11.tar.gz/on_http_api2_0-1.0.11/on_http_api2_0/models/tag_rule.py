# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TagRule(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TagRule - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'contains': 'str',
            'equals': 'str',
            'greater_than': 'float',
            '_in': 'list[str]',
            'less_than': 'float',
            'max': 'float',
            'min': 'float',
            'not_contains': 'str',
            'not_in': 'list[str]',
            'not_regex': 'str',
            'path': 'str',
            'regex': 'str'
        }

        self.attribute_map = {
            'contains': 'contains',
            'equals': 'equals',
            'greater_than': 'greaterThan',
            '_in': 'in',
            'less_than': 'lessThan',
            'max': 'max',
            'min': 'min',
            'not_contains': 'notContains',
            'not_in': 'notIn',
            'not_regex': 'notRegex',
            'path': 'path',
            'regex': 'regex'
        }

        self._contains = None
        self._equals = None
        self._greater_than = None
        self.__in = None
        self._less_than = None
        self._max = None
        self._min = None
        self._not_contains = None
        self._not_in = None
        self._not_regex = None
        self._path = None
        self._regex = None

    @property
    def contains(self):
        """
        Gets the contains of this TagRule.


        :return: The contains of this TagRule.
        :rtype: str
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """
        Sets the contains of this TagRule.


        :param contains: The contains of this TagRule.
        :type: str
        """
        self._contains = contains

    @property
    def equals(self):
        """
        Gets the equals of this TagRule.


        :return: The equals of this TagRule.
        :rtype: str
        """
        return self._equals

    @equals.setter
    def equals(self, equals):
        """
        Sets the equals of this TagRule.


        :param equals: The equals of this TagRule.
        :type: str
        """
        self._equals = equals

    @property
    def greater_than(self):
        """
        Gets the greater_than of this TagRule.


        :return: The greater_than of this TagRule.
        :rtype: float
        """
        return self._greater_than

    @greater_than.setter
    def greater_than(self, greater_than):
        """
        Sets the greater_than of this TagRule.


        :param greater_than: The greater_than of this TagRule.
        :type: float
        """
        self._greater_than = greater_than

    @property
    def _in(self):
        """
        Gets the _in of this TagRule.


        :return: The _in of this TagRule.
        :rtype: list[str]
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """
        Sets the _in of this TagRule.


        :param _in: The _in of this TagRule.
        :type: list[str]
        """
        self.__in = _in

    @property
    def less_than(self):
        """
        Gets the less_than of this TagRule.


        :return: The less_than of this TagRule.
        :rtype: float
        """
        return self._less_than

    @less_than.setter
    def less_than(self, less_than):
        """
        Sets the less_than of this TagRule.


        :param less_than: The less_than of this TagRule.
        :type: float
        """
        self._less_than = less_than

    @property
    def max(self):
        """
        Gets the max of this TagRule.


        :return: The max of this TagRule.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """
        Sets the max of this TagRule.


        :param max: The max of this TagRule.
        :type: float
        """
        self._max = max

    @property
    def min(self):
        """
        Gets the min of this TagRule.


        :return: The min of this TagRule.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """
        Sets the min of this TagRule.


        :param min: The min of this TagRule.
        :type: float
        """
        self._min = min

    @property
    def not_contains(self):
        """
        Gets the not_contains of this TagRule.


        :return: The not_contains of this TagRule.
        :rtype: str
        """
        return self._not_contains

    @not_contains.setter
    def not_contains(self, not_contains):
        """
        Sets the not_contains of this TagRule.


        :param not_contains: The not_contains of this TagRule.
        :type: str
        """
        self._not_contains = not_contains

    @property
    def not_in(self):
        """
        Gets the not_in of this TagRule.


        :return: The not_in of this TagRule.
        :rtype: list[str]
        """
        return self._not_in

    @not_in.setter
    def not_in(self, not_in):
        """
        Sets the not_in of this TagRule.


        :param not_in: The not_in of this TagRule.
        :type: list[str]
        """
        self._not_in = not_in

    @property
    def not_regex(self):
        """
        Gets the not_regex of this TagRule.


        :return: The not_regex of this TagRule.
        :rtype: str
        """
        return self._not_regex

    @not_regex.setter
    def not_regex(self, not_regex):
        """
        Sets the not_regex of this TagRule.


        :param not_regex: The not_regex of this TagRule.
        :type: str
        """
        self._not_regex = not_regex

    @property
    def path(self):
        """
        Gets the path of this TagRule.


        :return: The path of this TagRule.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this TagRule.


        :param path: The path of this TagRule.
        :type: str
        """
        self._path = path

    @property
    def regex(self):
        """
        Gets the regex of this TagRule.


        :return: The regex of this TagRule.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """
        Sets the regex of this TagRule.


        :param regex: The regex of this TagRule.
        :type: str
        """
        self._regex = regex

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

