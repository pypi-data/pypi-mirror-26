# coding: utf-8

"""
    Haplotype Frequency Curation Service

    Allows to store and return haplotype frequency data

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def hfc_get(self, **kwargs):
        """
        
        Gets a list of all submission data sets 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HFCurationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_get_with_http_info(**kwargs)
        else:
            (data) = self.hfc_get_with_http_info(**kwargs)
            return data

    def hfc_get_with_http_info(self, **kwargs):
        """
        
        Gets a list of all submission data sets 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: HFCurationListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/hfc'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HFCurationListResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_population_get(self, **kwargs):
        """
        
        Get a list of all populations 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_population_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PopulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_population_get_with_http_info(**kwargs)
        else:
            (data) = self.hfc_population_get_with_http_info(**kwargs)
            return data

    def hfc_population_get_with_http_info(self, **kwargs):
        """
        
        Get a list of all populations 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_population_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: PopulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_population_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/hfc/population'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PopulationResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_population_population_id_get(self, population_id, **kwargs):
        """
        
        Returns a population with its attached submissions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_population_population_id_get(population_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int population_id: The population id (required)
        :return: PopulationSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_population_population_id_get_with_http_info(population_id, **kwargs)
        else:
            (data) = self.hfc_population_population_id_get_with_http_info(population_id, **kwargs)
            return data

    def hfc_population_population_id_get_with_http_info(self, population_id, **kwargs):
        """
        
        Returns a population with its attached submissions

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_population_population_id_get_with_http_info(population_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int population_id: The population id (required)
        :return: PopulationSubmissionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['population_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_population_population_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'population_id' is set
        if ('population_id' not in params) or (params['population_id'] is None):
            raise ValueError("Missing the required parameter `population_id` when calling `hfc_population_population_id_get`")

        resource_path = '/hfc/population/{populationId}'.replace('{format}', 'json')
        path_params = {}
        if 'population_id' in params:
            path_params['populationId'] = params['population_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PopulationSubmissionResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_post(self, hf_curation_request, **kwargs):
        """
        
        Storing of a new Haplotype Frequency set. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_post(hf_curation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HFCurationRequest hf_curation_request: Haplotype Frequency Curation Data (required)
        :return: HFCurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_post_with_http_info(hf_curation_request, **kwargs)
        else:
            (data) = self.hfc_post_with_http_info(hf_curation_request, **kwargs)
            return data

    def hfc_post_with_http_info(self, hf_curation_request, **kwargs):
        """
        
        Storing of a new Haplotype Frequency set. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_post_with_http_info(hf_curation_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param HFCurationRequest hf_curation_request: Haplotype Frequency Curation Data (required)
        :return: HFCurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hf_curation_request']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hf_curation_request' is set
        if ('hf_curation_request' not in params) or (params['hf_curation_request'] is None):
            raise ValueError("Missing the required parameter `hf_curation_request` when calling `hfc_post`")

        resource_path = '/hfc'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'hf_curation_request' in params:
            body_params = params['hf_curation_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HFCurationResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_cohort_get(self, submission_id, **kwargs):
        """
        
        Returns the list of haplotypes attached to the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_cohort_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: CohortData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_cohort_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_cohort_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_cohort_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns the list of haplotypes attached to the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_cohort_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: CohortData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_cohort_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_cohort_get`")

        resource_path = '/hfc/{submissionId}/cohort'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CohortData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_get(self, submission_id, **kwargs):
        """
        
        Returns a submission of haplotypes

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id that the haplotype frequencies were submitted under (required)
        :return: HFCurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns a submission of haplotypes

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id that the haplotype frequencies were submitted under (required)
        :return: HFCurationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_get`")

        resource_path = '/hfc/{submissionId}'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HFCurationResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_haplotypes_get(self, submission_id, **kwargs):
        """
        
        Returns the list of haplotypes attached to the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_haplotypes_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: HaplotypeFrequencyData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_haplotypes_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_haplotypes_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_haplotypes_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns the list of haplotypes attached to the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_haplotypes_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: HaplotypeFrequencyData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_haplotypes_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_haplotypes_get`")

        resource_path = '/hfc/{submissionId}/haplotypes'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HaplotypeFrequencyData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_labels_get(self, submission_id, **kwargs):
        """
        
        Returns the labels associated to the submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_labels_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: LabelData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_labels_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_labels_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_labels_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns the labels associated to the submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_labels_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: LabelData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_labels_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_labels_get`")

        resource_path = '/hfc/{submissionId}/labels'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LabelData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_population_get(self, submission_id, **kwargs):
        """
        
        Returns the population of the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_population_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: PopulationData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_population_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_population_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_population_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns the population of the given submission

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_population_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: PopulationData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_population_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_population_get`")

        resource_path = '/hfc/{submissionId}/population'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PopulationData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def hfc_submission_id_scope_get(self, submission_id, **kwargs):
        """
        
        Returns the scope of the genotypes used for creating the submitted haplotypes

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_scope_get(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: ScopeData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.hfc_submission_id_scope_get_with_http_info(submission_id, **kwargs)
        else:
            (data) = self.hfc_submission_id_scope_get_with_http_info(submission_id, **kwargs)
            return data

    def hfc_submission_id_scope_get_with_http_info(self, submission_id, **kwargs):
        """
        
        Returns the scope of the genotypes used for creating the submitted haplotypes

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.hfc_submission_id_scope_get_with_http_info(submission_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int submission_id: The submission id (required)
        :return: ScopeData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['submission_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hfc_submission_id_scope_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'submission_id' is set
        if ('submission_id' not in params) or (params['submission_id'] is None):
            raise ValueError("Missing the required parameter `submission_id` when calling `hfc_submission_id_scope_get`")

        resource_path = '/hfc/{submissionId}/scope'.replace('{format}', 'json')
        path_params = {}
        if 'submission_id' in params:
            path_params['submissionId'] = params['submission_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScopeData',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
