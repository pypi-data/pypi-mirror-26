# coding: utf-8

"""
    Haplotype Frequency Curation Service

    Allows to store and return haplotype frequency data

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Method(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type_of_method=None, method_value=None, method_comment=None, method_reference=None):
        """
        Method - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type_of_method': 'str',
            'method_value': 'str',
            'method_comment': 'str',
            'method_reference': 'str'
        }

        self.attribute_map = {
            'type_of_method': 'typeOfMethod',
            'method_value': 'methodValue',
            'method_comment': 'methodComment',
            'method_reference': 'methodReference'
        }

        self._type_of_method = type_of_method
        self._method_value = method_value
        self._method_comment = method_comment
        self._method_reference = method_reference

    @property
    def type_of_method(self):
        """
        Gets the type_of_method of this Method.
        Type of method label

        :return: The type_of_method of this Method.
        :rtype: str
        """
        return self._type_of_method

    @type_of_method.setter
    def type_of_method(self, type_of_method):
        """
        Sets the type_of_method of this Method.
        Type of method label

        :param type_of_method: The type_of_method of this Method.
        :type: str
        """
        allowed_values = ["EM_ALGORITHM", "EM_VERSION", "EM_ALG_REF", "MAC_SERVICE", "MAC_SER_REF", "MAC_VERSION", "ARS_SERVICE", "ARS_SERV_REF", "ARS_VERSION", "HWE_METHOD", "HWE_REF", "LD_METHOD", "LD_METHOD_REF"]
        if type_of_method not in allowed_values:
            raise ValueError(
                "Invalid value for `type_of_method` ({0}), must be one of {1}"
                .format(type_of_method, allowed_values)
            )

        self._type_of_method = type_of_method

    @property
    def method_value(self):
        """
        Gets the method_value of this Method.
        Value of method

        :return: The method_value of this Method.
        :rtype: str
        """
        return self._method_value

    @method_value.setter
    def method_value(self, method_value):
        """
        Sets the method_value of this Method.
        Value of method

        :param method_value: The method_value of this Method.
        :type: str
        """

        self._method_value = method_value

    @property
    def method_comment(self):
        """
        Gets the method_comment of this Method.
        Comment on method

        :return: The method_comment of this Method.
        :rtype: str
        """
        return self._method_comment

    @method_comment.setter
    def method_comment(self, method_comment):
        """
        Sets the method_comment of this Method.
        Comment on method

        :param method_comment: The method_comment of this Method.
        :type: str
        """

        self._method_comment = method_comment

    @property
    def method_reference(self):
        """
        Gets the method_reference of this Method.
        To be used to refer to an external source

        :return: The method_reference of this Method.
        :rtype: str
        """
        return self._method_reference

    @method_reference.setter
    def method_reference(self, method_reference):
        """
        Sets the method_reference of this Method.
        To be used to refer to an external source

        :param method_reference: The method_reference of this Method.
        :type: str
        """

        self._method_reference = method_reference

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
