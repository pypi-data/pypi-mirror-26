# coding: utf-8

"""
    Haplotype Frequency Curation Service

    Allows to store and return haplotype frequency data

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HFCurationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, submission_id=None, population_id=None, cohort_id=None, method_set_id=None, label_id=None, haplotype_list_id=None, scope_id=None, access_id=None):
        """
        HFCurationResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'submission_id': 'int',
            'population_id': 'int',
            'cohort_id': 'int',
            'method_set_id': 'int',
            'label_id': 'int',
            'haplotype_list_id': 'int',
            'scope_id': 'int',
            'access_id': 'int'
        }

        self.attribute_map = {
            'submission_id': 'SubmissionID',
            'population_id': 'PopulationID',
            'cohort_id': 'CohortID',
            'method_set_id': 'MethodSetID',
            'label_id': 'LabelID',
            'haplotype_list_id': 'HaplotypeListID',
            'scope_id': 'ScopeID',
            'access_id': 'AccessID'
        }

        self._submission_id = submission_id
        self._population_id = population_id
        self._cohort_id = cohort_id
        self._method_set_id = method_set_id
        self._label_id = label_id
        self._haplotype_list_id = haplotype_list_id
        self._scope_id = scope_id
        self._access_id = access_id

    @property
    def submission_id(self):
        """
        Gets the submission_id of this HFCurationResponse.
        Reference to a submission

        :return: The submission_id of this HFCurationResponse.
        :rtype: int
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """
        Sets the submission_id of this HFCurationResponse.
        Reference to a submission

        :param submission_id: The submission_id of this HFCurationResponse.
        :type: int
        """

        self._submission_id = submission_id

    @property
    def population_id(self):
        """
        Gets the population_id of this HFCurationResponse.
        Reference to a population

        :return: The population_id of this HFCurationResponse.
        :rtype: int
        """
        return self._population_id

    @population_id.setter
    def population_id(self, population_id):
        """
        Sets the population_id of this HFCurationResponse.
        Reference to a population

        :param population_id: The population_id of this HFCurationResponse.
        :type: int
        """

        self._population_id = population_id

    @property
    def cohort_id(self):
        """
        Gets the cohort_id of this HFCurationResponse.
        References a cohort

        :return: The cohort_id of this HFCurationResponse.
        :rtype: int
        """
        return self._cohort_id

    @cohort_id.setter
    def cohort_id(self, cohort_id):
        """
        Sets the cohort_id of this HFCurationResponse.
        References a cohort

        :param cohort_id: The cohort_id of this HFCurationResponse.
        :type: int
        """

        self._cohort_id = cohort_id

    @property
    def method_set_id(self):
        """
        Gets the method_set_id of this HFCurationResponse.
        References a method set

        :return: The method_set_id of this HFCurationResponse.
        :rtype: int
        """
        return self._method_set_id

    @method_set_id.setter
    def method_set_id(self, method_set_id):
        """
        Sets the method_set_id of this HFCurationResponse.
        References a method set

        :param method_set_id: The method_set_id of this HFCurationResponse.
        :type: int
        """

        self._method_set_id = method_set_id

    @property
    def label_id(self):
        """
        Gets the label_id of this HFCurationResponse.
        References a label

        :return: The label_id of this HFCurationResponse.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """
        Sets the label_id of this HFCurationResponse.
        References a label

        :param label_id: The label_id of this HFCurationResponse.
        :type: int
        """

        self._label_id = label_id

    @property
    def haplotype_list_id(self):
        """
        Gets the haplotype_list_id of this HFCurationResponse.
        References a haplotype list

        :return: The haplotype_list_id of this HFCurationResponse.
        :rtype: int
        """
        return self._haplotype_list_id

    @haplotype_list_id.setter
    def haplotype_list_id(self, haplotype_list_id):
        """
        Sets the haplotype_list_id of this HFCurationResponse.
        References a haplotype list

        :param haplotype_list_id: The haplotype_list_id of this HFCurationResponse.
        :type: int
        """

        self._haplotype_list_id = haplotype_list_id

    @property
    def scope_id(self):
        """
        Gets the scope_id of this HFCurationResponse.
        References a scope

        :return: The scope_id of this HFCurationResponse.
        :rtype: int
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """
        Sets the scope_id of this HFCurationResponse.
        References a scope

        :param scope_id: The scope_id of this HFCurationResponse.
        :type: int
        """

        self._scope_id = scope_id

    @property
    def access_id(self):
        """
        Gets the access_id of this HFCurationResponse.
        References a access controls

        :return: The access_id of this HFCurationResponse.
        :rtype: int
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """
        Sets the access_id of this HFCurationResponse.
        References a access controls

        :param access_id: The access_id of this HFCurationResponse.
        :type: int
        """

        self._access_id = access_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
