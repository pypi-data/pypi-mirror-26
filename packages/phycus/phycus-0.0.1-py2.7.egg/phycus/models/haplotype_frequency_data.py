# coding: utf-8

"""
    Haplotype Frequency Curation Service

    Allows to store and return haplotype frequency data

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HaplotypeFrequencyData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, license=None, resolution_data=None, haplotype_frequency_list=None, quality_list=None):
        """
        HaplotypeFrequencyData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'license': 'License',
            'resolution_data': 'ResolutionData',
            'haplotype_frequency_list': 'list[HaplotypeFrequency]',
            'quality_list': 'list[Quality]'
        }

        self.attribute_map = {
            'license': 'License',
            'resolution_data': 'ResolutionData',
            'haplotype_frequency_list': 'HaplotypeFrequencyList',
            'quality_list': 'QualityList'
        }

        self._license = license
        self._resolution_data = resolution_data
        self._haplotype_frequency_list = haplotype_frequency_list
        self._quality_list = quality_list

    @property
    def license(self):
        """
        Gets the license of this HaplotypeFrequencyData.


        :return: The license of this HaplotypeFrequencyData.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this HaplotypeFrequencyData.


        :param license: The license of this HaplotypeFrequencyData.
        :type: License
        """

        self._license = license

    @property
    def resolution_data(self):
        """
        Gets the resolution_data of this HaplotypeFrequencyData.


        :return: The resolution_data of this HaplotypeFrequencyData.
        :rtype: ResolutionData
        """
        return self._resolution_data

    @resolution_data.setter
    def resolution_data(self, resolution_data):
        """
        Sets the resolution_data of this HaplotypeFrequencyData.


        :param resolution_data: The resolution_data of this HaplotypeFrequencyData.
        :type: ResolutionData
        """

        self._resolution_data = resolution_data

    @property
    def haplotype_frequency_list(self):
        """
        Gets the haplotype_frequency_list of this HaplotypeFrequencyData.
        List of HaplotypeFrequencys

        :return: The haplotype_frequency_list of this HaplotypeFrequencyData.
        :rtype: list[HaplotypeFrequency]
        """
        return self._haplotype_frequency_list

    @haplotype_frequency_list.setter
    def haplotype_frequency_list(self, haplotype_frequency_list):
        """
        Sets the haplotype_frequency_list of this HaplotypeFrequencyData.
        List of HaplotypeFrequencys

        :param haplotype_frequency_list: The haplotype_frequency_list of this HaplotypeFrequencyData.
        :type: list[HaplotypeFrequency]
        """

        self._haplotype_frequency_list = haplotype_frequency_list

    @property
    def quality_list(self):
        """
        Gets the quality_list of this HaplotypeFrequencyData.
        List of Quality

        :return: The quality_list of this HaplotypeFrequencyData.
        :rtype: list[Quality]
        """
        return self._quality_list

    @quality_list.setter
    def quality_list(self, quality_list):
        """
        Sets the quality_list of this HaplotypeFrequencyData.
        List of Quality

        :param quality_list: The quality_list of this HaplotypeFrequencyData.
        :type: list[Quality]
        """

        self._quality_list = quality_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
