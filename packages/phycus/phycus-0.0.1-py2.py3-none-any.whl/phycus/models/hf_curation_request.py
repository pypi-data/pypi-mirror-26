# coding: utf-8

"""
    Haplotype Frequency Curation Service

    Allows to store and return haplotype frequency data

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HFCurationRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, population_id=None, cohort_id=None, cohort_data=None, method_set_id=None, method_data=None, label_id=None, label_data=None, haplotype_frequency_data_id=None, haplotype_frequency_data=None, scope_id=None, scope_data=None, access_id=None, access_data=None):
        """
        HFCurationRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'population_id': 'int',
            'cohort_id': 'int',
            'cohort_data': 'CohortData',
            'method_set_id': 'int',
            'method_data': 'MethodData',
            'label_id': 'int',
            'label_data': 'LabelData',
            'haplotype_frequency_data_id': 'str',
            'haplotype_frequency_data': 'HaplotypeFrequencyData',
            'scope_id': 'int',
            'scope_data': 'ScopeData',
            'access_id': 'int',
            'access_data': 'AccessData'
        }

        self.attribute_map = {
            'population_id': 'PopulationID',
            'cohort_id': 'CohortID',
            'cohort_data': 'CohortData',
            'method_set_id': 'MethodSetID',
            'method_data': 'MethodData',
            'label_id': 'LabelID',
            'label_data': 'LabelData',
            'haplotype_frequency_data_id': 'HaplotypeFrequencyDataID',
            'haplotype_frequency_data': 'HaplotypeFrequencyData',
            'scope_id': 'ScopeID',
            'scope_data': 'ScopeData',
            'access_id': 'AccessID',
            'access_data': 'AccessData'
        }

        self._population_id = population_id
        self._cohort_id = cohort_id
        self._cohort_data = cohort_data
        self._method_set_id = method_set_id
        self._method_data = method_data
        self._label_id = label_id
        self._label_data = label_data
        self._haplotype_frequency_data_id = haplotype_frequency_data_id
        self._haplotype_frequency_data = haplotype_frequency_data
        self._scope_id = scope_id
        self._scope_data = scope_data
        self._access_id = access_id
        self._access_data = access_data

    @property
    def population_id(self):
        """
        Gets the population_id of this HFCurationRequest.
        Reference to a population

        :return: The population_id of this HFCurationRequest.
        :rtype: int
        """
        return self._population_id

    @population_id.setter
    def population_id(self, population_id):
        """
        Sets the population_id of this HFCurationRequest.
        Reference to a population

        :param population_id: The population_id of this HFCurationRequest.
        :type: int
        """

        self._population_id = population_id

    @property
    def cohort_id(self):
        """
        Gets the cohort_id of this HFCurationRequest.
        Cohort ID or genotype list

        :return: The cohort_id of this HFCurationRequest.
        :rtype: int
        """
        return self._cohort_id

    @cohort_id.setter
    def cohort_id(self, cohort_id):
        """
        Sets the cohort_id of this HFCurationRequest.
        Cohort ID or genotype list

        :param cohort_id: The cohort_id of this HFCurationRequest.
        :type: int
        """

        self._cohort_id = cohort_id

    @property
    def cohort_data(self):
        """
        Gets the cohort_data of this HFCurationRequest.


        :return: The cohort_data of this HFCurationRequest.
        :rtype: CohortData
        """
        return self._cohort_data

    @cohort_data.setter
    def cohort_data(self, cohort_data):
        """
        Sets the cohort_data of this HFCurationRequest.


        :param cohort_data: The cohort_data of this HFCurationRequest.
        :type: CohortData
        """

        self._cohort_data = cohort_data

    @property
    def method_set_id(self):
        """
        Gets the method_set_id of this HFCurationRequest.
        References a method set

        :return: The method_set_id of this HFCurationRequest.
        :rtype: int
        """
        return self._method_set_id

    @method_set_id.setter
    def method_set_id(self, method_set_id):
        """
        Sets the method_set_id of this HFCurationRequest.
        References a method set

        :param method_set_id: The method_set_id of this HFCurationRequest.
        :type: int
        """

        self._method_set_id = method_set_id

    @property
    def method_data(self):
        """
        Gets the method_data of this HFCurationRequest.


        :return: The method_data of this HFCurationRequest.
        :rtype: MethodData
        """
        return self._method_data

    @method_data.setter
    def method_data(self, method_data):
        """
        Sets the method_data of this HFCurationRequest.


        :param method_data: The method_data of this HFCurationRequest.
        :type: MethodData
        """

        self._method_data = method_data

    @property
    def label_id(self):
        """
        Gets the label_id of this HFCurationRequest.
        References a label

        :return: The label_id of this HFCurationRequest.
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """
        Sets the label_id of this HFCurationRequest.
        References a label

        :param label_id: The label_id of this HFCurationRequest.
        :type: int
        """

        self._label_id = label_id

    @property
    def label_data(self):
        """
        Gets the label_data of this HFCurationRequest.


        :return: The label_data of this HFCurationRequest.
        :rtype: LabelData
        """
        return self._label_data

    @label_data.setter
    def label_data(self, label_data):
        """
        Sets the label_data of this HFCurationRequest.


        :param label_data: The label_data of this HFCurationRequest.
        :type: LabelData
        """

        self._label_data = label_data

    @property
    def haplotype_frequency_data_id(self):
        """
        Gets the haplotype_frequency_data_id of this HFCurationRequest.
        References a haplotype list

        :return: The haplotype_frequency_data_id of this HFCurationRequest.
        :rtype: str
        """
        return self._haplotype_frequency_data_id

    @haplotype_frequency_data_id.setter
    def haplotype_frequency_data_id(self, haplotype_frequency_data_id):
        """
        Sets the haplotype_frequency_data_id of this HFCurationRequest.
        References a haplotype list

        :param haplotype_frequency_data_id: The haplotype_frequency_data_id of this HFCurationRequest.
        :type: str
        """

        self._haplotype_frequency_data_id = haplotype_frequency_data_id

    @property
    def haplotype_frequency_data(self):
        """
        Gets the haplotype_frequency_data of this HFCurationRequest.


        :return: The haplotype_frequency_data of this HFCurationRequest.
        :rtype: HaplotypeFrequencyData
        """
        return self._haplotype_frequency_data

    @haplotype_frequency_data.setter
    def haplotype_frequency_data(self, haplotype_frequency_data):
        """
        Sets the haplotype_frequency_data of this HFCurationRequest.


        :param haplotype_frequency_data: The haplotype_frequency_data of this HFCurationRequest.
        :type: HaplotypeFrequencyData
        """

        self._haplotype_frequency_data = haplotype_frequency_data

    @property
    def scope_id(self):
        """
        Gets the scope_id of this HFCurationRequest.
        References a scope

        :return: The scope_id of this HFCurationRequest.
        :rtype: int
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """
        Sets the scope_id of this HFCurationRequest.
        References a scope

        :param scope_id: The scope_id of this HFCurationRequest.
        :type: int
        """

        self._scope_id = scope_id

    @property
    def scope_data(self):
        """
        Gets the scope_data of this HFCurationRequest.


        :return: The scope_data of this HFCurationRequest.
        :rtype: ScopeData
        """
        return self._scope_data

    @scope_data.setter
    def scope_data(self, scope_data):
        """
        Sets the scope_data of this HFCurationRequest.


        :param scope_data: The scope_data of this HFCurationRequest.
        :type: ScopeData
        """

        self._scope_data = scope_data

    @property
    def access_id(self):
        """
        Gets the access_id of this HFCurationRequest.
        References a access controls

        :return: The access_id of this HFCurationRequest.
        :rtype: int
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """
        Sets the access_id of this HFCurationRequest.
        References a access controls

        :param access_id: The access_id of this HFCurationRequest.
        :type: int
        """

        self._access_id = access_id

    @property
    def access_data(self):
        """
        Gets the access_data of this HFCurationRequest.


        :return: The access_data of this HFCurationRequest.
        :rtype: AccessData
        """
        return self._access_data

    @access_data.setter
    def access_data(self, access_data):
        """
        Sets the access_data of this HFCurationRequest.


        :param access_data: The access_data of this HFCurationRequest.
        :type: AccessData
        """

        self._access_data = access_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
