import os
import h5py
import numpy as np
import scipy
import logging

from loompy import LoomConnection


class LoomTiles(object):
	#############
	# DEEP ZOOM #
	#############
	def __init__(self, ds: LoomConnection) -> None:
		self.ds = ds
		self._maxes = None  # type: np.ndarray
		self._mins = None

	def maxes(self):
		if self._maxes is None:
			#colormax = np.percentile(data, 99, axis=1) + 0.1
			minFloat = np.finfo(float).eps;
			def percentileMap(data):
				return np.percentile(data, 99, axis=1) + minFloat;


			self._maxes = self.ds.map([max], 0)[0]
		return self._maxes

	def mins(self):
		if self._mins is None:
			self._mins = self.ds.map([min], 0)[0]
		return self._mins

	def prepare_heatmap(self):
		if self.ds._file.__contains__("tiles"):
			logging.info("    Removing deprecated tile pyramid, use h5repack to reclaim space")
			del self.ds._file['tiles']
		self.dz_get_zoom_tile(0, 0, 8)
		logging.info("    done")

	def dz_zoom_range(self):
		"""
		Determine the zoom limits for this file.

		Returns:
			Tuple (middle, min_zoom, max_zoom) of integer zoom levels.
		"""
		return (8, int(max(np.ceil(np.log2(self.ds.shape)))), int(max(np.ceil(np.log2(self.ds.shape))) + 8))

	def dz_dimensions(self):
		"""
		Determine the total size of the deep zoom image.

		Returns:
			Tuple (x,y) of integers
		"""
		(y, x) = np.divide(self.ds.shape, 256) * 256 * pow(2, 8)
		return (x, y)

	def dz_tile_to_image(self, x, y, z, tile):
		# Crop outside matrix dimensions
		(zmin, zmid, zmax) = self.dz_zoom_range()
		(max_x, max_y) = (int(pow(2, z - zmid) * self.ds.shape[1]) - x * 256, int(pow(2, z - zmid) * self.ds.shape[0]) - y * 256)
		if max_x < 0:
			max_x = -1
		if max_y < 0:
			max_y = -1
		if max_x < 255:
			tile[:, max_x + 1:256] = 255
		if max_y < 255:
			tile[max_y+1:256, :] = 255
		return scipy.misc.toimage(tile, cmin=0, cmax=255, pal=_viridis)

	def dz_save_tile(self, x, y, z, tile, truncate=False):
		(zmin, zmid, zmax) = self.dz_zoom_range()
		if (z < zmin or z > zmid or
			x < 0 or y < 0 or
			x * 256 * 2**(zmid-z) > self.ds.shape[1] or
			y * 256 * 2**(zmid-z) > self.ds.shape[0]):
			#logging.info("Trying to save out of bound tile: x: %02d y: %02d z: %02d" % (x, y, z))
			return

		tiledir = '%s.tiles/z%02d/' % (self.ds.filename, z)
		tilepath = 	'%sx%03d_y%03d.png' % (tiledir, x, y)

		# make sure the tile directory exists
		# we use a try/error approach so that we
		# don't have to worry about race conditions
		# (if another process creates the same
		#  directory we just catch the exception)
		try:
			os.makedirs(tiledir, exist_ok=True)
		except OSError as exception:
			# if the error was that the directory already
			# exists, ignore it, since that is expected.
			if exception.errno != errno.EEXIST:
				raise

		if os.path.isfile(tilepath) and not truncate:
			return scipy.misc.imread(tilepath, mode='P')
		else:
			img = self.dz_tile_to_image(x, y, z, tile)
			# save to file, overwriting the old one
			with open(tilepath, 'wb') as img_io:
				#logging.info("saving %s" % tilepath)
				print('.', end='', flush=True)
				img.save(img_io, 'PNG', compress_level=4)
			return img



	def dz_merge_tile(self, tl, tr, bl, br):
		temp = np.empty((512, 512), dtype = 'float32')
		temp[0:256, 0:256] = tl
		temp[0:256, 256:512] = tr
		temp[256:512, 0:256] = bl
		temp[256:512, 256:512] = br
		return temp[0::2, 0::2]

	# Returns a submatrix scaled to 0-255 range
	def dz_get_zoom_tile(self, x, y, z):
		"""
		Create a 256x256 pixel matrix corresponding to the tile at x,y and z.

		Args:
			x (int):	Horizontal tile index (0 is left-most)

			y (int): 	Vertical tile index (0 is top-most)

			z (int): 	Zoom level (8 is 'middle' where pixels correspond to data values)

		Returns:
			Numpy ndarray of shape (256,256)
		"""
		#logging.debug("Computing tile at x=%i y=%i z=%i" % (x,y,z))
		(zmin, zmid, zmax) = self.dz_zoom_range()
		if z < zmin:
			raise ValueError("z cannot be less than %s" % zmin)
		if z > zmax:
			raise ValueError("z cannot be greater than %s" % zmax)
		if x < 0:
			raise ValueError("x cannot be less than zero")
		if y < 0:
			raise ValueError("y cannot be less than zero")

		if x * 256 * 2**(zmid-z) > self.ds.shape[1] or y * 256 * 2**(zmid-z) > self.ds.shape[0]:
			return np.zeros((256, 256), dtype='float32')

		if z == zmid:
			tile = self.ds._file['matrix'][y * 256 : y * 256 + 256, x * 256 : x*256 + 256]
			# Pad if needed to make it 256x256
			if tile.shape[0] < 256 or tile.shape[1] < 256:
				tile = np.pad(tile, ((0,256-tile.shape[0]), (0,256-tile.shape[1])), 'constant', constant_values=0)
			# Rescale
			maxes = self.maxes()[y*256:y*256+256]
			mins = self.mins()[y*256:y*256+256]
			if maxes.shape[0] < 256:
				maxes = np.pad(maxes, (0, 256 - maxes.shape[0]), 'constant', constant_values=0)
				mins = np.pad(mins, (0, 256 - mins.shape[0]), 'constant', constant_values=0)
			# tile = (np.log2(tile.transpose()-mins+1)/np.log2(maxes-mins+1)*255).transpose()
			mins = mins - 1
			maxes = maxes - mins
			np.log2(maxes, maxes)
			np.log2(tile.transpose()-mins, tile)
			# avoid intermediate arrays as much as we can
			tile /= maxes
			tile *= 255
			tile = tile.transpose()
			#tile = (tile+1)/(maxes+1)*256
			self.dz_save_tile(x, y, z, tile, truncate=False)
			return tile

		if z < zmid:
			# Get the four less zoomed-out tiles required to make this tile
			tl = self.dz_get_zoom_tile(x*2,y*2,z+1)
			tr = self.dz_get_zoom_tile(x*2 + 1,y*2,z+1)
			bl = self.dz_get_zoom_tile(x*2,y*2 + 1,z+1)
			br = self.dz_get_zoom_tile(x*2+1,y*2+1,z+1)
			# merge into zoomed out tiles
			tile = self.dz_merge_tile(tl, tr, bl, br)
			self.dz_save_tile(x, y, z, tile, truncate=False)
			return tile


_bluewhitered = np.array([[ 19,  74, 133],
		[ 32, 100, 169],
		[ 48, 122, 183],
		[ 64, 143, 194],
		[ 96, 166, 206],
		[136, 191, 220],
		[168, 209, 229],
		[198, 224, 238],
		[221, 235, 243],
		[239, 244, 247],
		[ 17,  70, 127],
		[ 18,  72, 130],
		[ 19,  74, 133],
		[ 20,  76, 136],
		[ 21,  78, 139],
		[ 22,  81, 142],
		[ 23,  83, 145],
		[ 24,  85, 148],
		[ 25,  87, 151],
		[ 26,  89, 154],
		[ 28,  91, 157],
		[ 29,  93, 160],
		[ 30,  95, 163],
		[ 31,  98, 166],
		[ 32, 100, 169],
		[ 33, 102, 172],
		[ 34, 104, 174],
		[ 36, 106, 175],
		[ 37, 107, 175],
		[ 38, 109, 176],
		[ 40, 111, 177],
		[ 41, 113, 178],
		[ 42, 114, 179],
		[ 44, 116, 180],
		[ 45, 118, 181],
		[ 46, 120, 182],
		[ 48, 122, 183],
		[ 49, 123, 184],
		[ 50, 125, 184],
		[ 52, 127, 185],
		[ 53, 129, 186],
		[ 54, 130, 187],
		[ 56, 132, 188],
		[ 57, 134, 189],
		[ 58, 136, 190],
		[ 60, 137, 191],
		[ 61, 139, 192],
		[ 62, 141, 193],
		[ 64, 143, 194],
		[ 65, 145, 194],
		[ 66, 146, 195],
		[ 68, 148, 196],
		[ 71, 150, 197],
		[ 74, 152, 198],
		[ 77, 154, 199],
		[ 80, 156, 201],
		[ 83, 158, 202],
		[ 86, 160, 203],
		[ 90, 162, 204],
		[ 93, 164, 205],
		[ 96, 166, 206],
		[ 99, 168, 207],
		[102, 170, 208],
		[105, 172, 209],
		[108, 174, 210],
		[111, 176, 211],
		[114, 178, 212],
		[118, 180, 213],
		[121, 182, 214],
		[124, 184, 215],
		[127, 185, 216],
		[130, 187, 218],
		[133, 189, 219],
		[136, 191, 220],
		[139, 193, 221],
		[142, 195, 222],
		[146, 197, 223],
		[148, 199, 224],
		[151, 200, 224],
		[153, 201, 225],
		[156, 203, 226],
		[158, 204, 227],
		[161, 205, 227],
		[163, 206, 228],
		[166, 208, 229],
		[168, 209, 229],
		[171, 210, 230],
		[173, 212, 231],
		[176, 213, 232],
		[178, 214, 232],
		[181, 215, 233],
		[183, 217, 234],
		[186, 218, 234],
		[188, 219, 235],
		[190, 220, 236],
		[193, 222, 236],
		[195, 223, 237],
		[198, 224, 238],
		[200, 225, 239],
		[203, 227, 239],
		[205, 228, 240],
		[208, 229, 241],
		[210, 230, 241],
		[212, 231, 242],
		[213, 232, 242],
		[215, 233, 242],
		[216, 233, 243],
		[218, 234, 243],
		[219, 235, 243],
		[221, 235, 243],
		[222, 236, 244],
		[224, 237, 244],
		[225, 237, 244],
		[227, 238, 244],
		[228, 239, 245],
		[230, 240, 245],
		[231, 240, 245],
		[233, 241, 246],
		[234, 242, 246],
		[236, 242, 246],
		[237, 243, 246],
		[239, 244, 247],
		[240, 245, 247],
		[242, 245, 247],
		[243, 246, 248],
		[245, 247, 248],
		[246, 247, 248],
		[248, 248, 248],
		[249, 248, 248],
		[249, 247, 246],
		[249, 246, 244],
		[249, 245, 242],
		[250, 244, 240],
		[250, 242, 238],
		[250, 241, 236],
		[250, 240, 234],
		[250, 239, 232],
		[251, 238, 231],
		[251, 237, 229],
		[251, 236, 227],
		[251, 235, 225],
		[252, 234, 223],
		[252, 232, 221],
		[252, 231, 219],
		[252, 230, 217],
		[253, 229, 215],
		[253, 228, 214],
		[253, 227, 212],
		[253, 226, 210],
		[254, 225, 208],
		[254, 224, 206],
		[254, 223, 204],
		[254, 221, 202],
		[254, 220, 200],
		[254, 218, 198],
		[254, 216, 195],
		[253, 214, 192],
		[253, 212, 189],
		[253, 210, 187],
		[252, 208, 184],
		[252, 205, 181],
		[252, 203, 179],
		[251, 201, 176],
		[251, 199, 173],
		[251, 197, 170],
		[250, 195, 168],
		[250, 193, 165],
		[250, 191, 162],
		[249, 188, 160],
		[249, 186, 157],
		[248, 184, 154],
		[248, 182, 151],
		[248, 180, 149],
		[247, 178, 146],
		[247, 176, 143],
		[247, 174, 141],
		[246, 171, 138],
		[246, 169, 135],
		[246, 167, 132],
		[245, 165, 130],
		[244, 162, 128],
		[243, 159, 126],
		[241, 157, 124],
		[240, 154, 122],
		[239, 151, 120],
		[238, 148, 117],
		[237, 146, 115],
		[235, 143, 113],
		[234, 140, 111],
		[233, 138, 109],
		[232, 135, 107],
		[231, 132, 105],
		[230, 129, 103],
		[228, 127, 101],
		[227, 124,  99],
		[226, 121,  97],
		[225, 119,  94],
		[224, 116,  92],
		[222, 113,  90],
		[221, 110,  88],
		[220, 108,  86],
		[219, 105,  84],
		[218, 102,  82],
		[217, 100,  80],
		[215,  97,  78],
		[214,  94,  76],
		[213,  91,  75],
		[211,  88,  74],
		[210,  86,  72],
		[208,  83,  71],
		[207,  80,  70],
		[205,  77,  68],
		[204,  74,  67],
		[203,  71,  66],
		[201,  69,  64],
		[200,  66,  63],
		[198,  63,  62],
		[197,  60,  60],
		[195,  57,  59],
		[194,  54,  58],
		[193,  52,  56],
		[191,  49,  55],
		[190,  46,  54],
		[188,  43,  52],
		[187,  40,  51],
		[186,  37,  50],
		[184,  35,  48],
		[183,  32,  47],
		[181,  29,  46],
		[180,  26,  44],
		[178,  24,  43],
		[175,  23,  43],
		[172,  22,  42],
		[169,  21,  42],
		[166,  20,  42],
		[163,  19,  41],
		[160,  18,  41],
		[157,  18,  40],
		[154,  17,  40],
		[151,  16,  39],
		[148,  15,  39],
		[145,  14,  38],
		[142,  13,  38],
		[139,  12,  37],
		[136,  11,  37],
		[133,  10,  36],
		[130,	9,  36],
		[128,	8,  35],
		[125,	7,  35],
		[122,	6,  34],
		[119,	5,  34],
		[116,	4,  34],
		[113,	3,  33],
		[110,	2,  33],
		[107,	1,  32],
		[221, 221, 221]])


_viridis = np.array([[68,1,84 ],
		[68,2,86 ],
		[69,4,87 ],
		[69,5,89 ],
		[70,7,90 ],
		[70,8,92 ],
		[70,10,93 ],
		[70,11,94 ],
		[71,13,96 ],
		[71,14,97 ],
		[71,16,99 ],
		[71,17,100 ],
		[71,19,101 ],
		[72,20,103 ],
		[72,22,104 ],
		[72,23,105 ],
		[72,24,106 ],
		[72,26,108 ],
		[72,27,109 ],
		[72,28,110 ],
		[72,29,111 ],
		[72,31,112 ],
		[72,32,113 ],
		[72,33,115 ],
		[72,35,116 ],
		[72,36,117 ],
		[72,37,118 ],
		[72,38,119 ],
		[72,40,120 ],
		[72,41,121 ],
		[71,42,122 ],
		[71,44,122 ],
		[71,45,123 ],
		[71,46,124 ],
		[71,47,125 ],
		[70,48,126 ],
		[70,50,126 ],
		[70,51,127 ],
		[70,52,128 ],
		[69,53,129 ],
		[69,55,129 ],
		[69,56,130 ],
		[68,57,131 ],
		[68,58,131 ],
		[68,59,132 ],
		[67,61,132 ],
		[67,62,133 ],
		[66,63,133 ],
		[66,64,134 ],
		[66,65,134 ],
		[65,66,135 ],
		[65,68,135 ],
		[64,69,136 ],
		[64,70,136 ],
		[63,71,136 ],
		[63,72,137 ],
		[62,73,137 ],
		[62,74,137 ],
		[62,76,138 ],
		[61,77,138 ],
		[61,78,138 ],
		[60,79,138 ],
		[60,80,139 ],
		[59,81,139 ],
		[59,82,139 ],
		[58,83,139 ],
		[58,84,140 ],
		[57,85,140 ],
		[57,86,140 ],
		[56,88,140 ],
		[56,89,140 ],
		[55,90,140 ],
		[55,91,141 ],
		[54,92,141 ],
		[54,93,141 ],
		[53,94,141 ],
		[53,95,141 ],
		[52,96,141 ],
		[52,97,141 ],
		[51,98,141 ],
		[51,99,141 ],
		[50,100,142 ],
		[50,101,142 ],
		[49,102,142 ],
		[49,103,142 ],
		[49,104,142 ],
		[48,105,142 ],
		[48,106,142 ],
		[47,107,142 ],
		[47,108,142 ],
		[46,109,142 ],
		[46,110,142 ],
		[46,111,142 ],
		[45,112,142 ],
		[45,113,142 ],
		[44,113,142 ],
		[44,114,142 ],
		[44,115,142 ],
		[43,116,142 ],
		[43,117,142 ],
		[42,118,142 ],
		[42,119,142 ],
		[42,120,142 ],
		[41,121,142 ],
		[41,122,142 ],
		[41,123,142 ],
		[40,124,142 ],
		[40,125,142 ],
		[39,126,142 ],
		[39,127,142 ],
		[39,128,142 ],
		[38,129,142 ],
		[38,130,142 ],
		[38,130,142 ],
		[37,131,142 ],
		[37,132,142 ],
		[37,133,142 ],
		[36,134,142 ],
		[36,135,142 ],
		[35,136,142 ],
		[35,137,142 ],
		[35,138,141 ],
		[34,139,141 ],
		[34,140,141 ],
		[34,141,141 ],
		[33,142,141 ],
		[33,143,141 ],
		[33,144,141 ],
		[33,145,140 ],
		[32,146,140 ],
		[32,146,140 ],
		[32,147,140 ],
		[31,148,140 ],
		[31,149,139 ],
		[31,150,139 ],
		[31,151,139 ],
		[31,152,139 ],
		[31,153,138 ],
		[31,154,138 ],
		[30,155,138 ],
		[30,156,137 ],
		[30,157,137 ],
		[31,158,137 ],
		[31,159,136 ],
		[31,160,136 ],
		[31,161,136 ],
		[31,161,135 ],
		[31,162,135 ],
		[32,163,134 ],
		[32,164,134 ],
		[33,165,133 ],
		[33,166,133 ],
		[34,167,133 ],
		[34,168,132 ],
		[35,169,131 ],
		[36,170,131 ],
		[37,171,130 ],
		[37,172,130 ],
		[38,173,129 ],
		[39,173,129 ],
		[40,174,128 ],
		[41,175,127 ],
		[42,176,127 ],
		[44,177,126 ],
		[45,178,125 ],
		[46,179,124 ],
		[47,180,124 ],
		[49,181,123 ],
		[50,182,122 ],
		[52,182,121 ],
		[53,183,121 ],
		[55,184,120 ],
		[56,185,119 ],
		[58,186,118 ],
		[59,187,117 ],
		[61,188,116 ],
		[63,188,115 ],
		[64,189,114 ],
		[66,190,113 ],
		[68,191,112 ],
		[70,192,111 ],
		[72,193,110 ],
		[74,193,109 ],
		[76,194,108 ],
		[78,195,107 ],
		[80,196,106 ],
		[82,197,105 ],
		[84,197,104 ],
		[86,198,103 ],
		[88,199,101 ],
		[90,200,100 ],
		[92,200,99 ],
		[94,201,98 ],
		[96,202,96 ],
		[99,203,95 ],
		[101,203,94 ],
		[103,204,92 ],
		[105,205,91 ],
		[108,205,90 ],
		[110,206,88 ],
		[112,207,87 ],
		[115,208,86 ],
		[117,208,84 ],
		[119,209,83 ],
		[122,209,81 ],
		[124,210,80 ],
		[127,211,78 ],
		[129,211,77 ],
		[132,212,75 ],
		[134,213,73 ],
		[137,213,72 ],
		[139,214,70 ],
		[142,214,69 ],
		[144,215,67 ],
		[147,215,65 ],
		[149,216,64 ],
		[152,216,62 ],
		[155,217,60 ],
		[157,217,59 ],
		[160,218,57 ],
		[162,218,55 ],
		[165,219,54 ],
		[168,219,52 ],
		[170,220,50 ],
		[173,220,48 ],
		[176,221,47 ],
		[178,221,45 ],
		[181,222,43 ],
		[184,222,41 ],
		[186,222,40 ],
		[189,223,38 ],
		[192,223,37 ],
		[194,223,35 ],
		[197,224,33 ],
		[200,224,32 ],
		[202,225,31 ],
		[205,225,29 ],
		[208,225,28 ],
		[210,226,27 ],
		[213,226,26 ],
		[216,226,25 ],
		[218,227,25 ],
		[221,227,24 ],
		[223,227,24 ],
		[226,228,24 ],
		[229,228,25 ],
		[231,228,25 ],
		[234,229,26 ],
		[236,229,27 ],
		[239,229,28 ],
		[241,229,29 ],
		[244,230,30 ],
		[246,230,32 ],
		[248,230,33 ],
		[251,231,35 ],
		[221, 221, 221]])