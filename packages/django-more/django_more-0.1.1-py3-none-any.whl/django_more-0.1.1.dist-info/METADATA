Metadata-Version: 2.0
Name: django-more
Version: 0.1.1
Summary: Django with more
Home-page: https://github.com/ashleywaite/django-more
Author: Ashley Waite
Author-email: ashley.c.waite@gmail.com
License: BSD
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Framework :: Django :: 1.11
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Requires-Python: >=3.4
Requires-Dist: django
Provides-Extra: test
Requires-Dist: psycopg2; extra == 'test'
Requires-Dist: mysqlclient; extra == 'test'

django-more
===========

| A collection of Django patches and extensions to give more of the
  features and functionality that I want or expect from Django.
| *Currently aimed only at Django 1.11*

django\_more
------------

Extras for Django that do not require any patching and can be used
directly. \* *django\_more.storages* \* *django\_more.PartialIndex* \*
*django\_more.HashField*

django\_cte
-----------

**Currently in WIP state and not included in distribution**

Patches Django to add CTE based functionality. \*
django\_cte.patch\_cte()

*Placing django\_cte into Django INSTALLED\_APPS will automatically
invoke patch\_cte()*

django\_enum
------------

Patches Django to add EnumFields, with enum state information in
migrations to allow for consistent migrations compatible with postgres
and mysql. \* django\_enum.EnumField \* django\_enum.enum\_meta \*
django\_enum.patch\_enum()

*Placing django\_enum into Django INSTALLED\_APPS will automatically
invoke patch\_enum()*

django\_types
-------------

Patches Django to add support for custom database types to be used
within migrations. \* django\_types.patch\_types()

*To avoid additional dependencies in INSTALLED\_APPS, apps adding types
requiring this should check for ProjectState.add\_type() support, and if
not present apply this with patch\_types()*

patchy
------

A class based monkey patching package used by the other django\_more
packages to apply their patches in a consistent and safe manner that is
hopefully less fragile to Django core changes. \* patchy.patchy() \*
patchy.super\_patchy()


