# coding: utf-8

"""
    SendinBlue API

    SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  | 

    OpenAPI spec version: 3.0.0
    Contact: contact@sendinblue.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateAttribute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'name': 'str',
        'value': 'str',
        'enumemaration': 'list[CreateAttributeEnumemaration]',
        'type': 'str'
    }

    attribute_map = {
        'category': 'category',
        'name': 'name',
        'value': 'value',
        'enumemaration': 'enumemaration',
        'type': 'type'
    }

    def __init__(self, category=None, name=None, value=None, enumemaration=None, type=None):
        """
        CreateAttribute - a model defined in Swagger
        """

        self._category = None
        self._name = None
        self._value = None
        self._enumemaration = None
        self._type = None

        self.category = category
        self.name = name
        self.value = value
        if enumemaration is not None:
          self.enumemaration = enumemaration
        if type is not None:
          self.type = type

    @property
    def category(self):
        """
        Gets the category of this CreateAttribute.
        Attribute categorisation.

        :return: The category of this CreateAttribute.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this CreateAttribute.
        Attribute categorisation.

        :param category: The category of this CreateAttribute.
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")
        allowed_values = ["normal", "transactional", "category", "calculated", "global"]
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def name(self):
        """
        Gets the name of this CreateAttribute.
        Name of the attribute

        :return: The name of this CreateAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateAttribute.
        Name of the attribute

        :param name: The name of this CreateAttribute.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def value(self):
        """
        Gets the value of this CreateAttribute.
        Value of the attribute

        :return: The value of this CreateAttribute.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this CreateAttribute.
        Value of the attribute

        :param value: The value of this CreateAttribute.
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def enumemaration(self):
        """
        Gets the enumemaration of this CreateAttribute.
        Values that the attribute can take. Use only if the attribute's category is category

        :return: The enumemaration of this CreateAttribute.
        :rtype: list[CreateAttributeEnumemaration]
        """
        return self._enumemaration

    @enumemaration.setter
    def enumemaration(self, enumemaration):
        """
        Sets the enumemaration of this CreateAttribute.
        Values that the attribute can take. Use only if the attribute's category is category

        :param enumemaration: The enumemaration of this CreateAttribute.
        :type: list[CreateAttributeEnumemaration]
        """

        self._enumemaration = enumemaration

    @property
    def type(self):
        """
        Gets the type of this CreateAttribute.
        Type of the attribute

        :return: The type of this CreateAttribute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CreateAttribute.
        Type of the attribute

        :param type: The type of this CreateAttribute.
        :type: str
        """
        allowed_values = ["text", "date", "float", "id"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
