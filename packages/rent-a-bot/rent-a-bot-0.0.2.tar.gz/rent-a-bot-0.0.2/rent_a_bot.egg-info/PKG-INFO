Metadata-Version: 1.1
Name: rent-a-bot
Version: 0.0.2
Summary: Rent-A-Bot, your automation resource provider.
Home-page: https://github.com/cpoisson/rent-a-bot
Author: Charles Poisson
Author-email: charles.poisson@gmail.com
License: MIT
Description-Content-Type: UNKNOWN
Description: Rent-A-Bot
        ==========
        
        |Build Status| |codecov| |pipeline status| |coverage report|
        
        --------------
        
        Rent-a-bot, your automation resource provider.
        
        Exclusive access to a static resource is a common problem in automation,
        rent-a-bot allows you to abstract your resources and lock them to
        prevent any concurrent access.
        
        Purpose
        -------
        
        Rent-a-bot pursue the same objective as Jenkins `Lockable Resource Plugin
        <https://wiki.jenkins.io/display/JENKINS/Lockable+Resources+Plugin>`__.
        
        This latter works quite well, but only if you use... well... Jenkins.
        
        Rent-A-Bot purpose is to fill the same needs in an environment where
        multiple automation applications exist.
        
        e.g. - Multiple Jenkins application servers - Mixed automation
        application, gitlab CI + Jenkins - Shared resources between humans and
        automates.
        
        What is a resource?
        -------------------
        
        A resource is defined by a **name** and the existence of a **lock
        token** indicating if the resource is locked.
        
        Optional available fields help you customize you resources with
        additional information:
        
        -  Resource description
        -  Lock description
        -  Endpoint
        -  Tags
        
        How to install and run
        ----------------------
        
        Clone the repository from GitLab or GitHub
        
        .. code:: commandline
        
            git clone git@gitlab.com:cpoisson/rent-a-bot.git
        
        .. code:: commandline
        
            git clone git@github.com:cpoisson/rent-a-bot.git
        
        Create a virtual env (here using virtualenv wrapper)
        
        .. code:: commandline
        
            mkvirtualenv rent-a-bot
            workon rent-a-bot
        
        Install the package
        
        .. code:: commandline
        
            pip install .   # pip install -e . if you want to install it in editable mode
        
        Add Flask environment variables
        
        .. code:: commandline
        
            export FLASK_APP=rentabot
        
            export FLASK_DEBUG=true # If you need the debug mode
        
        And... run!
        
        .. code:: commandline
        
            flask run
        
        How to use it
        -------------
        
        Alright, rent-a-bot is up and running.
        
        At this stage you can connect to the front end at http://127.0.0.1:5000/
        (assuming your flask app listen to the port 500)
        
        You will notice that the resource list is empty (dang...), let's
        populate it
        
        Populate the database
        ~~~~~~~~~~~~~~~~~~~~~
        
        You will need a resource descriptor file to populate the database at
        startup.
        
        .. code:: commandline
        
            RENTABOT_RESOURCE_DESCRIPTOR="/absolute/path/to/your/resource/descriptor.yml"
        
        Resource descriptor
        ~~~~~~~~~~~~~~~~~~~
        
        The resource descriptor is a YAML file. It's purpose is to declare the
        resources you want to make available on rent-a-bot
        
        .. code:: yaml
        
            # Resources Description
            # This file describes resources to populate in the database at rent-a-bot startup
        
            coffee-machine:
                description: "Kitchen coffee machine"
                endpoint: "tcp://192.168.1.50"
                tags: "coffee kitchen food"
        
            3d-printer-1:
                description: "Basement 3d printer 1"
                endpoint: "tcp://192.168.1.60"
                tags: "3d-printer basement tool"
        
            another-resource:
                description: "yet another resource"
                endpoint: ""
                tags: ""
        
        Once set, (re)start the flask application. The web view should be
        populated with your resources.
        
        RestFul API
        ~~~~~~~~~~~
        
        List resources
        ^^^^^^^^^^^^^^
        
        GET /api/v1.0/resources
        
        e.g.
        
        .. code:: commandline
        
            curl -X GET -i http://localhost:5000/rentabot/api/v1.0/resources
        
        Access to a given resource
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
        
        GET /api/v1.0/resources/{resource\_id}
        
        e.g.
        
        .. code:: commandline
        
            curl -X GET -i http://localhost:5000/rentabot/api/v1.0/resources/2
        
        Lock a resource
        ^^^^^^^^^^^^^^^
        
        POST /api/v1.0/resources/{resource\_id}/lock
        
        e.g.
        
        .. code:: commandline
        
            curl -X POST -i http://localhost:5000/rentabot/api/v1.0/resources/6/lock
        
        **Note:** If the resource is available, a lock-token will be returned.
        Otherwise an error code is returned.
        
        Unlock a resource
        ^^^^^^^^^^^^^^^^^
        
        POST
        /api/v1.0/resources/{resource\_id}/unlock?lock-token={resource/lock/token}
        
        .. code:: commandline
        
            curl -X POST -i http://localhost:5000/rentabot/api/v1.0/resources/6/unlock\?lock-token\={resource/lock/token}
        
        **Note:** If the resource is already unlocked or the lock-token is not
        valid, an error code is returned.
        
        How to tests
        ------------
        
        Tests implementation
        ~~~~~~~~~~~~~~~~~~~~
        
        Unit tests are done using py.test and coverage
        
        How to run unit tests
        ~~~~~~~~~~~~~~~~~~~~~
        
        .. code:: commandline
        
            python setup.py test
        
        --------------
        
        Helpful documentation used to design this application
        -----------------------------------------------------
        
        -  `Designing a RESTful API with Python and
           Flask <https://blog.miguelgrinberg.com/post/designing-a-restful-api-with-python-and-flask>`__
        -  `Testing Flask
           Applications <http://flask.pocoo.org/docs/0.12/testing/#testing>`__
        -  `Flask Project
           Template <https://github.com/xen/flask-project-template>`__
        -  `Flask
           SQLAlchemy <http://flask-sqlalchemy.pocoo.org/2.1/quickstart/>`__
        -  `Put versus
           Post <https://knpuniversity.com/screencast/rest/put-versus-post>`__
        -  `Best practice for a pragmatic restful
           API <http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api#ssl>`__
        -  `Implementing a RESTful Web API with Python &
           Flask <http://blog.luisrei.com/articles/flaskrest.html>`__
        -  `HTTP status
           code <https://restpatterns.mindtouch.us/HTTP_Status_Codes>`__
        -  `Implementing API
           Exceptions <http://flask.pocoo.org/docs/0.12/patterns/apierrors/>`__
        -  `The Hitchhiker's Guide To
           Python <http://docs.python-guide.org/en/latest/>`__
        
        .. |Build Status| image:: https://travis-ci.org/cpoisson/rent-a-bot.svg?branch=master
           :target: https://travis-ci.org/cpoisson/rent-a-bot
        .. |codecov| image:: https://codecov.io/gh/cpoisson/rent-a-bot/branch/master/graph/badge.svg
           :target: https://codecov.io/gh/cpoisson/rent-a-bot
        .. |pipeline status| image:: https://gitlab.com/cpoisson/rent-a-bot/badges/master/pipeline.svg
           :target: https://gitlab.com/cpoisson/rent-a-bot/commits/master
        .. |coverage report| image:: https://gitlab.com/cpoisson/rent-a-bot/badges/master/coverage.svg
           :target: https://gitlab.com/cpoisson/rent-a-bot/commits/master
        
Keywords: Resource allocation application for automation
Platform: UNKNOWN
Classifier: Framework :: Flask
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: System Administrators
Classifier: Topic :: Utilities
Classifier: Operating System :: POSIX :: Linux
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
