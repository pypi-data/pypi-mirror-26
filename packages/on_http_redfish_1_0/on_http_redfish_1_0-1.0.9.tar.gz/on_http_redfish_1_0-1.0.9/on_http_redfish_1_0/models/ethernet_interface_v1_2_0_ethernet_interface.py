# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EthernetInterfaceV120EthernetInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EthernetInterfaceV120EthernetInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'auto_neg': 'bool',
            'description': 'str',
            'fqdn': 'str',
            'full_duplex': 'bool',
            'host_name': 'str',
            'i_pv4_addresses': 'list[IPAddressesV100IPv4Address]',
            'i_pv6_address_policy_table': 'list[EthernetInterfaceV100IPv6AddressPolicyEntry]',
            'i_pv6_addresses': 'list[IPAddressesV100IPv6Address]',
            'i_pv6_default_gateway': 'str',
            'i_pv6_static_addresses': 'list[IPAddressesV100IPv6StaticAddress]',
            'id': 'str',
            'interface_enabled': 'bool',
            'link_status': 'EthernetInterfaceV110LinkStatus',
            'links': 'EthernetInterfaceV110Links',
            'mac_address': 'EthernetInterfaceV100MACAddress',
            'mtu_size': 'float',
            'max_i_pv6_static_addresses': 'float',
            'name': 'str',
            'name_servers': 'list[str]',
            'oem': 'ResourceOem',
            'permanent_mac_address': 'EthernetInterfaceV100MACAddress',
            'speed_mbps': 'float',
            'status': 'ResourceStatus',
            'uefi_device_path': 'str',
            'vlan': 'VLanNetworkInterfaceV100VLAN',
            'vla_ns': 'VLanNetworkInterfaceCollectionVLanNetworkInterfaceCollection'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'auto_neg': 'AutoNeg',
            'description': 'Description',
            'fqdn': 'FQDN',
            'full_duplex': 'FullDuplex',
            'host_name': 'HostName',
            'i_pv4_addresses': 'IPv4Addresses',
            'i_pv6_address_policy_table': 'IPv6AddressPolicyTable',
            'i_pv6_addresses': 'IPv6Addresses',
            'i_pv6_default_gateway': 'IPv6DefaultGateway',
            'i_pv6_static_addresses': 'IPv6StaticAddresses',
            'id': 'Id',
            'interface_enabled': 'InterfaceEnabled',
            'link_status': 'LinkStatus',
            'links': 'Links',
            'mac_address': 'MACAddress',
            'mtu_size': 'MTUSize',
            'max_i_pv6_static_addresses': 'MaxIPv6StaticAddresses',
            'name': 'Name',
            'name_servers': 'NameServers',
            'oem': 'Oem',
            'permanent_mac_address': 'PermanentMACAddress',
            'speed_mbps': 'SpeedMbps',
            'status': 'Status',
            'uefi_device_path': 'UefiDevicePath',
            'vlan': 'VLAN',
            'vla_ns': 'VLANs'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._auto_neg = None
        self._description = None
        self._fqdn = None
        self._full_duplex = None
        self._host_name = None
        self._i_pv4_addresses = None
        self._i_pv6_address_policy_table = None
        self._i_pv6_addresses = None
        self._i_pv6_default_gateway = None
        self._i_pv6_static_addresses = None
        self._id = None
        self._interface_enabled = None
        self._link_status = None
        self._links = None
        self._mac_address = None
        self._mtu_size = None
        self._max_i_pv6_static_addresses = None
        self._name = None
        self._name_servers = None
        self._oem = None
        self._permanent_mac_address = None
        self._speed_mbps = None
        self._status = None
        self._uefi_device_path = None
        self._vlan = None
        self._vla_ns = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this EthernetInterfaceV120EthernetInterface.


        :return: The odata_context of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this EthernetInterfaceV120EthernetInterface.


        :param odata_context: The odata_context of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this EthernetInterfaceV120EthernetInterface.


        :return: The odata_id of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this EthernetInterfaceV120EthernetInterface.


        :param odata_id: The odata_id of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this EthernetInterfaceV120EthernetInterface.


        :return: The odata_type of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this EthernetInterfaceV120EthernetInterface.


        :param odata_type: The odata_type of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def auto_neg(self):
        """
        Gets the auto_neg of this EthernetInterfaceV120EthernetInterface.
        This indicates if the speed and duplex are automatically negotiated and configured on this interface.

        :return: The auto_neg of this EthernetInterfaceV120EthernetInterface.
        :rtype: bool
        """
        return self._auto_neg

    @auto_neg.setter
    def auto_neg(self, auto_neg):
        """
        Sets the auto_neg of this EthernetInterfaceV120EthernetInterface.
        This indicates if the speed and duplex are automatically negotiated and configured on this interface.

        :param auto_neg: The auto_neg of this EthernetInterfaceV120EthernetInterface.
        :type: bool
        """
        self._auto_neg = auto_neg

    @property
    def description(self):
        """
        Gets the description of this EthernetInterfaceV120EthernetInterface.
        Uniquely identifies the resource within the collection of like resources.

        :return: The description of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EthernetInterfaceV120EthernetInterface.
        Uniquely identifies the resource within the collection of like resources.

        :param description: The description of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._description = description

    @property
    def fqdn(self):
        """
        Gets the fqdn of this EthernetInterfaceV120EthernetInterface.
        This is the complete, fully qualified domain name obtained by DNS for this interface.

        :return: The fqdn of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """
        Sets the fqdn of this EthernetInterfaceV120EthernetInterface.
        This is the complete, fully qualified domain name obtained by DNS for this interface.

        :param fqdn: The fqdn of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._fqdn = fqdn

    @property
    def full_duplex(self):
        """
        Gets the full_duplex of this EthernetInterfaceV120EthernetInterface.
        This indicates if the interface is in Full Duplex mode or not.

        :return: The full_duplex of this EthernetInterfaceV120EthernetInterface.
        :rtype: bool
        """
        return self._full_duplex

    @full_duplex.setter
    def full_duplex(self, full_duplex):
        """
        Sets the full_duplex of this EthernetInterfaceV120EthernetInterface.
        This indicates if the interface is in Full Duplex mode or not.

        :param full_duplex: The full_duplex of this EthernetInterfaceV120EthernetInterface.
        :type: bool
        """
        self._full_duplex = full_duplex

    @property
    def host_name(self):
        """
        Gets the host_name of this EthernetInterfaceV120EthernetInterface.
        The DNS Host Name, without any domain information.

        :return: The host_name of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this EthernetInterfaceV120EthernetInterface.
        The DNS Host Name, without any domain information.

        :param host_name: The host_name of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._host_name = host_name

    @property
    def i_pv4_addresses(self):
        """
        Gets the i_pv4_addresses of this EthernetInterfaceV120EthernetInterface.
        The IPv4 addresses assigned to this interface.

        :return: The i_pv4_addresses of this EthernetInterfaceV120EthernetInterface.
        :rtype: list[IPAddressesV100IPv4Address]
        """
        return self._i_pv4_addresses

    @i_pv4_addresses.setter
    def i_pv4_addresses(self, i_pv4_addresses):
        """
        Sets the i_pv4_addresses of this EthernetInterfaceV120EthernetInterface.
        The IPv4 addresses assigned to this interface.

        :param i_pv4_addresses: The i_pv4_addresses of this EthernetInterfaceV120EthernetInterface.
        :type: list[IPAddressesV100IPv4Address]
        """
        self._i_pv4_addresses = i_pv4_addresses

    @property
    def i_pv6_address_policy_table(self):
        """
        Gets the i_pv6_address_policy_table of this EthernetInterfaceV120EthernetInterface.
        An array representing the RFC 6724 Address Selection Policy Table.

        :return: The i_pv6_address_policy_table of this EthernetInterfaceV120EthernetInterface.
        :rtype: list[EthernetInterfaceV100IPv6AddressPolicyEntry]
        """
        return self._i_pv6_address_policy_table

    @i_pv6_address_policy_table.setter
    def i_pv6_address_policy_table(self, i_pv6_address_policy_table):
        """
        Sets the i_pv6_address_policy_table of this EthernetInterfaceV120EthernetInterface.
        An array representing the RFC 6724 Address Selection Policy Table.

        :param i_pv6_address_policy_table: The i_pv6_address_policy_table of this EthernetInterfaceV120EthernetInterface.
        :type: list[EthernetInterfaceV100IPv6AddressPolicyEntry]
        """
        self._i_pv6_address_policy_table = i_pv6_address_policy_table

    @property
    def i_pv6_addresses(self):
        """
        Gets the i_pv6_addresses of this EthernetInterfaceV120EthernetInterface.
        This array of objects enumerates all of the currently assigned IPv6 addresses on this interface.

        :return: The i_pv6_addresses of this EthernetInterfaceV120EthernetInterface.
        :rtype: list[IPAddressesV100IPv6Address]
        """
        return self._i_pv6_addresses

    @i_pv6_addresses.setter
    def i_pv6_addresses(self, i_pv6_addresses):
        """
        Sets the i_pv6_addresses of this EthernetInterfaceV120EthernetInterface.
        This array of objects enumerates all of the currently assigned IPv6 addresses on this interface.

        :param i_pv6_addresses: The i_pv6_addresses of this EthernetInterfaceV120EthernetInterface.
        :type: list[IPAddressesV100IPv6Address]
        """
        self._i_pv6_addresses = i_pv6_addresses

    @property
    def i_pv6_default_gateway(self):
        """
        Gets the i_pv6_default_gateway of this EthernetInterfaceV120EthernetInterface.
        This is the IPv6 default gateway address that is currently in use on this interface.

        :return: The i_pv6_default_gateway of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._i_pv6_default_gateway

    @i_pv6_default_gateway.setter
    def i_pv6_default_gateway(self, i_pv6_default_gateway):
        """
        Sets the i_pv6_default_gateway of this EthernetInterfaceV120EthernetInterface.
        This is the IPv6 default gateway address that is currently in use on this interface.

        :param i_pv6_default_gateway: The i_pv6_default_gateway of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._i_pv6_default_gateway = i_pv6_default_gateway

    @property
    def i_pv6_static_addresses(self):
        """
        Gets the i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        This array of objects represents all of the IPv6 static addresses to be assigned on this interface.

        :return: The i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        :rtype: list[IPAddressesV100IPv6StaticAddress]
        """
        return self._i_pv6_static_addresses

    @i_pv6_static_addresses.setter
    def i_pv6_static_addresses(self, i_pv6_static_addresses):
        """
        Sets the i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        This array of objects represents all of the IPv6 static addresses to be assigned on this interface.

        :param i_pv6_static_addresses: The i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        :type: list[IPAddressesV100IPv6StaticAddress]
        """
        self._i_pv6_static_addresses = i_pv6_static_addresses

    @property
    def id(self):
        """
        Gets the id of this EthernetInterfaceV120EthernetInterface.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EthernetInterfaceV120EthernetInterface.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._id = id

    @property
    def interface_enabled(self):
        """
        Gets the interface_enabled of this EthernetInterfaceV120EthernetInterface.
        This indicates whether this interface is enabled.

        :return: The interface_enabled of this EthernetInterfaceV120EthernetInterface.
        :rtype: bool
        """
        return self._interface_enabled

    @interface_enabled.setter
    def interface_enabled(self, interface_enabled):
        """
        Sets the interface_enabled of this EthernetInterfaceV120EthernetInterface.
        This indicates whether this interface is enabled.

        :param interface_enabled: The interface_enabled of this EthernetInterfaceV120EthernetInterface.
        :type: bool
        """
        self._interface_enabled = interface_enabled

    @property
    def link_status(self):
        """
        Gets the link_status of this EthernetInterfaceV120EthernetInterface.
        The link status of this interface (port).

        :return: The link_status of this EthernetInterfaceV120EthernetInterface.
        :rtype: EthernetInterfaceV110LinkStatus
        """
        return self._link_status

    @link_status.setter
    def link_status(self, link_status):
        """
        Sets the link_status of this EthernetInterfaceV120EthernetInterface.
        The link status of this interface (port).

        :param link_status: The link_status of this EthernetInterfaceV120EthernetInterface.
        :type: EthernetInterfaceV110LinkStatus
        """
        self._link_status = link_status

    @property
    def links(self):
        """
        Gets the links of this EthernetInterfaceV120EthernetInterface.
        Contains references to other resources that are related to this resource.

        :return: The links of this EthernetInterfaceV120EthernetInterface.
        :rtype: EthernetInterfaceV110Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this EthernetInterfaceV120EthernetInterface.
        Contains references to other resources that are related to this resource.

        :param links: The links of this EthernetInterfaceV120EthernetInterface.
        :type: EthernetInterfaceV110Links
        """
        self._links = links

    @property
    def mac_address(self):
        """
        Gets the mac_address of this EthernetInterfaceV120EthernetInterface.
        This is the currently configured MAC address of the (logical port) interface.

        :return: The mac_address of this EthernetInterfaceV120EthernetInterface.
        :rtype: EthernetInterfaceV100MACAddress
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this EthernetInterfaceV120EthernetInterface.
        This is the currently configured MAC address of the (logical port) interface.

        :param mac_address: The mac_address of this EthernetInterfaceV120EthernetInterface.
        :type: EthernetInterfaceV100MACAddress
        """
        self._mac_address = mac_address

    @property
    def mtu_size(self):
        """
        Gets the mtu_size of this EthernetInterfaceV120EthernetInterface.
        This is the currently configured Maximum Transmission Unit (MTU) in bytes on this interface.

        :return: The mtu_size of this EthernetInterfaceV120EthernetInterface.
        :rtype: float
        """
        return self._mtu_size

    @mtu_size.setter
    def mtu_size(self, mtu_size):
        """
        Sets the mtu_size of this EthernetInterfaceV120EthernetInterface.
        This is the currently configured Maximum Transmission Unit (MTU) in bytes on this interface.

        :param mtu_size: The mtu_size of this EthernetInterfaceV120EthernetInterface.
        :type: float
        """
        self._mtu_size = mtu_size

    @property
    def max_i_pv6_static_addresses(self):
        """
        Gets the max_i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        This indicates the maximum number of Static IPv6 addresses that can be configured on this interface.

        :return: The max_i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        :rtype: float
        """
        return self._max_i_pv6_static_addresses

    @max_i_pv6_static_addresses.setter
    def max_i_pv6_static_addresses(self, max_i_pv6_static_addresses):
        """
        Sets the max_i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        This indicates the maximum number of Static IPv6 addresses that can be configured on this interface.

        :param max_i_pv6_static_addresses: The max_i_pv6_static_addresses of this EthernetInterfaceV120EthernetInterface.
        :type: float
        """
        self._max_i_pv6_static_addresses = max_i_pv6_static_addresses

    @property
    def name(self):
        """
        Gets the name of this EthernetInterfaceV120EthernetInterface.
        The name of the resource or array element.

        :return: The name of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EthernetInterfaceV120EthernetInterface.
        The name of the resource or array element.

        :param name: The name of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._name = name

    @property
    def name_servers(self):
        """
        Gets the name_servers of this EthernetInterfaceV120EthernetInterface.
        This represents DNS name servers that are currently in use on this interface.

        :return: The name_servers of this EthernetInterfaceV120EthernetInterface.
        :rtype: list[str]
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """
        Sets the name_servers of this EthernetInterfaceV120EthernetInterface.
        This represents DNS name servers that are currently in use on this interface.

        :param name_servers: The name_servers of this EthernetInterfaceV120EthernetInterface.
        :type: list[str]
        """
        self._name_servers = name_servers

    @property
    def oem(self):
        """
        Gets the oem of this EthernetInterfaceV120EthernetInterface.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this EthernetInterfaceV120EthernetInterface.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this EthernetInterfaceV120EthernetInterface.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this EthernetInterfaceV120EthernetInterface.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def permanent_mac_address(self):
        """
        Gets the permanent_mac_address of this EthernetInterfaceV120EthernetInterface.
        This is the permanent MAC address assigned to this interface (port).

        :return: The permanent_mac_address of this EthernetInterfaceV120EthernetInterface.
        :rtype: EthernetInterfaceV100MACAddress
        """
        return self._permanent_mac_address

    @permanent_mac_address.setter
    def permanent_mac_address(self, permanent_mac_address):
        """
        Sets the permanent_mac_address of this EthernetInterfaceV120EthernetInterface.
        This is the permanent MAC address assigned to this interface (port).

        :param permanent_mac_address: The permanent_mac_address of this EthernetInterfaceV120EthernetInterface.
        :type: EthernetInterfaceV100MACAddress
        """
        self._permanent_mac_address = permanent_mac_address

    @property
    def speed_mbps(self):
        """
        Gets the speed_mbps of this EthernetInterfaceV120EthernetInterface.
        This is the current speed in Mbps of this interface.

        :return: The speed_mbps of this EthernetInterfaceV120EthernetInterface.
        :rtype: float
        """
        return self._speed_mbps

    @speed_mbps.setter
    def speed_mbps(self, speed_mbps):
        """
        Sets the speed_mbps of this EthernetInterfaceV120EthernetInterface.
        This is the current speed in Mbps of this interface.

        :param speed_mbps: The speed_mbps of this EthernetInterfaceV120EthernetInterface.
        :type: float
        """
        self._speed_mbps = speed_mbps

    @property
    def status(self):
        """
        Gets the status of this EthernetInterfaceV120EthernetInterface.


        :return: The status of this EthernetInterfaceV120EthernetInterface.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this EthernetInterfaceV120EthernetInterface.


        :param status: The status of this EthernetInterfaceV120EthernetInterface.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def uefi_device_path(self):
        """
        Gets the uefi_device_path of this EthernetInterfaceV120EthernetInterface.
        The UEFI device path for this interface.

        :return: The uefi_device_path of this EthernetInterfaceV120EthernetInterface.
        :rtype: str
        """
        return self._uefi_device_path

    @uefi_device_path.setter
    def uefi_device_path(self, uefi_device_path):
        """
        Sets the uefi_device_path of this EthernetInterfaceV120EthernetInterface.
        The UEFI device path for this interface.

        :param uefi_device_path: The uefi_device_path of this EthernetInterfaceV120EthernetInterface.
        :type: str
        """
        self._uefi_device_path = uefi_device_path

    @property
    def vlan(self):
        """
        Gets the vlan of this EthernetInterfaceV120EthernetInterface.
        If this Network Interface supports more than one VLAN, this property will not be present and the client should look for VLANs collection in the link section of this resource.

        :return: The vlan of this EthernetInterfaceV120EthernetInterface.
        :rtype: VLanNetworkInterfaceV100VLAN
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan):
        """
        Sets the vlan of this EthernetInterfaceV120EthernetInterface.
        If this Network Interface supports more than one VLAN, this property will not be present and the client should look for VLANs collection in the link section of this resource.

        :param vlan: The vlan of this EthernetInterfaceV120EthernetInterface.
        :type: VLanNetworkInterfaceV100VLAN
        """
        self._vlan = vlan

    @property
    def vla_ns(self):
        """
        Gets the vla_ns of this EthernetInterfaceV120EthernetInterface.
        This is a reference to a collection of VLANs and is only used if the interface supports more than one VLANs.

        :return: The vla_ns of this EthernetInterfaceV120EthernetInterface.
        :rtype: VLanNetworkInterfaceCollectionVLanNetworkInterfaceCollection
        """
        return self._vla_ns

    @vla_ns.setter
    def vla_ns(self, vla_ns):
        """
        Sets the vla_ns of this EthernetInterfaceV120EthernetInterface.
        This is a reference to a collection of VLANs and is only used if the interface supports more than one VLANs.

        :param vla_ns: The vla_ns of this EthernetInterfaceV120EthernetInterface.
        :type: VLanNetworkInterfaceCollectionVLanNetworkInterfaceCollection
        """
        self._vla_ns = vla_ns

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

