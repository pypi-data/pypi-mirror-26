# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Message100Message(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Message100Message - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'message': 'str',
            'message_args': 'list[str]',
            'message_id': 'str',
            'oem': 'ResourceOem',
            'related_properties': 'list[str]',
            'resolution': 'str',
            'severity': 'str'
        }

        self.attribute_map = {
            'message': 'Message',
            'message_args': 'MessageArgs',
            'message_id': 'MessageId',
            'oem': 'Oem',
            'related_properties': 'RelatedProperties',
            'resolution': 'Resolution',
            'severity': 'Severity'
        }

        self._message = None
        self._message_args = None
        self._message_id = None
        self._oem = None
        self._related_properties = None
        self._resolution = None
        self._severity = None

    @property
    def message(self):
        """
        Gets the message of this Message100Message.
        This is the human readable message, if provided.

        :return: The message of this Message100Message.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Message100Message.
        This is the human readable message, if provided.

        :param message: The message of this Message100Message.
        :type: str
        """
        self._message = message

    @property
    def message_args(self):
        """
        Gets the message_args of this Message100Message.
        This array of message arguments are substituted for the arguments in the message when looked up in the message registry.

        :return: The message_args of this Message100Message.
        :rtype: list[str]
        """
        return self._message_args

    @message_args.setter
    def message_args(self, message_args):
        """
        Sets the message_args of this Message100Message.
        This array of message arguments are substituted for the arguments in the message when looked up in the message registry.

        :param message_args: The message_args of this Message100Message.
        :type: list[str]
        """
        self._message_args = message_args

    @property
    def message_id(self):
        """
        Gets the message_id of this Message100Message.
        This is the key for this message which can be used to look up the message in a message registry.

        :return: The message_id of this Message100Message.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this Message100Message.
        This is the key for this message which can be used to look up the message in a message registry.

        :param message_id: The message_id of this Message100Message.
        :type: str
        """
        self._message_id = message_id

    @property
    def oem(self):
        """
        Gets the oem of this Message100Message.
        Oem extension object.

        :return: The oem of this Message100Message.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Message100Message.
        Oem extension object.

        :param oem: The oem of this Message100Message.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def related_properties(self):
        """
        Gets the related_properties of this Message100Message.
        This is an array of properties described by the message.

        :return: The related_properties of this Message100Message.
        :rtype: list[str]
        """
        return self._related_properties

    @related_properties.setter
    def related_properties(self, related_properties):
        """
        Sets the related_properties of this Message100Message.
        This is an array of properties described by the message.

        :param related_properties: The related_properties of this Message100Message.
        :type: list[str]
        """
        self._related_properties = related_properties

    @property
    def resolution(self):
        """
        Gets the resolution of this Message100Message.
        Used to provide suggestions on how to resolve the situation that caused the error.

        :return: The resolution of this Message100Message.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """
        Sets the resolution of this Message100Message.
        Used to provide suggestions on how to resolve the situation that caused the error.

        :param resolution: The resolution of this Message100Message.
        :type: str
        """
        self._resolution = resolution

    @property
    def severity(self):
        """
        Gets the severity of this Message100Message.
        This is the severity of the errors.

        :return: The severity of this Message100Message.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this Message100Message.
        This is the severity of the errors.

        :param severity: The severity of this Message100Message.
        :type: str
        """
        self._severity = severity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

