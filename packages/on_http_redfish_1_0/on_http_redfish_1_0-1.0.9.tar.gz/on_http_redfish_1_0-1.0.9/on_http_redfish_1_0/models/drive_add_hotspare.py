# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DriveAddHotspare(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DriveAddHotspare - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'username': 'str',
            'password': 'str',
            'hotspare_type': 'str',
            'volume_id': 'str'
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'hotspare_type': 'hotspareType',
            'volume_id': 'volumeId'
        }

        self._username = None
        self._password = None
        self._hotspare_type = None
        self._volume_id = None

    @property
    def username(self):
        """
        Gets the username of this DriveAddHotspare.


        :return: The username of this DriveAddHotspare.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this DriveAddHotspare.


        :param username: The username of this DriveAddHotspare.
        :type: str
        """
        self._username = username

    @property
    def password(self):
        """
        Gets the password of this DriveAddHotspare.


        :return: The password of this DriveAddHotspare.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this DriveAddHotspare.


        :param password: The password of this DriveAddHotspare.
        :type: str
        """
        self._password = password

    @property
    def hotspare_type(self):
        """
        Gets the hotspare_type of this DriveAddHotspare.


        :return: The hotspare_type of this DriveAddHotspare.
        :rtype: str
        """
        return self._hotspare_type

    @hotspare_type.setter
    def hotspare_type(self, hotspare_type):
        """
        Sets the hotspare_type of this DriveAddHotspare.


        :param hotspare_type: The hotspare_type of this DriveAddHotspare.
        :type: str
        """
        self._hotspare_type = hotspare_type

    @property
    def volume_id(self):
        """
        Gets the volume_id of this DriveAddHotspare.


        :return: The volume_id of this DriveAddHotspare.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """
        Sets the volume_id of this DriveAddHotspare.


        :param volume_id: The volume_id of this DriveAddHotspare.
        :type: str
        """
        self._volume_id = volume_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

