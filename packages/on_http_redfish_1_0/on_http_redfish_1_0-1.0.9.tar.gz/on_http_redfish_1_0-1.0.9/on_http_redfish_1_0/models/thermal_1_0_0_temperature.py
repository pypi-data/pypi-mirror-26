# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Thermal100Temperature(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Thermal100Temperature - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'lower_threshold_critical': 'float',
            'lower_threshold_fatal': 'float',
            'lower_threshold_non_critical': 'float',
            'max_reading_range_temp': 'float',
            'member_id': 'str',
            'min_reading_range_temp': 'float',
            'name': 'str',
            'oem': 'ResourceOem',
            'physical_context': 'str',
            'reading_celsius': 'float',
            'related_item': 'list[Odata400IdRef]',
            'related_itemodata_count': 'float',
            'related_itemodata_navigation_link': 'Odata400IdRef',
            'sensor_number': 'float',
            'status': 'ResourceStatus',
            'upper_threshold_critical': 'float',
            'upper_threshold_fatal': 'float',
            'upper_threshold_non_critical': 'float'
        }

        self.attribute_map = {
            'lower_threshold_critical': 'LowerThresholdCritical',
            'lower_threshold_fatal': 'LowerThresholdFatal',
            'lower_threshold_non_critical': 'LowerThresholdNonCritical',
            'max_reading_range_temp': 'MaxReadingRangeTemp',
            'member_id': 'MemberId',
            'min_reading_range_temp': 'MinReadingRangeTemp',
            'name': 'Name',
            'oem': 'Oem',
            'physical_context': 'PhysicalContext',
            'reading_celsius': 'ReadingCelsius',
            'related_item': 'RelatedItem',
            'related_itemodata_count': 'RelatedItem@odata.count',
            'related_itemodata_navigation_link': 'RelatedItem@odata.navigationLink',
            'sensor_number': 'SensorNumber',
            'status': 'Status',
            'upper_threshold_critical': 'UpperThresholdCritical',
            'upper_threshold_fatal': 'UpperThresholdFatal',
            'upper_threshold_non_critical': 'UpperThresholdNonCritical'
        }

        self._lower_threshold_critical = None
        self._lower_threshold_fatal = None
        self._lower_threshold_non_critical = None
        self._max_reading_range_temp = None
        self._member_id = None
        self._min_reading_range_temp = None
        self._name = None
        self._oem = None
        self._physical_context = None
        self._reading_celsius = None
        self._related_item = None
        self._related_itemodata_count = None
        self._related_itemodata_navigation_link = None
        self._sensor_number = None
        self._status = None
        self._upper_threshold_critical = None
        self._upper_threshold_fatal = None
        self._upper_threshold_non_critical = None

    @property
    def lower_threshold_critical(self):
        """
        Gets the lower_threshold_critical of this Thermal100Temperature.
        Below normal range but not yet fatal.

        :return: The lower_threshold_critical of this Thermal100Temperature.
        :rtype: float
        """
        return self._lower_threshold_critical

    @lower_threshold_critical.setter
    def lower_threshold_critical(self, lower_threshold_critical):
        """
        Sets the lower_threshold_critical of this Thermal100Temperature.
        Below normal range but not yet fatal.

        :param lower_threshold_critical: The lower_threshold_critical of this Thermal100Temperature.
        :type: float
        """
        self._lower_threshold_critical = lower_threshold_critical

    @property
    def lower_threshold_fatal(self):
        """
        Gets the lower_threshold_fatal of this Thermal100Temperature.
        Below normal range and is fatal

        :return: The lower_threshold_fatal of this Thermal100Temperature.
        :rtype: float
        """
        return self._lower_threshold_fatal

    @lower_threshold_fatal.setter
    def lower_threshold_fatal(self, lower_threshold_fatal):
        """
        Sets the lower_threshold_fatal of this Thermal100Temperature.
        Below normal range and is fatal

        :param lower_threshold_fatal: The lower_threshold_fatal of this Thermal100Temperature.
        :type: float
        """
        self._lower_threshold_fatal = lower_threshold_fatal

    @property
    def lower_threshold_non_critical(self):
        """
        Gets the lower_threshold_non_critical of this Thermal100Temperature.
        Below normal range

        :return: The lower_threshold_non_critical of this Thermal100Temperature.
        :rtype: float
        """
        return self._lower_threshold_non_critical

    @lower_threshold_non_critical.setter
    def lower_threshold_non_critical(self, lower_threshold_non_critical):
        """
        Sets the lower_threshold_non_critical of this Thermal100Temperature.
        Below normal range

        :param lower_threshold_non_critical: The lower_threshold_non_critical of this Thermal100Temperature.
        :type: float
        """
        self._lower_threshold_non_critical = lower_threshold_non_critical

    @property
    def max_reading_range_temp(self):
        """
        Gets the max_reading_range_temp of this Thermal100Temperature.
        Maximum value for ReadingCelsius

        :return: The max_reading_range_temp of this Thermal100Temperature.
        :rtype: float
        """
        return self._max_reading_range_temp

    @max_reading_range_temp.setter
    def max_reading_range_temp(self, max_reading_range_temp):
        """
        Sets the max_reading_range_temp of this Thermal100Temperature.
        Maximum value for ReadingCelsius

        :param max_reading_range_temp: The max_reading_range_temp of this Thermal100Temperature.
        :type: float
        """
        self._max_reading_range_temp = max_reading_range_temp

    @property
    def member_id(self):
        """
        Gets the member_id of this Thermal100Temperature.
        This is the identifier for the member within the collection.

        :return: The member_id of this Thermal100Temperature.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """
        Sets the member_id of this Thermal100Temperature.
        This is the identifier for the member within the collection.

        :param member_id: The member_id of this Thermal100Temperature.
        :type: str
        """
        self._member_id = member_id

    @property
    def min_reading_range_temp(self):
        """
        Gets the min_reading_range_temp of this Thermal100Temperature.
        Minimum value for ReadingCelsius

        :return: The min_reading_range_temp of this Thermal100Temperature.
        :rtype: float
        """
        return self._min_reading_range_temp

    @min_reading_range_temp.setter
    def min_reading_range_temp(self, min_reading_range_temp):
        """
        Sets the min_reading_range_temp of this Thermal100Temperature.
        Minimum value for ReadingCelsius

        :param min_reading_range_temp: The min_reading_range_temp of this Thermal100Temperature.
        :type: float
        """
        self._min_reading_range_temp = min_reading_range_temp

    @property
    def name(self):
        """
        Gets the name of this Thermal100Temperature.
        Temperature sensor name.

        :return: The name of this Thermal100Temperature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Thermal100Temperature.
        Temperature sensor name.

        :param name: The name of this Thermal100Temperature.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Thermal100Temperature.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Thermal100Temperature.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Thermal100Temperature.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Thermal100Temperature.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def physical_context(self):
        """
        Gets the physical_context of this Thermal100Temperature.
        Describes the area or device to which this temperature measurement applies.

        :return: The physical_context of this Thermal100Temperature.
        :rtype: str
        """
        return self._physical_context

    @physical_context.setter
    def physical_context(self, physical_context):
        """
        Sets the physical_context of this Thermal100Temperature.
        Describes the area or device to which this temperature measurement applies.

        :param physical_context: The physical_context of this Thermal100Temperature.
        :type: str
        """
        allowed_values = ["Room", "Intake", "Exhaust", "Front", "Back", "Upper", "Lower", "CPU", "GPU", "Backplane", "SystemBoard", "PowerSupply", "VoltageRegulator", "StorageDevice", "NetworkingDevice", "ComputeBay", "StorageBay", "NetworkBay", "ExpansionBay", "PowerSupplyBay"]
        if physical_context not in allowed_values:
            raise ValueError(
                "Invalid value for `physical_context`, must be one of {0}"
                .format(allowed_values)
            )
        self._physical_context = physical_context

    @property
    def reading_celsius(self):
        """
        Gets the reading_celsius of this Thermal100Temperature.
        Temperature

        :return: The reading_celsius of this Thermal100Temperature.
        :rtype: float
        """
        return self._reading_celsius

    @reading_celsius.setter
    def reading_celsius(self, reading_celsius):
        """
        Sets the reading_celsius of this Thermal100Temperature.
        Temperature

        :param reading_celsius: The reading_celsius of this Thermal100Temperature.
        :type: float
        """
        self._reading_celsius = reading_celsius

    @property
    def related_item(self):
        """
        Gets the related_item of this Thermal100Temperature.
        Describes the areas or devices to which this temperature measurement applies.

        :return: The related_item of this Thermal100Temperature.
        :rtype: list[Odata400IdRef]
        """
        return self._related_item

    @related_item.setter
    def related_item(self, related_item):
        """
        Sets the related_item of this Thermal100Temperature.
        Describes the areas or devices to which this temperature measurement applies.

        :param related_item: The related_item of this Thermal100Temperature.
        :type: list[Odata400IdRef]
        """
        self._related_item = related_item

    @property
    def related_itemodata_count(self):
        """
        Gets the related_itemodata_count of this Thermal100Temperature.


        :return: The related_itemodata_count of this Thermal100Temperature.
        :rtype: float
        """
        return self._related_itemodata_count

    @related_itemodata_count.setter
    def related_itemodata_count(self, related_itemodata_count):
        """
        Sets the related_itemodata_count of this Thermal100Temperature.


        :param related_itemodata_count: The related_itemodata_count of this Thermal100Temperature.
        :type: float
        """
        self._related_itemodata_count = related_itemodata_count

    @property
    def related_itemodata_navigation_link(self):
        """
        Gets the related_itemodata_navigation_link of this Thermal100Temperature.


        :return: The related_itemodata_navigation_link of this Thermal100Temperature.
        :rtype: Odata400IdRef
        """
        return self._related_itemodata_navigation_link

    @related_itemodata_navigation_link.setter
    def related_itemodata_navigation_link(self, related_itemodata_navigation_link):
        """
        Sets the related_itemodata_navigation_link of this Thermal100Temperature.


        :param related_itemodata_navigation_link: The related_itemodata_navigation_link of this Thermal100Temperature.
        :type: Odata400IdRef
        """
        self._related_itemodata_navigation_link = related_itemodata_navigation_link

    @property
    def sensor_number(self):
        """
        Gets the sensor_number of this Thermal100Temperature.
        A numerical identifier to represent the temperature sensor

        :return: The sensor_number of this Thermal100Temperature.
        :rtype: float
        """
        return self._sensor_number

    @sensor_number.setter
    def sensor_number(self, sensor_number):
        """
        Sets the sensor_number of this Thermal100Temperature.
        A numerical identifier to represent the temperature sensor

        :param sensor_number: The sensor_number of this Thermal100Temperature.
        :type: float
        """
        self._sensor_number = sensor_number

    @property
    def status(self):
        """
        Gets the status of this Thermal100Temperature.


        :return: The status of this Thermal100Temperature.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Thermal100Temperature.


        :param status: The status of this Thermal100Temperature.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def upper_threshold_critical(self):
        """
        Gets the upper_threshold_critical of this Thermal100Temperature.
        Above normal range but not yet fatal.

        :return: The upper_threshold_critical of this Thermal100Temperature.
        :rtype: float
        """
        return self._upper_threshold_critical

    @upper_threshold_critical.setter
    def upper_threshold_critical(self, upper_threshold_critical):
        """
        Sets the upper_threshold_critical of this Thermal100Temperature.
        Above normal range but not yet fatal.

        :param upper_threshold_critical: The upper_threshold_critical of this Thermal100Temperature.
        :type: float
        """
        self._upper_threshold_critical = upper_threshold_critical

    @property
    def upper_threshold_fatal(self):
        """
        Gets the upper_threshold_fatal of this Thermal100Temperature.
        Above normal range and is fatal

        :return: The upper_threshold_fatal of this Thermal100Temperature.
        :rtype: float
        """
        return self._upper_threshold_fatal

    @upper_threshold_fatal.setter
    def upper_threshold_fatal(self, upper_threshold_fatal):
        """
        Sets the upper_threshold_fatal of this Thermal100Temperature.
        Above normal range and is fatal

        :param upper_threshold_fatal: The upper_threshold_fatal of this Thermal100Temperature.
        :type: float
        """
        self._upper_threshold_fatal = upper_threshold_fatal

    @property
    def upper_threshold_non_critical(self):
        """
        Gets the upper_threshold_non_critical of this Thermal100Temperature.
        Above normal range

        :return: The upper_threshold_non_critical of this Thermal100Temperature.
        :rtype: float
        """
        return self._upper_threshold_non_critical

    @upper_threshold_non_critical.setter
    def upper_threshold_non_critical(self, upper_threshold_non_critical):
        """
        Sets the upper_threshold_non_critical of this Thermal100Temperature.
        Above normal range

        :param upper_threshold_non_critical: The upper_threshold_non_critical of this Thermal100Temperature.
        :type: float
        """
        self._upper_threshold_non_critical = upper_threshold_non_critical

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

