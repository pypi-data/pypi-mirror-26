# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EventService100EventService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventService100EventService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'actions': 'EventService100EventServiceActions',
            'delivery_retry_attempts': 'float',
            'delivery_retry_interval_seconds': 'float',
            'description': 'str',
            'event_types_for_subscription': 'list[str]',
            'id': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'service_enabled': 'bool',
            'status': 'ResourceStatus',
            'subscriptions': 'EventDestinationCollectionEventDestinationCollection'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'actions': 'Actions',
            'delivery_retry_attempts': 'DeliveryRetryAttempts',
            'delivery_retry_interval_seconds': 'DeliveryRetryIntervalSeconds',
            'description': 'Description',
            'event_types_for_subscription': 'EventTypesForSubscription',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem',
            'service_enabled': 'ServiceEnabled',
            'status': 'Status',
            'subscriptions': 'Subscriptions'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._actions = None
        self._delivery_retry_attempts = None
        self._delivery_retry_interval_seconds = None
        self._description = None
        self._event_types_for_subscription = None
        self._id = None
        self._name = None
        self._oem = None
        self._service_enabled = None
        self._status = None
        self._subscriptions = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this EventService100EventService.


        :return: The odata_context of this EventService100EventService.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this EventService100EventService.


        :param odata_context: The odata_context of this EventService100EventService.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this EventService100EventService.


        :return: The odata_id of this EventService100EventService.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this EventService100EventService.


        :param odata_id: The odata_id of this EventService100EventService.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this EventService100EventService.


        :return: The odata_type of this EventService100EventService.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this EventService100EventService.


        :param odata_type: The odata_type of this EventService100EventService.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def actions(self):
        """
        Gets the actions of this EventService100EventService.


        :return: The actions of this EventService100EventService.
        :rtype: EventService100EventServiceActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this EventService100EventService.


        :param actions: The actions of this EventService100EventService.
        :type: EventService100EventServiceActions
        """
        self._actions = actions

    @property
    def delivery_retry_attempts(self):
        """
        Gets the delivery_retry_attempts of this EventService100EventService.
        This is the number of attempts an event posting is retried before the subscription is terminated.

        :return: The delivery_retry_attempts of this EventService100EventService.
        :rtype: float
        """
        return self._delivery_retry_attempts

    @delivery_retry_attempts.setter
    def delivery_retry_attempts(self, delivery_retry_attempts):
        """
        Sets the delivery_retry_attempts of this EventService100EventService.
        This is the number of attempts an event posting is retried before the subscription is terminated.

        :param delivery_retry_attempts: The delivery_retry_attempts of this EventService100EventService.
        :type: float
        """
        self._delivery_retry_attempts = delivery_retry_attempts

    @property
    def delivery_retry_interval_seconds(self):
        """
        Gets the delivery_retry_interval_seconds of this EventService100EventService.
        This represents the number of seconds between retry attempts for sending any given Event

        :return: The delivery_retry_interval_seconds of this EventService100EventService.
        :rtype: float
        """
        return self._delivery_retry_interval_seconds

    @delivery_retry_interval_seconds.setter
    def delivery_retry_interval_seconds(self, delivery_retry_interval_seconds):
        """
        Sets the delivery_retry_interval_seconds of this EventService100EventService.
        This represents the number of seconds between retry attempts for sending any given Event

        :param delivery_retry_interval_seconds: The delivery_retry_interval_seconds of this EventService100EventService.
        :type: float
        """
        self._delivery_retry_interval_seconds = delivery_retry_interval_seconds

    @property
    def description(self):
        """
        Gets the description of this EventService100EventService.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this EventService100EventService.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EventService100EventService.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this EventService100EventService.
        :type: str
        """
        self._description = description

    @property
    def event_types_for_subscription(self):
        """
        Gets the event_types_for_subscription of this EventService100EventService.
        This is the types of Events that can be subscribed to.

        :return: The event_types_for_subscription of this EventService100EventService.
        :rtype: list[str]
        """
        return self._event_types_for_subscription

    @event_types_for_subscription.setter
    def event_types_for_subscription(self, event_types_for_subscription):
        """
        Sets the event_types_for_subscription of this EventService100EventService.
        This is the types of Events that can be subscribed to.

        :param event_types_for_subscription: The event_types_for_subscription of this EventService100EventService.
        :type: list[str]
        """
        self._event_types_for_subscription = event_types_for_subscription

    @property
    def id(self):
        """
        Gets the id of this EventService100EventService.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this EventService100EventService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EventService100EventService.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this EventService100EventService.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EventService100EventService.
        The name of the resource or array element.

        :return: The name of this EventService100EventService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EventService100EventService.
        The name of the resource or array element.

        :param name: The name of this EventService100EventService.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this EventService100EventService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this EventService100EventService.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this EventService100EventService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this EventService100EventService.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def service_enabled(self):
        """
        Gets the service_enabled of this EventService100EventService.
        This indicates whether this service is enabled.

        :return: The service_enabled of this EventService100EventService.
        :rtype: bool
        """
        return self._service_enabled

    @service_enabled.setter
    def service_enabled(self, service_enabled):
        """
        Sets the service_enabled of this EventService100EventService.
        This indicates whether this service is enabled.

        :param service_enabled: The service_enabled of this EventService100EventService.
        :type: bool
        """
        self._service_enabled = service_enabled

    @property
    def status(self):
        """
        Gets the status of this EventService100EventService.


        :return: The status of this EventService100EventService.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this EventService100EventService.


        :param status: The status of this EventService100EventService.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def subscriptions(self):
        """
        Gets the subscriptions of this EventService100EventService.
        This is a reference to a collection of Event Destination resources.

        :return: The subscriptions of this EventService100EventService.
        :rtype: EventDestinationCollectionEventDestinationCollection
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """
        Sets the subscriptions of this EventService100EventService.
        This is a reference to a collection of Event Destination resources.

        :param subscriptions: The subscriptions of this EventService100EventService.
        :type: EventDestinationCollectionEventDestinationCollection
        """
        self._subscriptions = subscriptions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

