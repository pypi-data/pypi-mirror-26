# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Processor100ProcessorId(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Processor100ProcessorId - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'effective_family': 'str',
            'effective_model': 'str',
            'identification_registers': 'str',
            'microcode_info': 'str',
            'step': 'str',
            'vendor_id': 'str'
        }

        self.attribute_map = {
            'effective_family': 'EffectiveFamily',
            'effective_model': 'EffectiveModel',
            'identification_registers': 'IdentificationRegisters',
            'microcode_info': 'MicrocodeInfo',
            'step': 'Step',
            'vendor_id': 'VendorId'
        }

        self._effective_family = None
        self._effective_model = None
        self._identification_registers = None
        self._microcode_info = None
        self._step = None
        self._vendor_id = None

    @property
    def effective_family(self):
        """
        Gets the effective_family of this Processor100ProcessorId.
        The effective Family for this processor

        :return: The effective_family of this Processor100ProcessorId.
        :rtype: str
        """
        return self._effective_family

    @effective_family.setter
    def effective_family(self, effective_family):
        """
        Sets the effective_family of this Processor100ProcessorId.
        The effective Family for this processor

        :param effective_family: The effective_family of this Processor100ProcessorId.
        :type: str
        """
        self._effective_family = effective_family

    @property
    def effective_model(self):
        """
        Gets the effective_model of this Processor100ProcessorId.
        The effective Model for this processor

        :return: The effective_model of this Processor100ProcessorId.
        :rtype: str
        """
        return self._effective_model

    @effective_model.setter
    def effective_model(self, effective_model):
        """
        Sets the effective_model of this Processor100ProcessorId.
        The effective Model for this processor

        :param effective_model: The effective_model of this Processor100ProcessorId.
        :type: str
        """
        self._effective_model = effective_model

    @property
    def identification_registers(self):
        """
        Gets the identification_registers of this Processor100ProcessorId.
        The contents of the Identification Registers (CPUID) for this processor

        :return: The identification_registers of this Processor100ProcessorId.
        :rtype: str
        """
        return self._identification_registers

    @identification_registers.setter
    def identification_registers(self, identification_registers):
        """
        Sets the identification_registers of this Processor100ProcessorId.
        The contents of the Identification Registers (CPUID) for this processor

        :param identification_registers: The identification_registers of this Processor100ProcessorId.
        :type: str
        """
        self._identification_registers = identification_registers

    @property
    def microcode_info(self):
        """
        Gets the microcode_info of this Processor100ProcessorId.
        The Microcode Information for this processor

        :return: The microcode_info of this Processor100ProcessorId.
        :rtype: str
        """
        return self._microcode_info

    @microcode_info.setter
    def microcode_info(self, microcode_info):
        """
        Sets the microcode_info of this Processor100ProcessorId.
        The Microcode Information for this processor

        :param microcode_info: The microcode_info of this Processor100ProcessorId.
        :type: str
        """
        self._microcode_info = microcode_info

    @property
    def step(self):
        """
        Gets the step of this Processor100ProcessorId.
        The Step value for this processor

        :return: The step of this Processor100ProcessorId.
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """
        Sets the step of this Processor100ProcessorId.
        The Step value for this processor

        :param step: The step of this Processor100ProcessorId.
        :type: str
        """
        self._step = step

    @property
    def vendor_id(self):
        """
        Gets the vendor_id of this Processor100ProcessorId.
        The Vendor Identification for this processor

        :return: The vendor_id of this Processor100ProcessorId.
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """
        Sets the vendor_id of this Processor100ProcessorId.
        The Vendor Identification for this processor

        :param vendor_id: The vendor_id of this Processor100ProcessorId.
        :type: str
        """
        self._vendor_id = vendor_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

