# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LogService100LogService(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LogService100LogService - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'actions': 'LogService100LogServiceActions',
            'date_time': 'datetime',
            'date_time_local_offset': 'str',
            'description': 'str',
            'entries': 'LogEntryCollectionLogEntryCollection',
            'id': 'str',
            'max_number_of_records': 'float',
            'name': 'str',
            'oem': 'ResourceOem',
            'over_write_policy': 'str',
            'service_enabled': 'bool',
            'status': 'ResourceStatus'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'actions': 'Actions',
            'date_time': 'DateTime',
            'date_time_local_offset': 'DateTimeLocalOffset',
            'description': 'Description',
            'entries': 'Entries',
            'id': 'Id',
            'max_number_of_records': 'MaxNumberOfRecords',
            'name': 'Name',
            'oem': 'Oem',
            'over_write_policy': 'OverWritePolicy',
            'service_enabled': 'ServiceEnabled',
            'status': 'Status'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._actions = None
        self._date_time = None
        self._date_time_local_offset = None
        self._description = None
        self._entries = None
        self._id = None
        self._max_number_of_records = None
        self._name = None
        self._oem = None
        self._over_write_policy = None
        self._service_enabled = None
        self._status = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this LogService100LogService.


        :return: The odata_context of this LogService100LogService.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this LogService100LogService.


        :param odata_context: The odata_context of this LogService100LogService.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this LogService100LogService.


        :return: The odata_id of this LogService100LogService.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this LogService100LogService.


        :param odata_id: The odata_id of this LogService100LogService.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this LogService100LogService.


        :return: The odata_type of this LogService100LogService.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this LogService100LogService.


        :param odata_type: The odata_type of this LogService100LogService.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def actions(self):
        """
        Gets the actions of this LogService100LogService.


        :return: The actions of this LogService100LogService.
        :rtype: LogService100LogServiceActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this LogService100LogService.


        :param actions: The actions of this LogService100LogService.
        :type: LogService100LogServiceActions
        """
        self._actions = actions

    @property
    def date_time(self):
        """
        Gets the date_time of this LogService100LogService.
        The current DateTime (with offset) for the log service, used to set or read time.

        :return: The date_time of this LogService100LogService.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """
        Sets the date_time of this LogService100LogService.
        The current DateTime (with offset) for the log service, used to set or read time.

        :param date_time: The date_time of this LogService100LogService.
        :type: datetime
        """
        self._date_time = date_time

    @property
    def date_time_local_offset(self):
        """
        Gets the date_time_local_offset of this LogService100LogService.
        The time offset from UTC that the DateTime property is set to in format: +06:00 .

        :return: The date_time_local_offset of this LogService100LogService.
        :rtype: str
        """
        return self._date_time_local_offset

    @date_time_local_offset.setter
    def date_time_local_offset(self, date_time_local_offset):
        """
        Sets the date_time_local_offset of this LogService100LogService.
        The time offset from UTC that the DateTime property is set to in format: +06:00 .

        :param date_time_local_offset: The date_time_local_offset of this LogService100LogService.
        :type: str
        """
        self._date_time_local_offset = date_time_local_offset

    @property
    def description(self):
        """
        Gets the description of this LogService100LogService.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this LogService100LogService.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LogService100LogService.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this LogService100LogService.
        :type: str
        """
        self._description = description

    @property
    def entries(self):
        """
        Gets the entries of this LogService100LogService.
        References to the log entry collection.

        :return: The entries of this LogService100LogService.
        :rtype: LogEntryCollectionLogEntryCollection
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """
        Sets the entries of this LogService100LogService.
        References to the log entry collection.

        :param entries: The entries of this LogService100LogService.
        :type: LogEntryCollectionLogEntryCollection
        """
        self._entries = entries

    @property
    def id(self):
        """
        Gets the id of this LogService100LogService.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this LogService100LogService.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LogService100LogService.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this LogService100LogService.
        :type: str
        """
        self._id = id

    @property
    def max_number_of_records(self):
        """
        Gets the max_number_of_records of this LogService100LogService.
        The maximum number of log entries this service can have.

        :return: The max_number_of_records of this LogService100LogService.
        :rtype: float
        """
        return self._max_number_of_records

    @max_number_of_records.setter
    def max_number_of_records(self, max_number_of_records):
        """
        Sets the max_number_of_records of this LogService100LogService.
        The maximum number of log entries this service can have.

        :param max_number_of_records: The max_number_of_records of this LogService100LogService.
        :type: float
        """
        self._max_number_of_records = max_number_of_records

    @property
    def name(self):
        """
        Gets the name of this LogService100LogService.
        The name of the resource or array element.

        :return: The name of this LogService100LogService.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LogService100LogService.
        The name of the resource or array element.

        :param name: The name of this LogService100LogService.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this LogService100LogService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this LogService100LogService.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this LogService100LogService.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this LogService100LogService.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def over_write_policy(self):
        """
        Gets the over_write_policy of this LogService100LogService.
        The overwrite policy for this service that takes place when the log is full.

        :return: The over_write_policy of this LogService100LogService.
        :rtype: str
        """
        return self._over_write_policy

    @over_write_policy.setter
    def over_write_policy(self, over_write_policy):
        """
        Sets the over_write_policy of this LogService100LogService.
        The overwrite policy for this service that takes place when the log is full.

        :param over_write_policy: The over_write_policy of this LogService100LogService.
        :type: str
        """
        allowed_values = ["Unknown", "WrapsWhenFull", "NeverOverWrites"]
        if over_write_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `over_write_policy`, must be one of {0}"
                .format(allowed_values)
            )
        self._over_write_policy = over_write_policy

    @property
    def service_enabled(self):
        """
        Gets the service_enabled of this LogService100LogService.
        This indicates whether this service is enabled.

        :return: The service_enabled of this LogService100LogService.
        :rtype: bool
        """
        return self._service_enabled

    @service_enabled.setter
    def service_enabled(self, service_enabled):
        """
        Sets the service_enabled of this LogService100LogService.
        This indicates whether this service is enabled.

        :param service_enabled: The service_enabled of this LogService100LogService.
        :type: bool
        """
        self._service_enabled = service_enabled

    @property
    def status(self):
        """
        Gets the status of this LogService100LogService.


        :return: The status of this LogService100LogService.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LogService100LogService.


        :param status: The status of this LogService100LogService.
        :type: ResourceStatus
        """
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

