# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SoftwareInventoryV110SoftwareInventory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SoftwareInventoryV110SoftwareInventory - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'description': 'str',
            'id': 'str',
            'lowest_supported_version': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'related_item': 'list[Odata400IdRef]',
            'related_itemodata_count': 'float',
            'related_itemodata_navigation_link': 'Odata400IdRef',
            'software_id': 'str',
            'status': 'ResourceStatus',
            'uefi_device_paths': 'list[str]',
            'updateable': 'bool',
            'version': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'id': 'Id',
            'lowest_supported_version': 'LowestSupportedVersion',
            'name': 'Name',
            'oem': 'Oem',
            'related_item': 'RelatedItem',
            'related_itemodata_count': 'RelatedItem@odata.count',
            'related_itemodata_navigation_link': 'RelatedItem@odata.navigationLink',
            'software_id': 'SoftwareId',
            'status': 'Status',
            'uefi_device_paths': 'UefiDevicePaths',
            'updateable': 'Updateable',
            'version': 'Version'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._id = None
        self._lowest_supported_version = None
        self._name = None
        self._oem = None
        self._related_item = None
        self._related_itemodata_count = None
        self._related_itemodata_navigation_link = None
        self._software_id = None
        self._status = None
        self._uefi_device_paths = None
        self._updateable = None
        self._version = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this SoftwareInventoryV110SoftwareInventory.


        :return: The odata_context of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this SoftwareInventoryV110SoftwareInventory.


        :param odata_context: The odata_context of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this SoftwareInventoryV110SoftwareInventory.


        :return: The odata_id of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this SoftwareInventoryV110SoftwareInventory.


        :param odata_id: The odata_id of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this SoftwareInventoryV110SoftwareInventory.


        :return: The odata_type of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this SoftwareInventoryV110SoftwareInventory.


        :param odata_type: The odata_type of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this SoftwareInventoryV110SoftwareInventory.
        Provides a description of this resource and is used for commonality in the schema definitions.

        :return: The description of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SoftwareInventoryV110SoftwareInventory.
        Provides a description of this resource and is used for commonality in the schema definitions.

        :param description: The description of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this SoftwareInventoryV110SoftwareInventory.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SoftwareInventoryV110SoftwareInventory.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._id = id

    @property
    def lowest_supported_version(self):
        """
        Gets the lowest_supported_version of this SoftwareInventoryV110SoftwareInventory.
        A string representing the lowest supported version of this software.

        :return: The lowest_supported_version of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._lowest_supported_version

    @lowest_supported_version.setter
    def lowest_supported_version(self, lowest_supported_version):
        """
        Sets the lowest_supported_version of this SoftwareInventoryV110SoftwareInventory.
        A string representing the lowest supported version of this software.

        :param lowest_supported_version: The lowest_supported_version of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._lowest_supported_version = lowest_supported_version

    @property
    def name(self):
        """
        Gets the name of this SoftwareInventoryV110SoftwareInventory.
        The name of the resource or array element.

        :return: The name of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SoftwareInventoryV110SoftwareInventory.
        The name of the resource or array element.

        :param name: The name of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this SoftwareInventoryV110SoftwareInventory.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this SoftwareInventoryV110SoftwareInventory.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this SoftwareInventoryV110SoftwareInventory.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this SoftwareInventoryV110SoftwareInventory.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def related_item(self):
        """
        Gets the related_item of this SoftwareInventoryV110SoftwareInventory.
        The ID(s) of the resources associated with this software inventory

        :return: The related_item of this SoftwareInventoryV110SoftwareInventory.
        :rtype: list[Odata400IdRef]
        """
        return self._related_item

    @related_item.setter
    def related_item(self, related_item):
        """
        Sets the related_item of this SoftwareInventoryV110SoftwareInventory.
        The ID(s) of the resources associated with this software inventory

        :param related_item: The related_item of this SoftwareInventoryV110SoftwareInventory.
        :type: list[Odata400IdRef]
        """
        self._related_item = related_item

    @property
    def related_itemodata_count(self):
        """
        Gets the related_itemodata_count of this SoftwareInventoryV110SoftwareInventory.


        :return: The related_itemodata_count of this SoftwareInventoryV110SoftwareInventory.
        :rtype: float
        """
        return self._related_itemodata_count

    @related_itemodata_count.setter
    def related_itemodata_count(self, related_itemodata_count):
        """
        Sets the related_itemodata_count of this SoftwareInventoryV110SoftwareInventory.


        :param related_itemodata_count: The related_itemodata_count of this SoftwareInventoryV110SoftwareInventory.
        :type: float
        """
        self._related_itemodata_count = related_itemodata_count

    @property
    def related_itemodata_navigation_link(self):
        """
        Gets the related_itemodata_navigation_link of this SoftwareInventoryV110SoftwareInventory.


        :return: The related_itemodata_navigation_link of this SoftwareInventoryV110SoftwareInventory.
        :rtype: Odata400IdRef
        """
        return self._related_itemodata_navigation_link

    @related_itemodata_navigation_link.setter
    def related_itemodata_navigation_link(self, related_itemodata_navigation_link):
        """
        Sets the related_itemodata_navigation_link of this SoftwareInventoryV110SoftwareInventory.


        :param related_itemodata_navigation_link: The related_itemodata_navigation_link of this SoftwareInventoryV110SoftwareInventory.
        :type: Odata400IdRef
        """
        self._related_itemodata_navigation_link = related_itemodata_navigation_link

    @property
    def software_id(self):
        """
        Gets the software_id of this SoftwareInventoryV110SoftwareInventory.
        A string representing the implementation-specific ID for identifying this software.

        :return: The software_id of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._software_id

    @software_id.setter
    def software_id(self, software_id):
        """
        Sets the software_id of this SoftwareInventoryV110SoftwareInventory.
        A string representing the implementation-specific ID for identifying this software.

        :param software_id: The software_id of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._software_id = software_id

    @property
    def status(self):
        """
        Gets the status of this SoftwareInventoryV110SoftwareInventory.


        :return: The status of this SoftwareInventoryV110SoftwareInventory.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SoftwareInventoryV110SoftwareInventory.


        :param status: The status of this SoftwareInventoryV110SoftwareInventory.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def uefi_device_paths(self):
        """
        Gets the uefi_device_paths of this SoftwareInventoryV110SoftwareInventory.
        A list of strings representing the UEFI Device Path(s) of the component(s) associated with this software inventory item.

        :return: The uefi_device_paths of this SoftwareInventoryV110SoftwareInventory.
        :rtype: list[str]
        """
        return self._uefi_device_paths

    @uefi_device_paths.setter
    def uefi_device_paths(self, uefi_device_paths):
        """
        Sets the uefi_device_paths of this SoftwareInventoryV110SoftwareInventory.
        A list of strings representing the UEFI Device Path(s) of the component(s) associated with this software inventory item.

        :param uefi_device_paths: The uefi_device_paths of this SoftwareInventoryV110SoftwareInventory.
        :type: list[str]
        """
        self._uefi_device_paths = uefi_device_paths

    @property
    def updateable(self):
        """
        Gets the updateable of this SoftwareInventoryV110SoftwareInventory.
        Indicates whether this software can be updated by the update service.

        :return: The updateable of this SoftwareInventoryV110SoftwareInventory.
        :rtype: bool
        """
        return self._updateable

    @updateable.setter
    def updateable(self, updateable):
        """
        Sets the updateable of this SoftwareInventoryV110SoftwareInventory.
        Indicates whether this software can be updated by the update service.

        :param updateable: The updateable of this SoftwareInventoryV110SoftwareInventory.
        :type: bool
        """
        self._updateable = updateable

    @property
    def version(self):
        """
        Gets the version of this SoftwareInventoryV110SoftwareInventory.
        A string representing the version of this software.

        :return: The version of this SoftwareInventoryV110SoftwareInventory.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this SoftwareInventoryV110SoftwareInventory.
        A string representing the version of this software.

        :param version: The version of this SoftwareInventoryV110SoftwareInventory.
        :type: str
        """
        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

