# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Volume102VolumeOperations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Volume102VolumeOperations - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'operation_name': 'str',
            'percentage_complete': 'float',
            'associated_task': 'Task100Task'
        }

        self.attribute_map = {
            'operation_name': 'OperationName',
            'percentage_complete': 'PercentageComplete',
            'associated_task': 'AssociatedTask'
        }

        self._operation_name = None
        self._percentage_complete = None
        self._associated_task = None

    @property
    def operation_name(self):
        """
        Gets the operation_name of this Volume102VolumeOperations.
        The name of the operation.

        :return: The operation_name of this Volume102VolumeOperations.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """
        Sets the operation_name of this Volume102VolumeOperations.
        The name of the operation.

        :param operation_name: The operation_name of this Volume102VolumeOperations.
        :type: str
        """
        self._operation_name = operation_name

    @property
    def percentage_complete(self):
        """
        Gets the percentage_complete of this Volume102VolumeOperations.
        The percentage of the operation that has been completed.

        :return: The percentage_complete of this Volume102VolumeOperations.
        :rtype: float
        """
        return self._percentage_complete

    @percentage_complete.setter
    def percentage_complete(self, percentage_complete):
        """
        Sets the percentage_complete of this Volume102VolumeOperations.
        The percentage of the operation that has been completed.

        :param percentage_complete: The percentage_complete of this Volume102VolumeOperations.
        :type: float
        """
        self._percentage_complete = percentage_complete

    @property
    def associated_task(self):
        """
        Gets the associated_task of this Volume102VolumeOperations.
        A reference to the task associated with the operation if any.

        :return: The associated_task of this Volume102VolumeOperations.
        :rtype: Task100Task
        """
        return self._associated_task

    @associated_task.setter
    def associated_task(self, associated_task):
        """
        Sets the associated_task of this Volume102VolumeOperations.
        A reference to the task associated with the operation if any.

        :param associated_task: The associated_task of this Volume102VolumeOperations.
        :type: Task100Task
        """
        self._associated_task = associated_task

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

