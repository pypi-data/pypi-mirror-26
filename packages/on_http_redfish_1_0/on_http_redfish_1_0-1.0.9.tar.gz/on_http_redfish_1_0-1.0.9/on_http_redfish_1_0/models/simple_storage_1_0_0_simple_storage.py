# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SimpleStorage100SimpleStorage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SimpleStorage100SimpleStorage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'description': 'str',
            'devices': 'list[SimpleStorage100Device]',
            'id': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'status': 'ResourceStatus',
            'uefi_device_path': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'devices': 'Devices',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem',
            'status': 'Status',
            'uefi_device_path': 'UefiDevicePath'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._devices = None
        self._id = None
        self._name = None
        self._oem = None
        self._status = None
        self._uefi_device_path = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this SimpleStorage100SimpleStorage.


        :return: The odata_context of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this SimpleStorage100SimpleStorage.


        :param odata_context: The odata_context of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this SimpleStorage100SimpleStorage.


        :return: The odata_id of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this SimpleStorage100SimpleStorage.


        :param odata_id: The odata_id of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this SimpleStorage100SimpleStorage.


        :return: The odata_type of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this SimpleStorage100SimpleStorage.


        :param odata_type: The odata_type of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this SimpleStorage100SimpleStorage.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SimpleStorage100SimpleStorage.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._description = description

    @property
    def devices(self):
        """
        Gets the devices of this SimpleStorage100SimpleStorage.
        The storage devices associated with this resource

        :return: The devices of this SimpleStorage100SimpleStorage.
        :rtype: list[SimpleStorage100Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """
        Sets the devices of this SimpleStorage100SimpleStorage.
        The storage devices associated with this resource

        :param devices: The devices of this SimpleStorage100SimpleStorage.
        :type: list[SimpleStorage100Device]
        """
        self._devices = devices

    @property
    def id(self):
        """
        Gets the id of this SimpleStorage100SimpleStorage.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SimpleStorage100SimpleStorage.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this SimpleStorage100SimpleStorage.
        The name of the resource or array element.

        :return: The name of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SimpleStorage100SimpleStorage.
        The name of the resource or array element.

        :param name: The name of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this SimpleStorage100SimpleStorage.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this SimpleStorage100SimpleStorage.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this SimpleStorage100SimpleStorage.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this SimpleStorage100SimpleStorage.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def status(self):
        """
        Gets the status of this SimpleStorage100SimpleStorage.


        :return: The status of this SimpleStorage100SimpleStorage.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SimpleStorage100SimpleStorage.


        :param status: The status of this SimpleStorage100SimpleStorage.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def uefi_device_path(self):
        """
        Gets the uefi_device_path of this SimpleStorage100SimpleStorage.
        The UEFI device path used to access this storage controller.

        :return: The uefi_device_path of this SimpleStorage100SimpleStorage.
        :rtype: str
        """
        return self._uefi_device_path

    @uefi_device_path.setter
    def uefi_device_path(self, uefi_device_path):
        """
        Sets the uefi_device_path of this SimpleStorage100SimpleStorage.
        The UEFI device path used to access this storage controller.

        :param uefi_device_path: The uefi_device_path of this SimpleStorage100SimpleStorage.
        :type: str
        """
        self._uefi_device_path = uefi_device_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

