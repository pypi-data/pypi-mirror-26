# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class LogEntry100LogEntry(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        LogEntry100LogEntry - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'created': 'datetime',
            'description': 'str',
            'entry_code': 'str',
            'entry_type': 'str',
            'id': 'str',
            'links': 'LogEntry100LogEntryLinks',
            'message': 'str',
            'message_args': 'list[str]',
            'message_id': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'oem_record_format': 'str',
            'sensor_number': 'float',
            'sensor_type': 'str',
            'severity': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'created': 'Created',
            'description': 'Description',
            'entry_code': 'EntryCode',
            'entry_type': 'EntryType',
            'id': 'Id',
            'links': 'Links',
            'message': 'Message',
            'message_args': 'MessageArgs',
            'message_id': 'MessageId',
            'name': 'Name',
            'oem': 'Oem',
            'oem_record_format': 'OemRecordFormat',
            'sensor_number': 'SensorNumber',
            'sensor_type': 'SensorType',
            'severity': 'Severity'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._created = None
        self._description = None
        self._entry_code = None
        self._entry_type = None
        self._id = None
        self._links = None
        self._message = None
        self._message_args = None
        self._message_id = None
        self._name = None
        self._oem = None
        self._oem_record_format = None
        self._sensor_number = None
        self._sensor_type = None
        self._severity = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this LogEntry100LogEntry.


        :return: The odata_context of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this LogEntry100LogEntry.


        :param odata_context: The odata_context of this LogEntry100LogEntry.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this LogEntry100LogEntry.


        :return: The odata_id of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this LogEntry100LogEntry.


        :param odata_id: The odata_id of this LogEntry100LogEntry.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this LogEntry100LogEntry.


        :return: The odata_type of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this LogEntry100LogEntry.


        :param odata_type: The odata_type of this LogEntry100LogEntry.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def created(self):
        """
        Gets the created of this LogEntry100LogEntry.
        The time the log entry was created.

        :return: The created of this LogEntry100LogEntry.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this LogEntry100LogEntry.
        The time the log entry was created.

        :param created: The created of this LogEntry100LogEntry.
        :type: datetime
        """
        self._created = created

    @property
    def description(self):
        """
        Gets the description of this LogEntry100LogEntry.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this LogEntry100LogEntry.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this LogEntry100LogEntry.
        :type: str
        """
        self._description = description

    @property
    def entry_code(self):
        """
        Gets the entry_code of this LogEntry100LogEntry.
        If the EntryType is SEL, this will have the entry code for the log entry.

        :return: The entry_code of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._entry_code

    @entry_code.setter
    def entry_code(self, entry_code):
        """
        Sets the entry_code of this LogEntry100LogEntry.
        If the EntryType is SEL, this will have the entry code for the log entry.

        :param entry_code: The entry_code of this LogEntry100LogEntry.
        :type: str
        """
        allowed_values = ["Assert", "Deassert", "Lower Non-critical - going low", "Lower Non-critical - going high", "Lower Critical - going low", "Lower Critical - going high", "Lower Non-recoverable - going low", "Lower Non-recoverable - going high", "Upper Non-critical - going low", "Upper Non-critical - going high", "Upper Critical - going low", "Upper Critical - going high", "Upper Non-recoverable - going low", "Upper Non-recoverable - going high", "Transition to Idle", "Transition to Active", "Transition to Busy", "State Deasserted", "State Asserted", "Predictive Failure deasserted", "Predictive Failure asserted", "Limit Not Exceeded", "Limit Exceeded", "Performance Met", "Performance Lags", "Transition to OK", "Transition to Non-Critical from OK", "Transition to Critical from less severe", "Transition to Non-recoverable from less severe", "Transition to Non-Critical from more severe", "Transition to Critical from Non-recoverable", "Transition to Non-recoverable", "Monitor", "Informational", "Device Removed / Device Absent", "Device Inserted / Device Present", "Device Disabled", "Device Enabled", "Transition to Running", "Transition to In Test", "Transition to Power Off", "Transition to On Line", "Transition to Off Line", "Transition to Off Duty", "Transition to Degraded", "Transition to Power Save", "Install Error", "Fully Redundant", "Redundancy Lost", "Redundancy Degraded", "Non-redundant:Sufficient Resources from Redundant", "Non-redundant:Sufficient Resources from Insufficient Resources", "Non-redundant:Insufficient Resources", "Redundancy Degraded from Fully Redundant", "Redundancy Degraded from Non-redundant", "D0 Power State", "D1 Power State", "D2 Power State", "D3 Power State"]
        if entry_code not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_code`, must be one of {0}"
                .format(allowed_values)
            )
        self._entry_code = entry_code

    @property
    def entry_type(self):
        """
        Gets the entry_type of this LogEntry100LogEntry.
        his is the type of log entry.

        :return: The entry_type of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """
        Sets the entry_type of this LogEntry100LogEntry.
        his is the type of log entry.

        :param entry_type: The entry_type of this LogEntry100LogEntry.
        :type: str
        """
        allowed_values = ["Event", "SEL", "Oem"]
        if entry_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entry_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._entry_type = entry_type

    @property
    def id(self):
        """
        Gets the id of this LogEntry100LogEntry.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LogEntry100LogEntry.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this LogEntry100LogEntry.
        :type: str
        """
        self._id = id

    @property
    def links(self):
        """
        Gets the links of this LogEntry100LogEntry.


        :return: The links of this LogEntry100LogEntry.
        :rtype: LogEntry100LogEntryLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this LogEntry100LogEntry.


        :param links: The links of this LogEntry100LogEntry.
        :type: LogEntry100LogEntryLinks
        """
        self._links = links

    @property
    def message(self):
        """
        Gets the message of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.

        :return: The message of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is Event then it is a message string.  Otherwise, it is SEL or Oem specific.  In most cases, this will be the actual Log Entry.

        :param message: The message of this LogEntry100LogEntry.
        :type: str
        """
        self._message = message

    @property
    def message_args(self):
        """
        Gets the message_args of this LogEntry100LogEntry.
        The values of this property shall be any arguments for the message.

        :return: The message_args of this LogEntry100LogEntry.
        :rtype: list[str]
        """
        return self._message_args

    @message_args.setter
    def message_args(self, message_args):
        """
        Sets the message_args of this LogEntry100LogEntry.
        The values of this property shall be any arguments for the message.

        :param message_args: The message_args of this LogEntry100LogEntry.
        :type: list[str]
        """
        self._message_args = message_args

    @property
    def message_id(self):
        """
        Gets the message_id of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.

        :return: The message_id of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """
        Sets the message_id of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is Event then it is a message id.  Otherwise, it is SEL or Oem specific.  This value is only used for registries - for more information, see the specification.

        :param message_id: The message_id of this LogEntry100LogEntry.
        :type: str
        """
        self._message_id = message_id

    @property
    def name(self):
        """
        Gets the name of this LogEntry100LogEntry.
        The name of the resource or array element.

        :return: The name of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LogEntry100LogEntry.
        The name of the resource or array element.

        :param name: The name of this LogEntry100LogEntry.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this LogEntry100LogEntry.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this LogEntry100LogEntry.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this LogEntry100LogEntry.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this LogEntry100LogEntry.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def oem_record_format(self):
        """
        Gets the oem_record_format of this LogEntry100LogEntry.
        If the entry type is Oem, this will contain more information about the record format from the Oem.

        :return: The oem_record_format of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._oem_record_format

    @oem_record_format.setter
    def oem_record_format(self, oem_record_format):
        """
        Sets the oem_record_format of this LogEntry100LogEntry.
        If the entry type is Oem, this will contain more information about the record format from the Oem.

        :param oem_record_format: The oem_record_format of this LogEntry100LogEntry.
        :type: str
        """
        self._oem_record_format = oem_record_format

    @property
    def sensor_number(self):
        """
        Gets the sensor_number of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.

        :return: The sensor_number of this LogEntry100LogEntry.
        :rtype: float
        """
        return self._sensor_number

    @sensor_number.setter
    def sensor_number(self, sensor_number):
        """
        Sets the sensor_number of this LogEntry100LogEntry.
        This property decodes from EntryType:  If it is SEL, it is the sensor number; if Event then the count of events.  Otherwise, it is Oem specific.

        :param sensor_number: The sensor_number of this LogEntry100LogEntry.
        :type: float
        """
        self._sensor_number = sensor_number

    @property
    def sensor_type(self):
        """
        Gets the sensor_type of this LogEntry100LogEntry.
        If the EntryType is SEL, this will have the sensor type that the log entry pertains to.

        :return: The sensor_type of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._sensor_type

    @sensor_type.setter
    def sensor_type(self, sensor_type):
        """
        Sets the sensor_type of this LogEntry100LogEntry.
        If the EntryType is SEL, this will have the sensor type that the log entry pertains to.

        :param sensor_type: The sensor_type of this LogEntry100LogEntry.
        :type: str
        """
        allowed_values = ["Platform Security Violation Attempt", "Temperature", "Voltage", "Current", "Fan", "Physical Chassis Security", "Processor", "Power Supply / Converter", "PowerUnit", "CoolingDevice", "Other Units-based Sensor", "Memory", "Drive Slot/Bay", "POST Memory Resize", "System Firmware Progress", "Event Logging Disabled", "System Event", "Critical Interrupt", "Button/Switch", "Module/Board", "Microcontroller/Coprocessor", "Add-in Card", "Chassis", "ChipSet", "Other FRU", "Cable/Interconnect", "Terminator", "SystemBoot/Restart", "Boot Error", "BaseOSBoot/InstallationStatus", "OS Stop/Shutdown", "Slot/Connector", "System ACPI PowerState", "Watchdog", "Platform Alert", "Entity Presence", "Monitor ASIC/IC", "LAN", "Management Subsystem Health", "Battery", "Session Audit", "Version Change", "FRUState"]
        if sensor_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sensor_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._sensor_type = sensor_type

    @property
    def severity(self):
        """
        Gets the severity of this LogEntry100LogEntry.
        This is the severity of the log entry.

        :return: The severity of this LogEntry100LogEntry.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this LogEntry100LogEntry.
        This is the severity of the log entry.

        :param severity: The severity of this LogEntry100LogEntry.
        :type: str
        """
        allowed_values = ["OK", "Warning", "Critical"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity`, must be one of {0}"
                .format(allowed_values)
            )
        self._severity = severity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

