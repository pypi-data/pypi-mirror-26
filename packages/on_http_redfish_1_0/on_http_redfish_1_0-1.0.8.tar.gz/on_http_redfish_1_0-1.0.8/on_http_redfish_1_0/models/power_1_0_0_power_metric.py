# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Power100PowerMetric(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Power100PowerMetric - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'average_consumed_watts': 'float',
            'interval_in_min': 'float',
            'max_consumed_watts': 'float',
            'min_consumed_watts': 'float'
        }

        self.attribute_map = {
            'average_consumed_watts': 'AverageConsumedWatts',
            'interval_in_min': 'IntervalInMin',
            'max_consumed_watts': 'MaxConsumedWatts',
            'min_consumed_watts': 'MinConsumedWatts'
        }

        self._average_consumed_watts = None
        self._interval_in_min = None
        self._max_consumed_watts = None
        self._min_consumed_watts = None

    @property
    def average_consumed_watts(self):
        """
        Gets the average_consumed_watts of this Power100PowerMetric.
        The average power level over the measurement window (the last IntervalInMin minutes).

        :return: The average_consumed_watts of this Power100PowerMetric.
        :rtype: float
        """
        return self._average_consumed_watts

    @average_consumed_watts.setter
    def average_consumed_watts(self, average_consumed_watts):
        """
        Sets the average_consumed_watts of this Power100PowerMetric.
        The average power level over the measurement window (the last IntervalInMin minutes).

        :param average_consumed_watts: The average_consumed_watts of this Power100PowerMetric.
        :type: float
        """
        self._average_consumed_watts = average_consumed_watts

    @property
    def interval_in_min(self):
        """
        Gets the interval_in_min of this Power100PowerMetric.
        The time interval (or window) in which the PowerMetrics are measured over.

        :return: The interval_in_min of this Power100PowerMetric.
        :rtype: float
        """
        return self._interval_in_min

    @interval_in_min.setter
    def interval_in_min(self, interval_in_min):
        """
        Sets the interval_in_min of this Power100PowerMetric.
        The time interval (or window) in which the PowerMetrics are measured over.

        :param interval_in_min: The interval_in_min of this Power100PowerMetric.
        :type: float
        """
        self._interval_in_min = interval_in_min

    @property
    def max_consumed_watts(self):
        """
        Gets the max_consumed_watts of this Power100PowerMetric.
        The highest power consumption level that has occured over the measurement window (the last IntervalInMin minutes).

        :return: The max_consumed_watts of this Power100PowerMetric.
        :rtype: float
        """
        return self._max_consumed_watts

    @max_consumed_watts.setter
    def max_consumed_watts(self, max_consumed_watts):
        """
        Sets the max_consumed_watts of this Power100PowerMetric.
        The highest power consumption level that has occured over the measurement window (the last IntervalInMin minutes).

        :param max_consumed_watts: The max_consumed_watts of this Power100PowerMetric.
        :type: float
        """
        self._max_consumed_watts = max_consumed_watts

    @property
    def min_consumed_watts(self):
        """
        Gets the min_consumed_watts of this Power100PowerMetric.
        The lowest power consumption level over the measurement window (the last IntervalInMin minutes).

        :return: The min_consumed_watts of this Power100PowerMetric.
        :rtype: float
        """
        return self._min_consumed_watts

    @min_consumed_watts.setter
    def min_consumed_watts(self, min_consumed_watts):
        """
        Sets the min_consumed_watts of this Power100PowerMetric.
        The lowest power consumption level over the measurement window (the last IntervalInMin minutes).

        :param min_consumed_watts: The min_consumed_watts of this Power100PowerMetric.
        :type: float
        """
        self._min_consumed_watts = min_consumed_watts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

