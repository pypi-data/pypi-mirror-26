# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IPAddressesV100IPv6Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IPAddressesV100IPv6Address - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'address': 'str',
            'address_origin': 'IPAddressesV100IPv6AddressOrigin',
            'address_state': 'IPAddressesV100AddressState',
            'oem': 'ResourceOem',
            'prefix_length': 'IPAddressesV100PrefixLength'
        }

        self.attribute_map = {
            'address': 'Address',
            'address_origin': 'AddressOrigin',
            'address_state': 'AddressState',
            'oem': 'Oem',
            'prefix_length': 'PrefixLength'
        }

        self._address = None
        self._address_origin = None
        self._address_state = None
        self._oem = None
        self._prefix_length = None

    @property
    def address(self):
        """
        Gets the address of this IPAddressesV100IPv6Address.
        This is the IPv6 Address.

        :return: The address of this IPAddressesV100IPv6Address.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this IPAddressesV100IPv6Address.
        This is the IPv6 Address.

        :param address: The address of this IPAddressesV100IPv6Address.
        :type: str
        """
        self._address = address

    @property
    def address_origin(self):
        """
        Gets the address_origin of this IPAddressesV100IPv6Address.
        This indicates how the address was determined.

        :return: The address_origin of this IPAddressesV100IPv6Address.
        :rtype: IPAddressesV100IPv6AddressOrigin
        """
        return self._address_origin

    @address_origin.setter
    def address_origin(self, address_origin):
        """
        Sets the address_origin of this IPAddressesV100IPv6Address.
        This indicates how the address was determined.

        :param address_origin: The address_origin of this IPAddressesV100IPv6Address.
        :type: IPAddressesV100IPv6AddressOrigin
        """
        self._address_origin = address_origin

    @property
    def address_state(self):
        """
        Gets the address_state of this IPAddressesV100IPv6Address.
        The current state of this address as defined in RFC 4862.

        :return: The address_state of this IPAddressesV100IPv6Address.
        :rtype: IPAddressesV100AddressState
        """
        return self._address_state

    @address_state.setter
    def address_state(self, address_state):
        """
        Sets the address_state of this IPAddressesV100IPv6Address.
        The current state of this address as defined in RFC 4862.

        :param address_state: The address_state of this IPAddressesV100IPv6Address.
        :type: IPAddressesV100AddressState
        """
        self._address_state = address_state

    @property
    def oem(self):
        """
        Gets the oem of this IPAddressesV100IPv6Address.


        :return: The oem of this IPAddressesV100IPv6Address.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this IPAddressesV100IPv6Address.


        :param oem: The oem of this IPAddressesV100IPv6Address.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def prefix_length(self):
        """
        Gets the prefix_length of this IPAddressesV100IPv6Address.
        This is the IPv6 Address Prefix Length.

        :return: The prefix_length of this IPAddressesV100IPv6Address.
        :rtype: IPAddressesV100PrefixLength
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """
        Sets the prefix_length of this IPAddressesV100IPv6Address.
        This is the IPv6 Address Prefix Length.

        :param prefix_length: The prefix_length of this IPAddressesV100IPv6Address.
        :type: IPAddressesV100PrefixLength
        """
        self._prefix_length = prefix_length

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

