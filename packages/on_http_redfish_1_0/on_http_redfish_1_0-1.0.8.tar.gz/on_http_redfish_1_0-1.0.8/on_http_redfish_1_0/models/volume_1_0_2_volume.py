# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Volume102Volume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Volume102Volume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'oem': 'ResourceOem',
            'id': 'str',
            'description': 'str',
            'name': 'str',
            'status': 'ResourceStatus',
            'capacity_bytes': 'float',
            'volume_type': 'str',
            'encrypted': 'bool',
            'encryption_types': 'list[ERRORUNKNOWN]',
            'block_size_bytes': 'float',
            'operations': 'list[Volume102VolumeOperations]',
            'optimum_io_size_bytes': 'float',
            'links': 'Volume102VolumeLinks',
            'actions': 'Volume102VolumeActions'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'oem': 'Oem',
            'id': 'Id',
            'description': 'Description',
            'name': 'Name',
            'status': 'Status',
            'capacity_bytes': 'CapacityBytes',
            'volume_type': 'VolumeType',
            'encrypted': 'Encrypted',
            'encryption_types': 'EncryptionTypes',
            'block_size_bytes': 'BlockSizeBytes',
            'operations': 'Operations',
            'optimum_io_size_bytes': 'OptimumIOSizeBytes',
            'links': 'Links',
            'actions': 'Actions'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._oem = None
        self._id = None
        self._description = None
        self._name = None
        self._status = None
        self._capacity_bytes = None
        self._volume_type = None
        self._encrypted = None
        self._encryption_types = None
        self._block_size_bytes = None
        self._operations = None
        self._optimum_io_size_bytes = None
        self._links = None
        self._actions = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Volume102Volume.


        :return: The odata_context of this Volume102Volume.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Volume102Volume.


        :param odata_context: The odata_context of this Volume102Volume.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Volume102Volume.


        :return: The odata_id of this Volume102Volume.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Volume102Volume.


        :param odata_id: The odata_id of this Volume102Volume.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Volume102Volume.


        :return: The odata_type of this Volume102Volume.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Volume102Volume.


        :param odata_type: The odata_type of this Volume102Volume.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def oem(self):
        """
        Gets the oem of this Volume102Volume.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Volume102Volume.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Volume102Volume.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Volume102Volume.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def id(self):
        """
        Gets the id of this Volume102Volume.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this Volume102Volume.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Volume102Volume.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this Volume102Volume.
        :type: str
        """
        self._id = id

    @property
    def description(self):
        """
        Gets the description of this Volume102Volume.
        Provides a description of this resource and is used for commonality in the schema definitions.

        :return: The description of this Volume102Volume.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Volume102Volume.
        Provides a description of this resource and is used for commonality in the schema definitions.

        :param description: The description of this Volume102Volume.
        :type: str
        """
        self._description = description

    @property
    def name(self):
        """
        Gets the name of this Volume102Volume.
        The name of the resource or array element.

        :return: The name of this Volume102Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Volume102Volume.
        The name of the resource or array element.

        :param name: The name of this Volume102Volume.
        :type: str
        """
        self._name = name

    @property
    def status(self):
        """
        Gets the status of this Volume102Volume.


        :return: The status of this Volume102Volume.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Volume102Volume.


        :param status: The status of this Volume102Volume.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def capacity_bytes(self):
        """
        Gets the capacity_bytes of this Volume102Volume.
        The size in bytes of this Volume.

        :return: The capacity_bytes of this Volume102Volume.
        :rtype: float
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """
        Sets the capacity_bytes of this Volume102Volume.
        The size in bytes of this Volume.

        :param capacity_bytes: The capacity_bytes of this Volume102Volume.
        :type: float
        """
        self._capacity_bytes = capacity_bytes

    @property
    def volume_type(self):
        """
        Gets the volume_type of this Volume102Volume.
        The type of this volume.

        :return: The volume_type of this Volume102Volume.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """
        Sets the volume_type of this Volume102Volume.
        The type of this volume.

        :param volume_type: The volume_type of this Volume102Volume.
        :type: str
        """
        allowed_values = ["RawDevice", "NonRedundant", "Mirrored", "StripedWithParity", "SpannedMirrors", "SpannedStripesWithParity"]
        if volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `volume_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._volume_type = volume_type

    @property
    def encrypted(self):
        """
        Gets the encrypted of this Volume102Volume.
        Is this Volume encrypted.

        :return: The encrypted of this Volume102Volume.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """
        Sets the encrypted of this Volume102Volume.
        Is this Volume encrypted.

        :param encrypted: The encrypted of this Volume102Volume.
        :type: bool
        """
        self._encrypted = encrypted

    @property
    def encryption_types(self):
        """
        Gets the encryption_types of this Volume102Volume.
        The types of encryption used by this Volume.

        :return: The encryption_types of this Volume102Volume.
        :rtype: list[ERRORUNKNOWN]
        """
        return self._encryption_types

    @encryption_types.setter
    def encryption_types(self, encryption_types):
        """
        Sets the encryption_types of this Volume102Volume.
        The types of encryption used by this Volume.

        :param encryption_types: The encryption_types of this Volume102Volume.
        :type: list[ERRORUNKNOWN]
        """
        self._encryption_types = encryption_types

    @property
    def block_size_bytes(self):
        """
        Gets the block_size_bytes of this Volume102Volume.
        The size of the smallest addressible unit (Block) of this volume in bytes.

        :return: The block_size_bytes of this Volume102Volume.
        :rtype: float
        """
        return self._block_size_bytes

    @block_size_bytes.setter
    def block_size_bytes(self, block_size_bytes):
        """
        Sets the block_size_bytes of this Volume102Volume.
        The size of the smallest addressible unit (Block) of this volume in bytes.

        :param block_size_bytes: The block_size_bytes of this Volume102Volume.
        :type: float
        """
        self._block_size_bytes = block_size_bytes

    @property
    def operations(self):
        """
        Gets the operations of this Volume102Volume.
        The operations currently running on the Volume.

        :return: The operations of this Volume102Volume.
        :rtype: list[Volume102VolumeOperations]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """
        Sets the operations of this Volume102Volume.
        The operations currently running on the Volume.

        :param operations: The operations of this Volume102Volume.
        :type: list[Volume102VolumeOperations]
        """
        self._operations = operations

    @property
    def optimum_io_size_bytes(self):
        """
        Gets the optimum_io_size_bytes of this Volume102Volume.
        The size in bytes of this Volume's optimum IO size.

        :return: The optimum_io_size_bytes of this Volume102Volume.
        :rtype: float
        """
        return self._optimum_io_size_bytes

    @optimum_io_size_bytes.setter
    def optimum_io_size_bytes(self, optimum_io_size_bytes):
        """
        Sets the optimum_io_size_bytes of this Volume102Volume.
        The size in bytes of this Volume's optimum IO size.

        :param optimum_io_size_bytes: The optimum_io_size_bytes of this Volume102Volume.
        :type: float
        """
        self._optimum_io_size_bytes = optimum_io_size_bytes

    @property
    def links(self):
        """
        Gets the links of this Volume102Volume.


        :return: The links of this Volume102Volume.
        :rtype: Volume102VolumeLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Volume102Volume.


        :param links: The links of this Volume102Volume.
        :type: Volume102VolumeLinks
        """
        self._links = links

    @property
    def actions(self):
        """
        Gets the actions of this Volume102Volume.


        :return: The actions of this Volume102Volume.
        :rtype: Volume102VolumeActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Volume102Volume.


        :param actions: The actions of this Volume102Volume.
        :type: Volume102VolumeActions
        """
        self._actions = actions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

