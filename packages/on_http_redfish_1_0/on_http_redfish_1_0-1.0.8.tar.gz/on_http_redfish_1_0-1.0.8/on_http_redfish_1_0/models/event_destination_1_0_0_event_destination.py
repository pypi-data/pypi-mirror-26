# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EventDestination100EventDestination(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EventDestination100EventDestination - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'context': 'str',
            'description': 'str',
            'destination': 'str',
            'event_types': 'list[str]',
            'http_headers': 'list[EventDestination100HttpHeaderProperty]',
            'id': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'protocol': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'context': 'Context',
            'description': 'Description',
            'destination': 'Destination',
            'event_types': 'EventTypes',
            'http_headers': 'HttpHeaders',
            'id': 'Id',
            'name': 'Name',
            'oem': 'Oem',
            'protocol': 'Protocol'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._context = None
        self._description = None
        self._destination = None
        self._event_types = None
        self._http_headers = None
        self._id = None
        self._name = None
        self._oem = None
        self._protocol = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this EventDestination100EventDestination.


        :return: The odata_context of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this EventDestination100EventDestination.


        :param odata_context: The odata_context of this EventDestination100EventDestination.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this EventDestination100EventDestination.


        :return: The odata_id of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this EventDestination100EventDestination.


        :param odata_id: The odata_id of this EventDestination100EventDestination.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this EventDestination100EventDestination.


        :return: The odata_type of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this EventDestination100EventDestination.


        :param odata_type: The odata_type of this EventDestination100EventDestination.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def context(self):
        """
        Gets the context of this EventDestination100EventDestination.
        A client-supplied string that is stored with the event destination subscription.

        :return: The context of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """
        Sets the context of this EventDestination100EventDestination.
        A client-supplied string that is stored with the event destination subscription.

        :param context: The context of this EventDestination100EventDestination.
        :type: str
        """
        self._context = context

    @property
    def description(self):
        """
        Gets the description of this EventDestination100EventDestination.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this EventDestination100EventDestination.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this EventDestination100EventDestination.
        :type: str
        """
        self._description = description

    @property
    def destination(self):
        """
        Gets the destination of this EventDestination100EventDestination.
        The URI of the destination Event Service.

        :return: The destination of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this EventDestination100EventDestination.
        The URI of the destination Event Service.

        :param destination: The destination of this EventDestination100EventDestination.
        :type: str
        """
        self._destination = destination

    @property
    def event_types(self):
        """
        Gets the event_types of this EventDestination100EventDestination.
        This property shall contain the types of events that shall be sent to the desination.

        :return: The event_types of this EventDestination100EventDestination.
        :rtype: list[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """
        Sets the event_types of this EventDestination100EventDestination.
        This property shall contain the types of events that shall be sent to the desination.

        :param event_types: The event_types of this EventDestination100EventDestination.
        :type: list[str]
        """
        self._event_types = event_types

    @property
    def http_headers(self):
        """
        Gets the http_headers of this EventDestination100EventDestination.
        This is for setting HTTP headers, such as authorization information.  This object will be null on a GET.

        :return: The http_headers of this EventDestination100EventDestination.
        :rtype: list[EventDestination100HttpHeaderProperty]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """
        Sets the http_headers of this EventDestination100EventDestination.
        This is for setting HTTP headers, such as authorization information.  This object will be null on a GET.

        :param http_headers: The http_headers of this EventDestination100EventDestination.
        :type: list[EventDestination100HttpHeaderProperty]
        """
        self._http_headers = http_headers

    @property
    def id(self):
        """
        Gets the id of this EventDestination100EventDestination.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EventDestination100EventDestination.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this EventDestination100EventDestination.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EventDestination100EventDestination.
        The name of the resource or array element.

        :return: The name of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EventDestination100EventDestination.
        The name of the resource or array element.

        :param name: The name of this EventDestination100EventDestination.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this EventDestination100EventDestination.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this EventDestination100EventDestination.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this EventDestination100EventDestination.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this EventDestination100EventDestination.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def protocol(self):
        """
        Gets the protocol of this EventDestination100EventDestination.
        The protocol type of the event connection.

        :return: The protocol of this EventDestination100EventDestination.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this EventDestination100EventDestination.
        The protocol type of the event connection.

        :param protocol: The protocol of this EventDestination100EventDestination.
        :type: str
        """
        allowed_values = ["Redfish"]
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol`, must be one of {0}"
                .format(allowed_values)
            )
        self._protocol = protocol

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

