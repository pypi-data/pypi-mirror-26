# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BiosChangePassword(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BiosChangePassword - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bios': 'BiosV100Actions',
            'new_password': 'str',
            'old_password': 'str',
            'password_name': 'str'
        }

        self.attribute_map = {
            'bios': 'Bios',
            'new_password': 'NewPassword',
            'old_password': 'OldPassword',
            'password_name': 'PasswordName'
        }

        self._bios = None
        self._new_password = None
        self._old_password = None
        self._password_name = None

    @property
    def bios(self):
        """
        Gets the bios of this BiosChangePassword.


        :return: The bios of this BiosChangePassword.
        :rtype: BiosV100Actions
        """
        return self._bios

    @bios.setter
    def bios(self, bios):
        """
        Sets the bios of this BiosChangePassword.


        :param bios: The bios of this BiosChangePassword.
        :type: BiosV100Actions
        """
        self._bios = bios

    @property
    def new_password(self):
        """
        Gets the new_password of this BiosChangePassword.
        The value of the new BIOS password.

        :return: The new_password of this BiosChangePassword.
        :rtype: str
        """
        return self._new_password

    @new_password.setter
    def new_password(self, new_password):
        """
        Sets the new_password of this BiosChangePassword.
        The value of the new BIOS password.

        :param new_password: The new_password of this BiosChangePassword.
        :type: str
        """
        self._new_password = new_password

    @property
    def old_password(self):
        """
        Gets the old_password of this BiosChangePassword.
        The value of the existing password.

        :return: The old_password of this BiosChangePassword.
        :rtype: str
        """
        return self._old_password

    @old_password.setter
    def old_password(self, old_password):
        """
        Sets the old_password of this BiosChangePassword.
        The value of the existing password.

        :param old_password: The old_password of this BiosChangePassword.
        :type: str
        """
        self._old_password = old_password

    @property
    def password_name(self):
        """
        Gets the password_name of this BiosChangePassword.
        The name of the BIOS password to change.

        :return: The password_name of this BiosChangePassword.
        :rtype: str
        """
        return self._password_name

    @password_name.setter
    def password_name(self, password_name):
        """
        Sets the password_name of this BiosChangePassword.
        The name of the BIOS password to change.

        :param password_name: The password_name of this BiosChangePassword.
        :type: str
        """
        self._password_name = password_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

