# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MessageRegistryFile100Location(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MessageRegistryFile100Location - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'archive_file': 'str',
            'archive_uri': 'str',
            'language': 'str',
            'publication_uri': 'str',
            'uri': 'str'
        }

        self.attribute_map = {
            'archive_file': 'ArchiveFile',
            'archive_uri': 'ArchiveUri',
            'language': 'Language',
            'publication_uri': 'PublicationUri',
            'uri': 'Uri'
        }

        self._archive_file = None
        self._archive_uri = None
        self._language = None
        self._publication_uri = None
        self._uri = None

    @property
    def archive_file(self):
        """
        Gets the archive_file of this MessageRegistryFile100Location.
        If the schema is hosted on the service in an archive file, this is the name of the file within the archive.

        :return: The archive_file of this MessageRegistryFile100Location.
        :rtype: str
        """
        return self._archive_file

    @archive_file.setter
    def archive_file(self, archive_file):
        """
        Sets the archive_file of this MessageRegistryFile100Location.
        If the schema is hosted on the service in an archive file, this is the name of the file within the archive.

        :param archive_file: The archive_file of this MessageRegistryFile100Location.
        :type: str
        """
        self._archive_file = archive_file

    @property
    def archive_uri(self):
        """
        Gets the archive_uri of this MessageRegistryFile100Location.
        If the schema is hosted on the service in an archive file, this is the link to the archive file.

        :return: The archive_uri of this MessageRegistryFile100Location.
        :rtype: str
        """
        return self._archive_uri

    @archive_uri.setter
    def archive_uri(self, archive_uri):
        """
        Sets the archive_uri of this MessageRegistryFile100Location.
        If the schema is hosted on the service in an archive file, this is the link to the archive file.

        :param archive_uri: The archive_uri of this MessageRegistryFile100Location.
        :type: str
        """
        self._archive_uri = archive_uri

    @property
    def language(self):
        """
        Gets the language of this MessageRegistryFile100Location.
        The language code for the file the schema is in.

        :return: The language of this MessageRegistryFile100Location.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this MessageRegistryFile100Location.
        The language code for the file the schema is in.

        :param language: The language of this MessageRegistryFile100Location.
        :type: str
        """
        self._language = language

    @property
    def publication_uri(self):
        """
        Gets the publication_uri of this MessageRegistryFile100Location.
        Link to publicly available (canonical) URI for schema.

        :return: The publication_uri of this MessageRegistryFile100Location.
        :rtype: str
        """
        return self._publication_uri

    @publication_uri.setter
    def publication_uri(self, publication_uri):
        """
        Sets the publication_uri of this MessageRegistryFile100Location.
        Link to publicly available (canonical) URI for schema.

        :param publication_uri: The publication_uri of this MessageRegistryFile100Location.
        :type: str
        """
        self._publication_uri = publication_uri

    @property
    def uri(self):
        """
        Gets the uri of this MessageRegistryFile100Location.
        Link to locally available URI for schema.

        :return: The uri of this MessageRegistryFile100Location.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this MessageRegistryFile100Location.
        Link to locally available URI for schema.

        :param uri: The uri of this MessageRegistryFile100Location.
        :type: str
        """
        self._uri = uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

