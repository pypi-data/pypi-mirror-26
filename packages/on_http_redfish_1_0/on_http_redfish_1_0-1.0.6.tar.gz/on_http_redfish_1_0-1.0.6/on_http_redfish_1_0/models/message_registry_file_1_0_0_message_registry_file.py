# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MessageRegistryFile100MessageRegistryFile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MessageRegistryFile100MessageRegistryFile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'description': 'str',
            'id': 'str',
            'languages': 'list[str]',
            'location': 'list[MessageRegistryFile100Location]',
            'name': 'str',
            'oem': 'ResourceOem',
            'registry': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'description': 'Description',
            'id': 'Id',
            'languages': 'Languages',
            'location': 'Location',
            'name': 'Name',
            'oem': 'Oem',
            'registry': 'Registry'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._description = None
        self._id = None
        self._languages = None
        self._location = None
        self._name = None
        self._oem = None
        self._registry = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this MessageRegistryFile100MessageRegistryFile.


        :return: The odata_context of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this MessageRegistryFile100MessageRegistryFile.


        :param odata_context: The odata_context of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this MessageRegistryFile100MessageRegistryFile.


        :return: The odata_id of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this MessageRegistryFile100MessageRegistryFile.


        :param odata_id: The odata_id of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this MessageRegistryFile100MessageRegistryFile.


        :return: The odata_type of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this MessageRegistryFile100MessageRegistryFile.


        :param odata_type: The odata_type of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def description(self):
        """
        Gets the description of this MessageRegistryFile100MessageRegistryFile.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MessageRegistryFile100MessageRegistryFile.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this MessageRegistryFile100MessageRegistryFile.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MessageRegistryFile100MessageRegistryFile.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._id = id

    @property
    def languages(self):
        """
        Gets the languages of this MessageRegistryFile100MessageRegistryFile.
        Language codes for the schemas available.

        :return: The languages of this MessageRegistryFile100MessageRegistryFile.
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """
        Sets the languages of this MessageRegistryFile100MessageRegistryFile.
        Language codes for the schemas available.

        :param languages: The languages of this MessageRegistryFile100MessageRegistryFile.
        :type: list[str]
        """
        self._languages = languages

    @property
    def location(self):
        """
        Gets the location of this MessageRegistryFile100MessageRegistryFile.
        Location information for this schema file.

        :return: The location of this MessageRegistryFile100MessageRegistryFile.
        :rtype: list[MessageRegistryFile100Location]
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this MessageRegistryFile100MessageRegistryFile.
        Location information for this schema file.

        :param location: The location of this MessageRegistryFile100MessageRegistryFile.
        :type: list[MessageRegistryFile100Location]
        """
        self._location = location

    @property
    def name(self):
        """
        Gets the name of this MessageRegistryFile100MessageRegistryFile.
        The name of the resource or array element.

        :return: The name of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MessageRegistryFile100MessageRegistryFile.
        The name of the resource or array element.

        :param name: The name of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this MessageRegistryFile100MessageRegistryFile.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this MessageRegistryFile100MessageRegistryFile.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this MessageRegistryFile100MessageRegistryFile.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this MessageRegistryFile100MessageRegistryFile.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def registry(self):
        """
        Gets the registry of this MessageRegistryFile100MessageRegistryFile.
        The Registry Name, Major and Minor version used in MessageID construction.

        :return: The registry of this MessageRegistryFile100MessageRegistryFile.
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """
        Sets the registry of this MessageRegistryFile100MessageRegistryFile.
        The Registry Name, Major and Minor version used in MessageID construction.

        :param registry: The registry of this MessageRegistryFile100MessageRegistryFile.
        :type: str
        """
        self._registry = registry

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

