# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ManagerNetworkProtocol100SSDProtocol(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ManagerNetworkProtocol100SSDProtocol - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'notify_i_pv6_scope': 'str',
            'notify_multicast_interval_seconds': 'float',
            'notify_ttl': 'float',
            'port': 'float',
            'protocol_enabled': 'bool'
        }

        self.attribute_map = {
            'notify_i_pv6_scope': 'NotifyIPv6Scope',
            'notify_multicast_interval_seconds': 'NotifyMulticastIntervalSeconds',
            'notify_ttl': 'NotifyTTL',
            'port': 'Port',
            'protocol_enabled': 'ProtocolEnabled'
        }

        self._notify_i_pv6_scope = None
        self._notify_multicast_interval_seconds = None
        self._notify_ttl = None
        self._port = None
        self._protocol_enabled = None

    @property
    def notify_i_pv6_scope(self):
        """
        Gets the notify_i_pv6_scope of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the scope for the IPv6 Notify messages for SSDP.

        :return: The notify_i_pv6_scope of this ManagerNetworkProtocol100SSDProtocol.
        :rtype: str
        """
        return self._notify_i_pv6_scope

    @notify_i_pv6_scope.setter
    def notify_i_pv6_scope(self, notify_i_pv6_scope):
        """
        Sets the notify_i_pv6_scope of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the scope for the IPv6 Notify messages for SSDP.

        :param notify_i_pv6_scope: The notify_i_pv6_scope of this ManagerNetworkProtocol100SSDProtocol.
        :type: str
        """
        allowed_values = ["Link", "Site", "Organization"]
        if notify_i_pv6_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `notify_i_pv6_scope`, must be one of {0}"
                .format(allowed_values)
            )
        self._notify_i_pv6_scope = notify_i_pv6_scope

    @property
    def notify_multicast_interval_seconds(self):
        """
        Gets the notify_multicast_interval_seconds of this ManagerNetworkProtocol100SSDProtocol.
        Indicates how often the Multicast is done from this service for SSDP.

        :return: The notify_multicast_interval_seconds of this ManagerNetworkProtocol100SSDProtocol.
        :rtype: float
        """
        return self._notify_multicast_interval_seconds

    @notify_multicast_interval_seconds.setter
    def notify_multicast_interval_seconds(self, notify_multicast_interval_seconds):
        """
        Sets the notify_multicast_interval_seconds of this ManagerNetworkProtocol100SSDProtocol.
        Indicates how often the Multicast is done from this service for SSDP.

        :param notify_multicast_interval_seconds: The notify_multicast_interval_seconds of this ManagerNetworkProtocol100SSDProtocol.
        :type: float
        """
        self._notify_multicast_interval_seconds = notify_multicast_interval_seconds

    @property
    def notify_ttl(self):
        """
        Gets the notify_ttl of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the time to live hop count for SSDPs Notify messages.

        :return: The notify_ttl of this ManagerNetworkProtocol100SSDProtocol.
        :rtype: float
        """
        return self._notify_ttl

    @notify_ttl.setter
    def notify_ttl(self, notify_ttl):
        """
        Sets the notify_ttl of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the time to live hop count for SSDPs Notify messages.

        :param notify_ttl: The notify_ttl of this ManagerNetworkProtocol100SSDProtocol.
        :type: float
        """
        self._notify_ttl = notify_ttl

    @property
    def port(self):
        """
        Gets the port of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the protocol port.

        :return: The port of this ManagerNetworkProtocol100SSDProtocol.
        :rtype: float
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this ManagerNetworkProtocol100SSDProtocol.
        Indicates the protocol port.

        :param port: The port of this ManagerNetworkProtocol100SSDProtocol.
        :type: float
        """
        self._port = port

    @property
    def protocol_enabled(self):
        """
        Gets the protocol_enabled of this ManagerNetworkProtocol100SSDProtocol.
        Indicates if the protocol is enabled or disabled

        :return: The protocol_enabled of this ManagerNetworkProtocol100SSDProtocol.
        :rtype: bool
        """
        return self._protocol_enabled

    @protocol_enabled.setter
    def protocol_enabled(self, protocol_enabled):
        """
        Sets the protocol_enabled of this ManagerNetworkProtocol100SSDProtocol.
        Indicates if the protocol is enabled or disabled

        :param protocol_enabled: The protocol_enabled of this ManagerNetworkProtocol100SSDProtocol.
        :type: bool
        """
        self._protocol_enabled = protocol_enabled

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

