# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SerialInterfaceV103SerialInterface(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SerialInterfaceV103SerialInterface - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'bit_rate': 'str',
            'connector_type': 'str',
            'data_bits': 'str',
            'description': 'str',
            'flow_control': 'str',
            'id': 'str',
            'interface_enabled': 'bool',
            'name': 'str',
            'oem': 'ResourceOem',
            'parity': 'str',
            'pin_out': 'str',
            'signal_type': 'str',
            'stop_bits': 'str'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'bit_rate': 'BitRate',
            'connector_type': 'ConnectorType',
            'data_bits': 'DataBits',
            'description': 'Description',
            'flow_control': 'FlowControl',
            'id': 'Id',
            'interface_enabled': 'InterfaceEnabled',
            'name': 'Name',
            'oem': 'Oem',
            'parity': 'Parity',
            'pin_out': 'PinOut',
            'signal_type': 'SignalType',
            'stop_bits': 'StopBits'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._bit_rate = None
        self._connector_type = None
        self._data_bits = None
        self._description = None
        self._flow_control = None
        self._id = None
        self._interface_enabled = None
        self._name = None
        self._oem = None
        self._parity = None
        self._pin_out = None
        self._signal_type = None
        self._stop_bits = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this SerialInterfaceV103SerialInterface.


        :return: The odata_context of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this SerialInterfaceV103SerialInterface.


        :param odata_context: The odata_context of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this SerialInterfaceV103SerialInterface.


        :return: The odata_id of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this SerialInterfaceV103SerialInterface.


        :param odata_id: The odata_id of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this SerialInterfaceV103SerialInterface.


        :return: The odata_type of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this SerialInterfaceV103SerialInterface.


        :param odata_type: The odata_type of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def bit_rate(self):
        """
        Gets the bit_rate of this SerialInterfaceV103SerialInterface.
        The receive and transmit rate of data flow, typically in bits-per-second (bps), over the serial connection.

        :return: The bit_rate of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._bit_rate

    @bit_rate.setter
    def bit_rate(self, bit_rate):
        """
        Sets the bit_rate of this SerialInterfaceV103SerialInterface.
        The receive and transmit rate of data flow, typically in bits-per-second (bps), over the serial connection.

        :param bit_rate: The bit_rate of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["1200", "2400", "4800", "9600", "19200", "38400", "57600", "115200", "230400"]
        if bit_rate not in allowed_values:
            raise ValueError(
                "Invalid value for `bit_rate`, must be one of {0}"
                .format(allowed_values)
            )
        self._bit_rate = bit_rate

    @property
    def connector_type(self):
        """
        Gets the connector_type of this SerialInterfaceV103SerialInterface.
        The type of connector used for this interface.

        :return: The connector_type of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """
        Sets the connector_type of this SerialInterfaceV103SerialInterface.
        The type of connector used for this interface.

        :param connector_type: The connector_type of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["RJ45", "RJ11", "DB9 Female", "DB9 Male", "DB25 Female", "DB25 Male", "USB", "mUSB", "uUSB"]
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._connector_type = connector_type

    @property
    def data_bits(self):
        """
        Gets the data_bits of this SerialInterfaceV103SerialInterface.
        The number of data bits that will follow the start bit over the serial connection.

        :return: The data_bits of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._data_bits

    @data_bits.setter
    def data_bits(self, data_bits):
        """
        Sets the data_bits of this SerialInterfaceV103SerialInterface.
        The number of data bits that will follow the start bit over the serial connection.

        :param data_bits: The data_bits of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["5", "6", "7", "8"]
        if data_bits not in allowed_values:
            raise ValueError(
                "Invalid value for `data_bits`, must be one of {0}"
                .format(allowed_values)
            )
        self._data_bits = data_bits

    @property
    def description(self):
        """
        Gets the description of this SerialInterfaceV103SerialInterface.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SerialInterfaceV103SerialInterface.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._description = description

    @property
    def flow_control(self):
        """
        Gets the flow_control of this SerialInterfaceV103SerialInterface.
        The type of flow control, if any, that will be imposed on the serial connection.

        :return: The flow_control of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._flow_control

    @flow_control.setter
    def flow_control(self, flow_control):
        """
        Sets the flow_control of this SerialInterfaceV103SerialInterface.
        The type of flow control, if any, that will be imposed on the serial connection.

        :param flow_control: The flow_control of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["None", "Software", "Hardware"]
        if flow_control not in allowed_values:
            raise ValueError(
                "Invalid value for `flow_control`, must be one of {0}"
                .format(allowed_values)
            )
        self._flow_control = flow_control

    @property
    def id(self):
        """
        Gets the id of this SerialInterfaceV103SerialInterface.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SerialInterfaceV103SerialInterface.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._id = id

    @property
    def interface_enabled(self):
        """
        Gets the interface_enabled of this SerialInterfaceV103SerialInterface.
        This indicates whether this interface is enabled.

        :return: The interface_enabled of this SerialInterfaceV103SerialInterface.
        :rtype: bool
        """
        return self._interface_enabled

    @interface_enabled.setter
    def interface_enabled(self, interface_enabled):
        """
        Sets the interface_enabled of this SerialInterfaceV103SerialInterface.
        This indicates whether this interface is enabled.

        :param interface_enabled: The interface_enabled of this SerialInterfaceV103SerialInterface.
        :type: bool
        """
        self._interface_enabled = interface_enabled

    @property
    def name(self):
        """
        Gets the name of this SerialInterfaceV103SerialInterface.
        The name of the resource or array element.

        :return: The name of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SerialInterfaceV103SerialInterface.
        The name of the resource or array element.

        :param name: The name of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this SerialInterfaceV103SerialInterface.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this SerialInterfaceV103SerialInterface.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this SerialInterfaceV103SerialInterface.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this SerialInterfaceV103SerialInterface.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def parity(self):
        """
        Gets the parity of this SerialInterfaceV103SerialInterface.
        The type of parity used by the sender and receiver in order to detect errors over the serial connection.

        :return: The parity of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._parity

    @parity.setter
    def parity(self, parity):
        """
        Sets the parity of this SerialInterfaceV103SerialInterface.
        The type of parity used by the sender and receiver in order to detect errors over the serial connection.

        :param parity: The parity of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["None", "Even", "Odd", "Mark", "Space"]
        if parity not in allowed_values:
            raise ValueError(
                "Invalid value for `parity`, must be one of {0}"
                .format(allowed_values)
            )
        self._parity = parity

    @property
    def pin_out(self):
        """
        Gets the pin_out of this SerialInterfaceV103SerialInterface.
        The physical pin configuration needed for a serial connector.

        :return: The pin_out of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._pin_out

    @pin_out.setter
    def pin_out(self, pin_out):
        """
        Sets the pin_out of this SerialInterfaceV103SerialInterface.
        The physical pin configuration needed for a serial connector.

        :param pin_out: The pin_out of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["Cisco", "Cyclades", "Digi"]
        if pin_out not in allowed_values:
            raise ValueError(
                "Invalid value for `pin_out`, must be one of {0}"
                .format(allowed_values)
            )
        self._pin_out = pin_out

    @property
    def signal_type(self):
        """
        Gets the signal_type of this SerialInterfaceV103SerialInterface.
        The type of signal used for the communication connection - RS232 or RS485.

        :return: The signal_type of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._signal_type

    @signal_type.setter
    def signal_type(self, signal_type):
        """
        Sets the signal_type of this SerialInterfaceV103SerialInterface.
        The type of signal used for the communication connection - RS232 or RS485.

        :param signal_type: The signal_type of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["Rs232", "Rs485"]
        if signal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `signal_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._signal_type = signal_type

    @property
    def stop_bits(self):
        """
        Gets the stop_bits of this SerialInterfaceV103SerialInterface.
        The period of time before the next start bit is transmitted.

        :return: The stop_bits of this SerialInterfaceV103SerialInterface.
        :rtype: str
        """
        return self._stop_bits

    @stop_bits.setter
    def stop_bits(self, stop_bits):
        """
        Sets the stop_bits of this SerialInterfaceV103SerialInterface.
        The period of time before the next start bit is transmitted.

        :param stop_bits: The stop_bits of this SerialInterfaceV103SerialInterface.
        :type: str
        """
        allowed_values = ["1", "2"]
        if stop_bits not in allowed_values:
            raise ValueError(
                "Invalid value for `stop_bits`, must be one of {0}"
                .format(allowed_values)
            )
        self._stop_bits = stop_bits

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

