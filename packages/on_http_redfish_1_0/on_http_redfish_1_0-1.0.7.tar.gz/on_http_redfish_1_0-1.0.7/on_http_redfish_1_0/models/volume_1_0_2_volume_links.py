# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Volume102VolumeLinks(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Volume102VolumeLinks - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'oem': 'ResourceOem',
            'drivesodata_count': 'float',
            'drives': 'list[Odata400IdRef]',
            'drivesodata_navigation_link': 'Odata400IdRef'
        }

        self.attribute_map = {
            'oem': 'Oem',
            'drivesodata_count': 'Drives@odata.count',
            'drives': 'Drives',
            'drivesodata_navigation_link': 'Drives@odata.navigationLink'
        }

        self._oem = None
        self._drivesodata_count = None
        self._drives = None
        self._drivesodata_navigation_link = None

    @property
    def oem(self):
        """
        Gets the oem of this Volume102VolumeLinks.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Volume102VolumeLinks.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Volume102VolumeLinks.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Volume102VolumeLinks.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def drivesodata_count(self):
        """
        Gets the drivesodata_count of this Volume102VolumeLinks.


        :return: The drivesodata_count of this Volume102VolumeLinks.
        :rtype: float
        """
        return self._drivesodata_count

    @drivesodata_count.setter
    def drivesodata_count(self, drivesodata_count):
        """
        Sets the drivesodata_count of this Volume102VolumeLinks.


        :param drivesodata_count: The drivesodata_count of this Volume102VolumeLinks.
        :type: float
        """
        self._drivesodata_count = drivesodata_count

    @property
    def drives(self):
        """
        Gets the drives of this Volume102VolumeLinks.
        An array of references to the drives which contain this volume. This will reference Drives that either wholly or only partly contain this volume.

        :return: The drives of this Volume102VolumeLinks.
        :rtype: list[Odata400IdRef]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """
        Sets the drives of this Volume102VolumeLinks.
        An array of references to the drives which contain this volume. This will reference Drives that either wholly or only partly contain this volume.

        :param drives: The drives of this Volume102VolumeLinks.
        :type: list[Odata400IdRef]
        """
        self._drives = drives

    @property
    def drivesodata_navigation_link(self):
        """
        Gets the drivesodata_navigation_link of this Volume102VolumeLinks.


        :return: The drivesodata_navigation_link of this Volume102VolumeLinks.
        :rtype: Odata400IdRef
        """
        return self._drivesodata_navigation_link

    @drivesodata_navigation_link.setter
    def drivesodata_navigation_link(self, drivesodata_navigation_link):
        """
        Sets the drivesodata_navigation_link of this Volume102VolumeLinks.


        :param drivesodata_navigation_link: The drivesodata_navigation_link of this Volume102VolumeLinks.
        :type: Odata400IdRef
        """
        self._drivesodata_navigation_link = drivesodata_navigation_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

