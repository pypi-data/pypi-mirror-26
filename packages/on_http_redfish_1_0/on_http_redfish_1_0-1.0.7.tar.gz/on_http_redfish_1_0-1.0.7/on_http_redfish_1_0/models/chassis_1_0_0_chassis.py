# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Chassis100Chassis(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Chassis100Chassis - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'odata_context': 'str',
            'odata_id': 'str',
            'odata_type': 'str',
            'actions': 'Chassis100ChassisActions',
            'asset_tag': 'str',
            'chassis_type': 'str',
            'description': 'str',
            'id': 'str',
            'indicator_led': 'str',
            'links': 'Chassis100ChassisLinks',
            'log_services': 'LogServiceCollectionLogServiceCollection',
            'manufacturer': 'str',
            'model': 'str',
            'name': 'str',
            'oem': 'ResourceOem',
            'part_number': 'str',
            'power': 'Odata400IdRef',
            'sku': 'str',
            'serial_number': 'str',
            'status': 'ResourceStatus',
            'thermal': 'Odata400IdRef'
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'odata_type': '@odata.type',
            'actions': 'Actions',
            'asset_tag': 'AssetTag',
            'chassis_type': 'ChassisType',
            'description': 'Description',
            'id': 'Id',
            'indicator_led': 'IndicatorLED',
            'links': 'Links',
            'log_services': 'LogServices',
            'manufacturer': 'Manufacturer',
            'model': 'Model',
            'name': 'Name',
            'oem': 'Oem',
            'part_number': 'PartNumber',
            'power': 'Power',
            'sku': 'SKU',
            'serial_number': 'SerialNumber',
            'status': 'Status',
            'thermal': 'Thermal'
        }

        self._odata_context = None
        self._odata_id = None
        self._odata_type = None
        self._actions = None
        self._asset_tag = None
        self._chassis_type = None
        self._description = None
        self._id = None
        self._indicator_led = None
        self._links = None
        self._log_services = None
        self._manufacturer = None
        self._model = None
        self._name = None
        self._oem = None
        self._part_number = None
        self._power = None
        self._sku = None
        self._serial_number = None
        self._status = None
        self._thermal = None

    @property
    def odata_context(self):
        """
        Gets the odata_context of this Chassis100Chassis.


        :return: The odata_context of this Chassis100Chassis.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """
        Sets the odata_context of this Chassis100Chassis.


        :param odata_context: The odata_context of this Chassis100Chassis.
        :type: str
        """
        self._odata_context = odata_context

    @property
    def odata_id(self):
        """
        Gets the odata_id of this Chassis100Chassis.


        :return: The odata_id of this Chassis100Chassis.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """
        Sets the odata_id of this Chassis100Chassis.


        :param odata_id: The odata_id of this Chassis100Chassis.
        :type: str
        """
        self._odata_id = odata_id

    @property
    def odata_type(self):
        """
        Gets the odata_type of this Chassis100Chassis.


        :return: The odata_type of this Chassis100Chassis.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """
        Sets the odata_type of this Chassis100Chassis.


        :param odata_type: The odata_type of this Chassis100Chassis.
        :type: str
        """
        self._odata_type = odata_type

    @property
    def actions(self):
        """
        Gets the actions of this Chassis100Chassis.


        :return: The actions of this Chassis100Chassis.
        :rtype: Chassis100ChassisActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """
        Sets the actions of this Chassis100Chassis.


        :param actions: The actions of this Chassis100Chassis.
        :type: Chassis100ChassisActions
        """
        self._actions = actions

    @property
    def asset_tag(self):
        """
        Gets the asset_tag of this Chassis100Chassis.
        The user assigned asset tag for this chassis.

        :return: The asset_tag of this Chassis100Chassis.
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """
        Sets the asset_tag of this Chassis100Chassis.
        The user assigned asset tag for this chassis.

        :param asset_tag: The asset_tag of this Chassis100Chassis.
        :type: str
        """
        self._asset_tag = asset_tag

    @property
    def chassis_type(self):
        """
        Gets the chassis_type of this Chassis100Chassis.
        This property indicates the type of physical form factor of this resource.

        :return: The chassis_type of this Chassis100Chassis.
        :rtype: str
        """
        return self._chassis_type

    @chassis_type.setter
    def chassis_type(self, chassis_type):
        """
        Sets the chassis_type of this Chassis100Chassis.
        This property indicates the type of physical form factor of this resource.

        :param chassis_type: The chassis_type of this Chassis100Chassis.
        :type: str
        """
        allowed_values = ["Rack", "Blade", "Enclosure", "StandAlone", "RackMount", "Card", "Cartridge", "Row", "Pod", "Expansion", "Sidecar", "Zone", "Sled", "Shelf", "Drawer", "Module", "Component", "Other"]
        if chassis_type not in allowed_values:
            raise ValueError(
                "Invalid value for `chassis_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._chassis_type = chassis_type

    @property
    def description(self):
        """
        Gets the description of this Chassis100Chassis.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :return: The description of this Chassis100Chassis.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Chassis100Chassis.
        Provides a description of this resource and is used for commonality  in the schema definitions.

        :param description: The description of this Chassis100Chassis.
        :type: str
        """
        self._description = description

    @property
    def id(self):
        """
        Gets the id of this Chassis100Chassis.
        Uniquely identifies the resource within the collection of like resources.

        :return: The id of this Chassis100Chassis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Chassis100Chassis.
        Uniquely identifies the resource within the collection of like resources.

        :param id: The id of this Chassis100Chassis.
        :type: str
        """
        self._id = id

    @property
    def indicator_led(self):
        """
        Gets the indicator_led of this Chassis100Chassis.
        The state of the indicator LED, used to identify the chassis.

        :return: The indicator_led of this Chassis100Chassis.
        :rtype: str
        """
        return self._indicator_led

    @indicator_led.setter
    def indicator_led(self, indicator_led):
        """
        Sets the indicator_led of this Chassis100Chassis.
        The state of the indicator LED, used to identify the chassis.

        :param indicator_led: The indicator_led of this Chassis100Chassis.
        :type: str
        """
        allowed_values = ["Unknown", "Lit", "Blinking", "Off"]
        if indicator_led not in allowed_values:
            raise ValueError(
                "Invalid value for `indicator_led`, must be one of {0}"
                .format(allowed_values)
            )
        self._indicator_led = indicator_led

    @property
    def links(self):
        """
        Gets the links of this Chassis100Chassis.


        :return: The links of this Chassis100Chassis.
        :rtype: Chassis100ChassisLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """
        Sets the links of this Chassis100Chassis.


        :param links: The links of this Chassis100Chassis.
        :type: Chassis100ChassisLinks
        """
        self._links = links

    @property
    def log_services(self):
        """
        Gets the log_services of this Chassis100Chassis.
        A reference to the logs for this chassis.

        :return: The log_services of this Chassis100Chassis.
        :rtype: LogServiceCollectionLogServiceCollection
        """
        return self._log_services

    @log_services.setter
    def log_services(self, log_services):
        """
        Sets the log_services of this Chassis100Chassis.
        A reference to the logs for this chassis.

        :param log_services: The log_services of this Chassis100Chassis.
        :type: LogServiceCollectionLogServiceCollection
        """
        self._log_services = log_services

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this Chassis100Chassis.
        This is the manufacturer of this chassis.

        :return: The manufacturer of this Chassis100Chassis.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this Chassis100Chassis.
        This is the manufacturer of this chassis.

        :param manufacturer: The manufacturer of this Chassis100Chassis.
        :type: str
        """
        self._manufacturer = manufacturer

    @property
    def model(self):
        """
        Gets the model of this Chassis100Chassis.
        This is the model number for the chassis.

        :return: The model of this Chassis100Chassis.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this Chassis100Chassis.
        This is the model number for the chassis.

        :param model: The model of this Chassis100Chassis.
        :type: str
        """
        self._model = model

    @property
    def name(self):
        """
        Gets the name of this Chassis100Chassis.
        The name of the resource or array element.

        :return: The name of this Chassis100Chassis.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Chassis100Chassis.
        The name of the resource or array element.

        :param name: The name of this Chassis100Chassis.
        :type: str
        """
        self._name = name

    @property
    def oem(self):
        """
        Gets the oem of this Chassis100Chassis.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :return: The oem of this Chassis100Chassis.
        :rtype: ResourceOem
        """
        return self._oem

    @oem.setter
    def oem(self, oem):
        """
        Sets the oem of this Chassis100Chassis.
        This is the manufacturer/provider specific extension moniker used to divide the Oem object into sections.

        :param oem: The oem of this Chassis100Chassis.
        :type: ResourceOem
        """
        self._oem = oem

    @property
    def part_number(self):
        """
        Gets the part_number of this Chassis100Chassis.
        The part number for this chassis.

        :return: The part_number of this Chassis100Chassis.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """
        Sets the part_number of this Chassis100Chassis.
        The part number for this chassis.

        :param part_number: The part_number of this Chassis100Chassis.
        :type: str
        """
        self._part_number = part_number

    @property
    def power(self):
        """
        Gets the power of this Chassis100Chassis.
        A reference to the power properties (power supplies, power policies, sensors) for this chassis.

        :return: The power of this Chassis100Chassis.
        :rtype: Odata400IdRef
        """
        return self._power

    @power.setter
    def power(self, power):
        """
        Sets the power of this Chassis100Chassis.
        A reference to the power properties (power supplies, power policies, sensors) for this chassis.

        :param power: The power of this Chassis100Chassis.
        :type: Odata400IdRef
        """
        self._power = power

    @property
    def sku(self):
        """
        Gets the sku of this Chassis100Chassis.
        This is the SKU for this chassis.

        :return: The sku of this Chassis100Chassis.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Chassis100Chassis.
        This is the SKU for this chassis.

        :param sku: The sku of this Chassis100Chassis.
        :type: str
        """
        self._sku = sku

    @property
    def serial_number(self):
        """
        Gets the serial_number of this Chassis100Chassis.
        The serial number for this chassis.

        :return: The serial_number of this Chassis100Chassis.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this Chassis100Chassis.
        The serial number for this chassis.

        :param serial_number: The serial_number of this Chassis100Chassis.
        :type: str
        """
        self._serial_number = serial_number

    @property
    def status(self):
        """
        Gets the status of this Chassis100Chassis.


        :return: The status of this Chassis100Chassis.
        :rtype: ResourceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Chassis100Chassis.


        :param status: The status of this Chassis100Chassis.
        :type: ResourceStatus
        """
        self._status = status

    @property
    def thermal(self):
        """
        Gets the thermal of this Chassis100Chassis.
        A reference to the thermal properties (fans, cooling, sensors) for this chassis.

        :return: The thermal of this Chassis100Chassis.
        :rtype: Odata400IdRef
        """
        return self._thermal

    @thermal.setter
    def thermal(self, thermal):
        """
        Sets the thermal of this Chassis100Chassis.
        A reference to the thermal properties (fans, cooling, sensors) for this chassis.

        :param thermal: The thermal of this Chassis100Chassis.
        :type: Odata400IdRef
        """
        self._thermal = thermal

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

