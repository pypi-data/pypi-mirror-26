# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Power100PowerLimit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Power100PowerLimit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'correction_in_ms': 'float',
            'limit_exception': 'str',
            'limit_in_watts': 'float'
        }

        self.attribute_map = {
            'correction_in_ms': 'CorrectionInMs',
            'limit_exception': 'LimitException',
            'limit_in_watts': 'LimitInWatts'
        }

        self._correction_in_ms = None
        self._limit_exception = None
        self._limit_in_watts = None

    @property
    def correction_in_ms(self):
        """
        Gets the correction_in_ms of this Power100PowerLimit.
        The time required for the limiting process to reduce power consumption to below the limit.

        :return: The correction_in_ms of this Power100PowerLimit.
        :rtype: float
        """
        return self._correction_in_ms

    @correction_in_ms.setter
    def correction_in_ms(self, correction_in_ms):
        """
        Sets the correction_in_ms of this Power100PowerLimit.
        The time required for the limiting process to reduce power consumption to below the limit.

        :param correction_in_ms: The correction_in_ms of this Power100PowerLimit.
        :type: float
        """
        self._correction_in_ms = correction_in_ms

    @property
    def limit_exception(self):
        """
        Gets the limit_exception of this Power100PowerLimit.
        The action that is taken if the power cannot be maintained below the LimitInWatts.

        :return: The limit_exception of this Power100PowerLimit.
        :rtype: str
        """
        return self._limit_exception

    @limit_exception.setter
    def limit_exception(self, limit_exception):
        """
        Sets the limit_exception of this Power100PowerLimit.
        The action that is taken if the power cannot be maintained below the LimitInWatts.

        :param limit_exception: The limit_exception of this Power100PowerLimit.
        :type: str
        """
        allowed_values = ["NoAction", "HardPowerOff", "LogEventOnly", "Oem"]
        if limit_exception not in allowed_values:
            raise ValueError(
                "Invalid value for `limit_exception`, must be one of {0}"
                .format(allowed_values)
            )
        self._limit_exception = limit_exception

    @property
    def limit_in_watts(self):
        """
        Gets the limit_in_watts of this Power100PowerLimit.
        The Power limit in watts. Set to null to disable power capping.

        :return: The limit_in_watts of this Power100PowerLimit.
        :rtype: float
        """
        return self._limit_in_watts

    @limit_in_watts.setter
    def limit_in_watts(self, limit_in_watts):
        """
        Sets the limit_in_watts of this Power100PowerLimit.
        The Power limit in watts. Set to null to disable power capping.

        :param limit_in_watts: The limit_in_watts of this Power100PowerLimit.
        :type: float
        """
        self._limit_in_watts = limit_in_watts

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

